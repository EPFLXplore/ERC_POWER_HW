
Geode_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd10  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf90  0800bf90  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf90  0800bf90  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf90  0800bf90  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf90  0800bf90  0001bf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800bf98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011bf0  200001d8  0800c170  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011dc8  0800c170  00021dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000231bc  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005bd2  00000000  00000000  00043407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d78  00000000  00000000  00048fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000163d  00000000  00000000  0004ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026eef  00000000  00000000  0004c395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027595  00000000  00000000  00073284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc98c  00000000  00000000  0009a819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007abc  00000000  00000000  001771a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017ec64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bed8 	.word	0x0800bed8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800bed8 	.word	0x0800bed8

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <MX_FREERTOS_Init+0x18>)
 8000226:	2100      	movs	r1, #0
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <MX_FREERTOS_Init+0x1c>)
 800022a:	f008 fb55 	bl	80088d8 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a03      	ldr	r2, [pc, #12]	; (8000240 <MX_FREERTOS_Init+0x20>)
 8000232:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	0800bf5c 	.word	0x0800bf5c
 800023c:	08000245 	.word	0x08000245
 8000240:	200001f4 	.word	0x200001f4

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f008 fbd5 	bl	80089fc <osDelay>
 8000252:	e7fb      	b.n	800024c <StartDefaultTask+0x8>

08000254 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_CRC_Init+0x50>)
 800025a:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <MX_CRC_Init+0x54>)
 800025c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_CRC_Init+0x50>)
 8000260:	2201      	movs	r2, #1
 8000262:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_CRC_Init+0x50>)
 8000266:	2201      	movs	r2, #1
 8000268:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <MX_CRC_Init+0x50>)
 800026c:	2207      	movs	r2, #7
 800026e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <MX_CRC_Init+0x50>)
 8000272:	2208      	movs	r2, #8
 8000274:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <MX_CRC_Init+0x50>)
 8000278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800027c:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <MX_CRC_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <MX_CRC_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <MX_CRC_Init+0x50>)
 800028c:	2201      	movs	r2, #1
 800028e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000290:	4804      	ldr	r0, [pc, #16]	; (80002a4 <MX_CRC_Init+0x50>)
 8000292:	f000 ff77 	bl	8001184 <HAL_CRC_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 800029c:	f000 fbdb 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200001f8 	.word	0x200001f8
 80002a8:	40023000 	.word	0x40023000

080002ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <HAL_CRC_MspInit+0x38>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d10b      	bne.n	80002d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <HAL_CRC_MspInit+0x3c>)
 80002c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002c2:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <HAL_CRC_MspInit+0x3c>)
 80002c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c8:	6493      	str	r3, [r2, #72]	; 0x48
 80002ca:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <HAL_CRC_MspInit+0x3c>)
 80002cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40023000 	.word	0x40023000
 80002e8:	40021000 	.word	0x40021000

080002ec <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_FDCAN1_Init+0x84>)
 80002f2:	4a20      	ldr	r2, [pc, #128]	; (8000374 <MX_FDCAN1_Init+0x88>)
 80002f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_FDCAN1_Init+0x84>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <MX_FDCAN1_Init+0x84>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000302:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <MX_FDCAN1_Init+0x84>)
 800030a:	2200      	movs	r2, #0
 800030c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000310:	2200      	movs	r2, #0
 8000312:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000316:	2200      	movs	r2, #0
 8000318:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_FDCAN1_Init+0x84>)
 800031c:	2210      	movs	r2, #16
 800031e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000322:	2201      	movs	r2, #1
 8000324:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000328:	2202      	movs	r2, #2
 800032a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_FDCAN1_Init+0x84>)
 800032e:	2202      	movs	r2, #2
 8000330:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000334:	2201      	movs	r2, #1
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <MX_FDCAN1_Init+0x84>)
 800033a:	2201      	movs	r2, #1
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000340:	2201      	movs	r2, #1
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000346:	2201      	movs	r2, #1
 8000348:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_FDCAN1_Init+0x84>)
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000352:	2200      	movs	r2, #0
 8000354:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_FDCAN1_Init+0x84>)
 8000358:	2200      	movs	r2, #0
 800035a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_FDCAN1_Init+0x84>)
 800035e:	f001 f803 	bl	8001368 <HAL_FDCAN_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000368:	f000 fb75 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	2000021c 	.word	0x2000021c
 8000374:	40006400 	.word	0x40006400

08000378 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800037c:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <MX_FDCAN2_Init+0x84>)
 800037e:	4a20      	ldr	r2, [pc, #128]	; (8000400 <MX_FDCAN2_Init+0x88>)
 8000380:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000382:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <MX_FDCAN2_Init+0x84>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <MX_FDCAN2_Init+0x84>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800038e:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_FDCAN2_Init+0x84>)
 8000390:	2200      	movs	r2, #0
 8000392:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <MX_FDCAN2_Init+0x84>)
 8000396:	2200      	movs	r2, #0
 8000398:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_FDCAN2_Init+0x84>)
 800039c:	2200      	movs	r2, #0
 800039e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003a8:	2210      	movs	r2, #16
 80003aa:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003b4:	2202      	movs	r2, #2
 80003b6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003ba:	2202      	movs	r2, #2
 80003bc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003d8:	2200      	movs	r2, #0
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003de:	2200      	movs	r2, #0
 80003e0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <MX_FDCAN2_Init+0x84>)
 80003ea:	f000 ffbd 	bl	8001368 <HAL_FDCAN_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80003f4:	f000 fb2f 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000280 	.word	0x20000280
 8000400:	40006800 	.word	0x40006800

08000404 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b0a0      	sub	sp, #128	; 0x80
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	2254      	movs	r2, #84	; 0x54
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f00b fc6d 	bl	800bd04 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a48      	ldr	r2, [pc, #288]	; (8000550 <HAL_FDCAN_MspInit+0x14c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d142      	bne.n	80004ba <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000438:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800043a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800043e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	4618      	mov	r0, r3
 8000446:	f003 ff3f 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000450:	f000 fb01 	bl	8000a56 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000454:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <HAL_FDCAN_MspInit+0x150>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3301      	adds	r3, #1
 800045a:	4a3e      	ldr	r2, [pc, #248]	; (8000554 <HAL_FDCAN_MspInit+0x150>)
 800045c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800045e:	4b3d      	ldr	r3, [pc, #244]	; (8000554 <HAL_FDCAN_MspInit+0x150>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d10b      	bne.n	800047e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000466:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 8000468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800046a:	4a3b      	ldr	r2, [pc, #236]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 800046c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000470:	6593      	str	r3, [r2, #88]	; 0x58
 8000472:	4b39      	ldr	r3, [pc, #228]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 8000474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b36      	ldr	r3, [pc, #216]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4a35      	ldr	r2, [pc, #212]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048a:	4b33      	ldr	r3, [pc, #204]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800049a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2300      	movs	r3, #0
 80004a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004a8:	2309      	movs	r3, #9
 80004aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004b0:	4619      	mov	r1, r3
 80004b2:	482a      	ldr	r0, [pc, #168]	; (800055c <HAL_FDCAN_MspInit+0x158>)
 80004b4:	f001 f91e 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80004b8:	e045      	b.n	8000546 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a28      	ldr	r2, [pc, #160]	; (8000560 <HAL_FDCAN_MspInit+0x15c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d140      	bne.n	8000546 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	4618      	mov	r0, r3
 80004d6:	f003 fef7 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 80004e0:	f000 fab9 	bl	8000a56 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <HAL_FDCAN_MspInit+0x150>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	4a1a      	ldr	r2, [pc, #104]	; (8000554 <HAL_FDCAN_MspInit+0x150>)
 80004ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <HAL_FDCAN_MspInit+0x150>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d10b      	bne.n	800050e <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fa:	4a17      	ldr	r2, [pc, #92]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 80004fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000500:	6593      	str	r3, [r2, #88]	; 0x58
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_FDCAN_MspInit+0x154>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000526:	2360      	movs	r3, #96	; 0x60
 8000528:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000536:	2309      	movs	r3, #9
 8000538:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800053e:	4619      	mov	r1, r3
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <HAL_FDCAN_MspInit+0x158>)
 8000542:	f001 f8d7 	bl	80016f4 <HAL_GPIO_Init>
}
 8000546:	bf00      	nop
 8000548:	3780      	adds	r7, #128	; 0x80
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40006400 	.word	0x40006400
 8000554:	200002e4 	.word	0x200002e4
 8000558:	40021000 	.word	0x40021000
 800055c:	48000400 	.word	0x48000400
 8000560:	40006800 	.word	0x40006800

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b5f      	ldr	r3, [pc, #380]	; (80006f8 <MX_GPIO_Init+0x194>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a5e      	ldr	r2, [pc, #376]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b5c      	ldr	r3, [pc, #368]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	4b59      	ldr	r3, [pc, #356]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a58      	ldr	r2, [pc, #352]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b56      	ldr	r3, [pc, #344]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b53      	ldr	r3, [pc, #332]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a52      	ldr	r2, [pc, #328]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a4c      	ldr	r2, [pc, #304]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a46      	ldr	r2, [pc, #280]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 80005f2:	2200      	movs	r2, #0
 80005f4:	f246 0187 	movw	r1, #24711	; 0x6087
 80005f8:	4840      	ldr	r0, [pc, #256]	; (80006fc <MX_GPIO_Init+0x198>)
 80005fa:	f001 f9fd 	bl	80019f8 <HAL_GPIO_WritePin>
                          |SYNC1_Pin|INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_SHDN_VA_Pin|MB_SHDN_VB_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	210a      	movs	r1, #10
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f001 f9f7 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2187      	movs	r1, #135	; 0x87
 800060e:	483c      	ldr	r0, [pc, #240]	; (8000700 <MX_GPIO_Init+0x19c>)
 8000610:	f001 f9f2 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 8000614:	f246 0387 	movw	r3, #24711	; 0x6087
 8000618:	617b      	str	r3, [r7, #20]
                          |SYNC1_Pin|INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4833      	ldr	r0, [pc, #204]	; (80006fc <MX_GPIO_Init+0x198>)
 800062e:	f001 f861 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = RUN1_B_Pin|RUN0_B_Pin|FAULT0_B_Pin|PRE_FLT_Pin
 8000632:	f248 0378 	movw	r3, #32888	; 0x8078
 8000636:	617b      	str	r3, [r7, #20]
                          |RUN0_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	482d      	ldr	r0, [pc, #180]	; (80006fc <MX_GPIO_Init+0x198>)
 8000648:	f001 f854 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT1_B_Pin|ALERT_B_Pin|RUN1_A_Pin;
 800064c:	f240 4305 	movw	r3, #1029	; 0x405
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 f846 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_SHDN_VA_Pin|MB_SHDN_VB_Pin;
 8000668:	230a      	movs	r3, #10
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f001 f837 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin;
 8000686:	2387      	movs	r3, #135	; 0x87
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <MX_GPIO_Init+0x19c>)
 800069e:	f001 f829 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAULT1_A_Pin|FAULT0_A_Pin;
 80006a2:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <MX_GPIO_Init+0x19c>)
 80006b8:	f001 f81c 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 80006bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x19c>)
 80006d2:	f001 f80f 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_A_Pin;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_A_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_GPIO_Init+0x1a0>)
 80006ea:	f001 f803 	bl	80016f4 <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000800 	.word	0x48000800
 8000700:	48000400 	.word	0x48000400
 8000704:	48000c00 	.word	0x48000c00

08000708 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_I2C2_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_I2C2_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_I2C2_Init+0x74>)
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <MX_I2C2_Init+0x7c>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_I2C2_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_I2C2_Init+0x74>)
 8000744:	f001 f970 	bl	8001a28 <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800074e:	f000 f982 	bl	8000a56 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <MX_I2C2_Init+0x74>)
 8000756:	f001 fa02 	bl	8001b5e <HAL_I2CEx_ConfigAnalogFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 f979 	bl	8000a56 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_I2C2_Init+0x74>)
 8000768:	f001 fa44 	bl	8001bf4 <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f970 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200002e8 	.word	0x200002e8
 8000780:	40005800 	.word	0x40005800
 8000784:	00e057fd 	.word	0x00e057fd

08000788 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C3_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C3_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00E057FD;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C3_Init+0x74>)
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <MX_I2C3_Init+0x7c>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C3_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C3_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_I2C3_Init+0x74>)
 80007c4:	f001 f930 	bl	8001a28 <HAL_I2C_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f000 f942 	bl	8000a56 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_I2C3_Init+0x74>)
 80007d6:	f001 f9c2 	bl	8001b5e <HAL_I2CEx_ConfigAnalogFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f939 	bl	8000a56 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2C3_Init+0x74>)
 80007e8:	f001 fa04 	bl	8001bf4 <HAL_I2CEx_ConfigDigitalFilter>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 f930 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000033c 	.word	0x2000033c
 8000800:	40007800 	.word	0x40007800
 8000804:	00e057fd 	.word	0x00e057fd

08000808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0a0      	sub	sp, #128	; 0x80
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	2254      	movs	r2, #84	; 0x54
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f00b fa6b 	bl	800bd04 <memset>
  if(i2cHandle->Instance==I2C2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a3e      	ldr	r2, [pc, #248]	; (800092c <HAL_I2C_MspInit+0x124>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d138      	bne.n	80008aa <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fd3f 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000850:	f000 f901 	bl	8000a56 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b36      	ldr	r3, [pc, #216]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	4a35      	ldr	r2, [pc, #212]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000860:	4b33      	ldr	r3, [pc, #204]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000870:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	2312      	movs	r3, #18
 8000874:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800087e:	2304      	movs	r3, #4
 8000880:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 ff32 	bl	80016f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800089a:	6593      	str	r3, [r2, #88]	; 0x58
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800089e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008a8:	e03c      	b.n	8000924 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <HAL_I2C_MspInit+0x12c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d137      	bne.n	8000924 <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fd00 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80008ce:	f000 f8c2 	bl	8000a56 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_I2C_MspInit+0x128>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <HAL_I2C_MspInit+0x128>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_I2C_MspInit+0x128>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80008fc:	2308      	movs	r3, #8
 80008fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <HAL_I2C_MspInit+0x130>)
 8000908:	f000 fef4 	bl	80016f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000916:	6593      	str	r3, [r2, #88]	; 0x58
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
}
 8000924:	bf00      	nop
 8000926:	3780      	adds	r7, #128	; 0x80
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40005800 	.word	0x40005800
 8000930:	40021000 	.word	0x40021000
 8000934:	40007800 	.word	0x40007800
 8000938:	48000800 	.word	0x48000800

0800093c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_IWDG_Init+0x34>)
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <MX_IWDG_Init+0x38>)
 8000944:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_IWDG_Init+0x34>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_IWDG_Init+0x34>)
 800094e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000952:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_IWDG_Init+0x34>)
 8000956:	f640 72ff 	movw	r2, #4095	; 0xfff
 800095a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_IWDG_Init+0x34>)
 800095e:	f001 f995 	bl	8001c8c <HAL_IWDG_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000968:	f000 f875 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000390 	.word	0x20000390
 8000974:	40003000 	.word	0x40003000

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 fa81 	bl	8000e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f81d 	bl	80009be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f7ff fdee 	bl	8000564 <MX_GPIO_Init>
  MX_CRC_Init();
 8000988:	f7ff fc64 	bl	8000254 <MX_CRC_Init>
  MX_FDCAN1_Init();
 800098c:	f7ff fcae 	bl	80002ec <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000990:	f7ff fcf2 	bl	8000378 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000994:	f7ff feb8 	bl	8000708 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000998:	f7ff fef6 	bl	8000788 <MX_I2C3_Init>
  MX_IWDG_Init();
 800099c:	f7ff ffce 	bl	800093c <MX_IWDG_Init>
  MX_SPI1_Init();
 80009a0:	f000 f85e 	bl	8000a60 <MX_SPI1_Init>
  MX_SPI2_Init();
 80009a4:	f000 f89a 	bl	8000adc <MX_SPI2_Init>
  MX_SPI3_Init();
 80009a8:	f000 f8d6 	bl	8000b58 <MX_SPI3_Init>
  MX_USB_Device_Init();
 80009ac:	f00a fcc6 	bl	800b33c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009b0:	f007 ff48 	bl	8008844 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009b4:	f7ff fc34 	bl	8000220 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009b8:	f007 ff68 	bl	800888c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <main+0x44>

080009be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b094      	sub	sp, #80	; 0x50
 80009c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	2238      	movs	r2, #56	; 0x38
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00b f999 	bl	800bd04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e4:	f002 fed6 	bl	8003794 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009e8:	2309      	movs	r3, #9
 80009ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fa:	2303      	movs	r3, #3
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV16;
 80009fe:	2310      	movs	r3, #16
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a02:	2360      	movs	r3, #96	; 0x60
 8000a04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 ff60 	bl	80038dc <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a22:	f000 f818 	bl	8000a56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fa5e 	bl	8003f00 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a4a:	f000 f804 	bl	8000a56 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	; 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5a:	b672      	cpsid	i
}
 8000a5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <Error_Handler+0x8>

08000a60 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_SPI1_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000aae:	2207      	movs	r2, #7
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_SPI1_Init+0x74>)
 8000ac0:	f003 fe50 	bl	8004764 <HAL_SPI_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f7ff ffc4 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200003a0 	.word	0x200003a0
 8000ad8:	40013000 	.word	0x40013000

08000adc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_SPI2_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000af6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000afa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_SPI2_Init+0x74>)
 8000b3c:	f003 fe12 	bl	8004764 <HAL_SPI_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f7ff ff86 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000404 	.word	0x20000404
 8000b54:	40003800 	.word	0x40003800

08000b58 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <MX_SPI3_Init+0x78>)
 8000b60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b8e:	2208      	movs	r2, #8
 8000b90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_SPI3_Init+0x74>)
 8000bb8:	f003 fdd4 	bl	8004764 <HAL_SPI_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f7ff ff48 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000468 	.word	0x20000468
 8000bd0:	40003c00 	.word	0x40003c00

08000bd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a55      	ldr	r2, [pc, #340]	; (8000d48 <HAL_SPI_MspInit+0x174>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d129      	bne.n	8000c4a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf6:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	4a54      	ldr	r2, [pc, #336]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c00:	6613      	str	r3, [r2, #96]	; 0x60
 8000c02:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0a:	623b      	str	r3, [r7, #32]
 8000c0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a4e      	ldr	r2, [pc, #312]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c26:	23f0      	movs	r3, #240	; 0xf0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c36:	2305      	movs	r3, #5
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 fd56 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c48:	e07a      	b.n	8000d40 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a40      	ldr	r2, [pc, #256]	; (8000d50 <HAL_SPI_MspInit+0x17c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d129      	bne.n	8000ca8 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c54:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c60:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a36      	ldr	r2, [pc, #216]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c96:	2305      	movs	r3, #5
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	482c      	ldr	r0, [pc, #176]	; (8000d54 <HAL_SPI_MspInit+0x180>)
 8000ca2:	f000 fd27 	bl	80016f4 <HAL_GPIO_Init>
}
 8000ca6:	e04b      	b.n	8000d40 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a2a      	ldr	r2, [pc, #168]	; (8000d58 <HAL_SPI_MspInit+0x184>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d146      	bne.n	8000d40 <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_SPI_MspInit+0x178>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f000 fceb 	bl	80016f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d30:	2306      	movs	r3, #6
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <HAL_SPI_MspInit+0x188>)
 8000d3c:	f000 fcda 	bl	80016f4 <HAL_GPIO_Init>
}
 8000d40:	bf00      	nop
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40013000 	.word	0x40013000
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40003800 	.word	0x40003800
 8000d54:	48000400 	.word	0x48000400
 8000d58:	40003c00 	.word	0x40003c00
 8000d5c:	48000800 	.word	0x48000800

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_MspInit+0x4c>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_MspInit+0x4c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6613      	str	r3, [r2, #96]	; 0x60
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_MspInit+0x4c>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_MspInit+0x4c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_MspInit+0x4c>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	210f      	movs	r1, #15
 8000d9a:	f06f 0001 	mvn.w	r0, #1
 8000d9e:	f000 f9bc 	bl	800111a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f8a2 	bl	8000f28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000de4:	f009 fa42 	bl	800a26c <xTaskGetSchedulerState>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d001      	beq.n	8000df2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dee:	f00a f82b 	bl	800ae48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <USB_LP_IRQHandler+0x10>)
 8000dfe:	f001 f884 	bl	8001f0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2001178c 	.word	0x2001178c

08000e0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f00a ffaf 	bl	800bdc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e62:	f7ff fd89 	bl	8000978 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000e74:	0800bf98 	.word	0x0800bf98
  ldr r2, =_sbss
 8000e78:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000e7c:	20011dc8 	.word	0x20011dc8

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>

08000e82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f939 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 f80e 	bl	8000eb4 <HAL_InitTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	e001      	b.n	8000ea8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea4:	f7ff ff5c 	bl	8000d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_InitTick+0x68>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d022      	beq.n	8000f0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_InitTick+0x6c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_InitTick+0x68>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f944 	bl	800116a <HAL_SYSTICK_Config>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10f      	bne.n	8000f08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d809      	bhi.n	8000f02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	f000 f910 	bl	800111a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_InitTick+0x70>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e007      	b.n	8000f12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e004      	b.n	8000f12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e001      	b.n	8000f12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x20>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	200004cc 	.word	0x200004cc
 8000f48:	20000008 	.word	0x20000008

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200004cc 	.word	0x200004cc

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff29 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff40 	bl	8000fac <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff90 	bl	8001058 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5f 	bl	8001004 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff33 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa4 	bl	80010c0 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e054      	b.n	8001240 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7f5b      	ldrb	r3, [r3, #29]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f880 	bl	80002ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2202      	movs	r2, #2
 80011b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a22      	ldr	r2, [pc, #136]	; (8001248 <HAL_CRC_Init+0xc4>)
 80011c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0218 	bic.w	r2, r2, #24
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e00c      	b.n	80011ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6899      	ldr	r1, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	461a      	mov	r2, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f834 	bl	800124c <HAL_CRCEx_Polynomial_Set>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e028      	b.n	8001240 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	795b      	ldrb	r3, [r3, #5]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f04f 32ff 	mov.w	r2, #4294967295
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	e004      	b.n	800120c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6912      	ldr	r2, [r2, #16]
 800120a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	04c11db7 	.word	0x04c11db7

0800124c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800125c:	231f      	movs	r3, #31
 800125e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	e063      	b.n	8001338 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001270:	bf00      	nop
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	613a      	str	r2, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <HAL_CRCEx_Polynomial_Set+0x44>
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b18      	cmp	r3, #24
 8001294:	d846      	bhi.n	8001324 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	0800132b 	.word	0x0800132b
 80012a0:	08001325 	.word	0x08001325
 80012a4:	08001325 	.word	0x08001325
 80012a8:	08001325 	.word	0x08001325
 80012ac:	08001325 	.word	0x08001325
 80012b0:	08001325 	.word	0x08001325
 80012b4:	08001325 	.word	0x08001325
 80012b8:	08001325 	.word	0x08001325
 80012bc:	08001319 	.word	0x08001319
 80012c0:	08001325 	.word	0x08001325
 80012c4:	08001325 	.word	0x08001325
 80012c8:	08001325 	.word	0x08001325
 80012cc:	08001325 	.word	0x08001325
 80012d0:	08001325 	.word	0x08001325
 80012d4:	08001325 	.word	0x08001325
 80012d8:	08001325 	.word	0x08001325
 80012dc:	0800130d 	.word	0x0800130d
 80012e0:	08001325 	.word	0x08001325
 80012e4:	08001325 	.word	0x08001325
 80012e8:	08001325 	.word	0x08001325
 80012ec:	08001325 	.word	0x08001325
 80012f0:	08001325 	.word	0x08001325
 80012f4:	08001325 	.word	0x08001325
 80012f8:	08001325 	.word	0x08001325
 80012fc:	08001301 	.word	0x08001301
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	2b06      	cmp	r3, #6
 8001304:	d913      	bls.n	800132e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800130a:	e010      	b.n	800132e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b07      	cmp	r3, #7
 8001310:	d90f      	bls.n	8001332 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001316:	e00c      	b.n	8001332 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	d90b      	bls.n	8001336 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001322:	e008      	b.n	8001336 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	75fb      	strb	r3, [r7, #23]
        break;
 8001328:	e006      	b.n	8001338 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800132a:	bf00      	nop
 800132c:	e004      	b.n	8001338 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800132e:	bf00      	nop
 8001330:	e002      	b.n	8001338 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001332:	bf00      	nop
 8001334:	e000      	b.n	8001338 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001336:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10d      	bne.n	800135a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f023 0118 	bic.w	r1, r3, #24
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	430a      	orrs	r2, r1
 8001358:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800135a:	7dfb      	ldrb	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e147      	b.n	800160a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff f838 	bl	8000404 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0210 	bic.w	r2, r2, #16
 80013a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a4:	f7ff fdd2 	bl	8000f4c <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013aa:	e012      	b.n	80013d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013ac:	f7ff fdce 	bl	8000f4c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b0a      	cmp	r3, #10
 80013b8:	d90b      	bls.n	80013d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e11b      	b.n	800160a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d0e5      	beq.n	80013ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f0:	f7ff fdac 	bl	8000f4c <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013f6:	e012      	b.n	800141e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013f8:	f7ff fda8 	bl	8000f4c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d90b      	bls.n	800141e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0f5      	b.n	800160a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e5      	beq.n	80013f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699a      	ldr	r2, [r3, #24]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0202 	orr.w	r2, r2, #2
 800143a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a74      	ldr	r2, [pc, #464]	; (8001614 <HAL_FDCAN_Init+0x2ac>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d103      	bne.n	800144e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001446:	4a74      	ldr	r2, [pc, #464]	; (8001618 <HAL_FDCAN_Init+0x2b0>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7c1b      	ldrb	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d108      	bne.n	8001468 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001464:	619a      	str	r2, [r3, #24]
 8001466:	e007      	b.n	8001478 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001476:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7c5b      	ldrb	r3, [r3, #17]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d108      	bne.n	8001492 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	e007      	b.n	80014a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699a      	ldr	r2, [r3, #24]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7c9b      	ldrb	r3, [r3, #18]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d108      	bne.n	80014bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699a      	ldr	r2, [r3, #24]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014b8:	619a      	str	r2, [r3, #24]
 80014ba:	e007      	b.n	80014cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80014f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0210 	bic.w	r2, r2, #16
 8001500:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0204 	orr.w	r2, r2, #4
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	e02c      	b.n	8001576 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d028      	beq.n	8001576 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d01c      	beq.n	8001566 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800153a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0210 	orr.w	r2, r2, #16
 800154a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d110      	bne.n	8001576 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0220 	orr.w	r2, r2, #32
 8001562:	619a      	str	r2, [r3, #24]
 8001564:	e007      	b.n	8001576 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0220 	orr.w	r2, r2, #32
 8001574:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	3b01      	subs	r3, #1
 800157c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	3b01      	subs	r3, #1
 8001584:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001586:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800158e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	3b01      	subs	r3, #1
 8001598:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800159e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015aa:	d115      	bne.n	80015d8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	3b01      	subs	r3, #1
 80015b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	3b01      	subs	r3, #1
 80015c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	3b01      	subs	r3, #1
 80015ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015d6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f814 	bl	800161c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40006400 	.word	0x40006400
 8001618:	40006500 	.word	0x40006500

0800161c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001626:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001638:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2c      	ldr	r2, [pc, #176]	; (80016f0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d103      	bne.n	800164c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800164a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800165a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001662:	041a      	lsls	r2, r3, #16
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001680:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001688:	061a      	lsls	r2, r3, #24
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e005      	b.n	80016ce <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3304      	adds	r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3f3      	bcc.n	80016c2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	4000a400 	.word	0x4000a400
 80016ec:	40006800 	.word	0x40006800
 80016f0:	40006c00 	.word	0x40006c00

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001702:	e15a      	b.n	80019ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 814c 	beq.w	80019b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d005      	beq.n	8001734 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001730:	2b02      	cmp	r3, #2
 8001732:	d130      	bne.n	8001796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 0201 	and.w	r2, r3, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d017      	beq.n	80017d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d123      	bne.n	8001826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	6939      	ldr	r1, [r7, #16]
 8001822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0203 	and.w	r2, r3, #3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80a6 	beq.w	80019b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	4b5b      	ldr	r3, [pc, #364]	; (80019d8 <HAL_GPIO_Init+0x2e4>)
 800186a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186c:	4a5a      	ldr	r2, [pc, #360]	; (80019d8 <HAL_GPIO_Init+0x2e4>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6613      	str	r3, [r2, #96]	; 0x60
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <HAL_GPIO_Init+0x2e4>)
 8001876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001880:	4a56      	ldr	r2, [pc, #344]	; (80019dc <HAL_GPIO_Init+0x2e8>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018aa:	d01f      	beq.n	80018ec <HAL_GPIO_Init+0x1f8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_GPIO_Init+0x2ec>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d019      	beq.n	80018e8 <HAL_GPIO_Init+0x1f4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <HAL_GPIO_Init+0x2f0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_GPIO_Init+0x1f0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a4a      	ldr	r2, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x2f4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00d      	beq.n	80018e0 <HAL_GPIO_Init+0x1ec>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_GPIO_Init+0x2f8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x1e8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <HAL_GPIO_Init+0x2fc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018d4:	2305      	movs	r3, #5
 80018d6:	e00a      	b.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018d8:	2306      	movs	r3, #6
 80018da:	e008      	b.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018dc:	2304      	movs	r3, #4
 80018de:	e006      	b.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018e0:	2303      	movs	r3, #3
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018ec:	2300      	movs	r3, #0
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fe:	4937      	ldr	r1, [pc, #220]	; (80019dc <HAL_GPIO_Init+0x2e8>)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_GPIO_Init+0x300>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001930:	4a30      	ldr	r2, [pc, #192]	; (80019f4 <HAL_GPIO_Init+0x300>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_GPIO_Init+0x300>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800195a:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_GPIO_Init+0x300>)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_GPIO_Init+0x300>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_GPIO_Init+0x300>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_GPIO_Init+0x300>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_GPIO_Init+0x300>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f47f ae9d 	bne.w	8001704 <HAL_GPIO_Init+0x10>
  }
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	48000800 	.word	0x48000800
 80019e8:	48000c00 	.word	0x48000c00
 80019ec:	48001000 	.word	0x48001000
 80019f0:	48001400 	.word	0x48001400
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a14:	e002      	b.n	8001a1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e08d      	b.n	8001b56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe feda 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e006      	b.n	8001ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d108      	bne.n	8001aca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	e007      	b.n	8001ada <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69d9      	ldr	r1, [r3, #28]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d138      	bne.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e032      	b.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2224      	movs	r2, #36	; 0x24
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bb0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d139      	bne.n	8001c7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e033      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e041      	b.n	8001d22 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f245 5255 	movw	r2, #21845	; 0x5555
 8001cb0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6852      	ldr	r2, [r2, #4]
 8001cba:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6892      	ldr	r2, [r2, #8]
 8001cc4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001cc6:	f7ff f941 	bl	8000f4c <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001ccc:	e00f      	b.n	8001cee <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001cce:	f7ff f93d 	bl	8000f4c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b31      	cmp	r3, #49	; 0x31
 8001cda:	d908      	bls.n	8001cee <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e019      	b.n	8001d22 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e8      	bne.n	8001cce <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d005      	beq.n	8001d16 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68d2      	ldr	r2, [r2, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	e004      	b.n	8001d20 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0c0      	b.n	8001ebe <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f009 fcd3 	bl	800b6fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fdc0 	bl	80048e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e03e      	b.n	8001dec <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3311      	adds	r3, #17
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	3310      	adds	r3, #16
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	3313      	adds	r3, #19
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	3320      	adds	r3, #32
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3324      	adds	r3, #36	; 0x24
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	3301      	adds	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3bb      	bcc.n	8001d6e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e044      	b.n	8001e86 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	791b      	ldrb	r3, [r3, #4]
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d3b5      	bcc.n	8001dfc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e9c:	f002 fd3f 	bl	800491e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7a9b      	ldrb	r3, [r3, #10]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f001 fc41 	bl	800373e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_Start+0x16>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e012      	b.n	8001f02 <HAL_PCD_Start+0x3c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fce6 	bl	80048ba <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 ffa7 	bl	8006e46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 ffac 	bl	8006e74 <USB_ReadInterrupts>
 8001f1c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fb04 	bl	8002536 <PCD_EP_ISR_Handler>

    return;
 8001f2e:	e110      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4c:	b292      	uxth	r2, r2
 8001f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f009 fc63 	bl	800b81e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8fc 	bl	8002158 <HAL_PCD_SetAddress>

    return;
 8001f60:	e0f7      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00c      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f84:	e0e5      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00c      	beq.n	8001faa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fa8:	e0d3      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d034      	beq.n	800201e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0208 	bic.w	r2, r2, #8
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f009 fe03 	bl	800bc04 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f009 fc46 	bl	800b890 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002016:	b292      	uxth	r2, r2
 8002018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800201c:	e099      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002024:	2b00      	cmp	r3, #0
 8002026:	d027      	beq.n	8002078 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	b292      	uxth	r2, r2
 800203c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002052:	b292      	uxth	r2, r2
 8002054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0204 	orr.w	r2, r2, #4
 800206a:	b292      	uxth	r2, r2
 800206c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f009 fbf3 	bl	800b85c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002076:	e06c      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d040      	beq.n	8002104 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002094:	b292      	uxth	r2, r2
 8002096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d12b      	bne.n	80020fc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0204 	orr.w	r2, r2, #4
 80020b6:	b292      	uxth	r2, r2
 80020b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0208 	orr.w	r2, r2, #8
 80020ce:	b292      	uxth	r2, r2
 80020d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020f2:	2101      	movs	r1, #1
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f009 fd85 	bl	800bc04 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80020fa:	e02a      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f009 fbad 	bl	800b85c <HAL_PCD_SuspendCallback>
    return;
 8002102:	e026      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00f      	beq.n	800212e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002120:	b292      	uxth	r2, r2
 8002122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f009 fb6b 	bl	800b802 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800212c:	e011      	b.n	8002152 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800214a:	b292      	uxth	r2, r2
 800214c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002150:	bf00      	nop
  }
}
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_PCD_SetAddress+0x1a>
 800216e:	2302      	movs	r3, #2
 8002170:	e012      	b.n	8002198 <HAL_PCD_SetAddress+0x40>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f004 fe48 	bl	8006e1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	460b      	mov	r3, r1
 80021b4:	803b      	strh	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da0e      	bge.n	80021e4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 0207 	and.w	r2, r3, #7
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	3310      	adds	r3, #16
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	705a      	strb	r2, [r3, #1]
 80021e2:	e00e      	b.n	8002202 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	f003 0207 	and.w	r2, r3, #7
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	b2da      	uxtb	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800220e:	883a      	ldrh	r2, [r7, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	78ba      	ldrb	r2, [r7, #2]
 8002218:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800221a:	78bb      	ldrb	r3, [r7, #2]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d102      	bne.n	8002226 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_PCD_EP_Open+0x94>
 8002230:	2302      	movs	r3, #2
 8002232:	e00e      	b.n	8002252 <HAL_PCD_EP_Open+0xb2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68f9      	ldr	r1, [r7, #12]
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fb8a 	bl	800495c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002250:	7afb      	ldrb	r3, [r7, #11]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800226a:	2b00      	cmp	r3, #0
 800226c:	da0e      	bge.n	800228c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 0207 	and.w	r2, r3, #7
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	3310      	adds	r3, #16
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	705a      	strb	r2, [r3, #1]
 800228a:	e00e      	b.n	80022aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 0207 	and.w	r2, r3, #7
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_PCD_EP_Close+0x6a>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e00e      	b.n	80022e2 <HAL_PCD_EP_Close+0x88>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 ff06 	bl	80050e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	460b      	mov	r3, r1
 80022f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	f003 0207 	and.w	r2, r3, #7
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2200      	movs	r2, #0
 8002328:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	b2da      	uxtb	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6979      	ldr	r1, [r7, #20]
 800233c:	4618      	mov	r0, r3
 800233e:	f003 f8be 	bl	80054be <USB_EPStartXfer>

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 0207 	and.w	r2, r3, #7
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	460b      	mov	r3, r1
 800238a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	f003 0207 	and.w	r2, r3, #7
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	3310      	adds	r3, #16
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2201      	movs	r2, #1
 80023c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6979      	ldr	r1, [r7, #20]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f86f 	bl	80054be <USB_EPStartXfer>

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7912      	ldrb	r2, [r2, #4]
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e03e      	b.n	8002486 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da0e      	bge.n	800242e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	3310      	adds	r3, #16
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	705a      	strb	r2, [r3, #1]
 800242c:	e00c      	b.n	8002448 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_PCD_EP_SetStall+0x7e>
 8002464:	2302      	movs	r3, #2
 8002466:	e00e      	b.n	8002486 <HAL_PCD_EP_SetStall+0x9c>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68f9      	ldr	r1, [r7, #12]
 8002476:	4618      	mov	r0, r3
 8002478:	f004 fbd2 	bl	8006c20 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	7912      	ldrb	r2, [r2, #4]
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e040      	b.n	800252e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da0e      	bge.n	80024d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 0207 	and.w	r2, r3, #7
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	3310      	adds	r3, #16
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	705a      	strb	r2, [r3, #1]
 80024d0:	e00e      	b.n	80024f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 0207 	and.w	r2, r3, #7
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_PCD_EP_ClrStall+0x82>
 800250c:	2302      	movs	r3, #2
 800250e:	e00e      	b.n	800252e <HAL_PCD_EP_ClrStall+0xa0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fbcf 	bl	8006cc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b096      	sub	sp, #88	; 0x58
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800253e:	e3ae      	b.n	8002c9e <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002548:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800254c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800255a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 8170 	bne.w	8002844 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002564:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d14d      	bne.n	800260c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800257c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002580:	81fb      	strh	r3, [r7, #14]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002590:	b29b      	uxth	r3, r3
 8002592:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3310      	adds	r3, #16
 8002598:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	441a      	add	r2, r3
 80025cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025d0:	2100      	movs	r1, #0
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f009 f8fb 	bl	800b7ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7b1b      	ldrb	r3, [r3, #12]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 835d 	beq.w	8002c9e <PCD_EP_ISR_Handler+0x768>
 80025e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 8358 	bne.w	8002c9e <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7b1b      	ldrb	r3, [r3, #12]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b292      	uxth	r2, r2
 8002600:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	731a      	strb	r2, [r3, #12]
 800260a:	e348      	b.n	8002c9e <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002612:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800261e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002626:	2b00      	cmp	r3, #0
 8002628:	d032      	beq.n	8002690 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	4413      	add	r3, r2
 8002644:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800264e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002650:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002664:	b29b      	uxth	r3, r3
 8002666:	f004 fc57 	bl	8006f18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29a      	uxth	r2, r3
 8002672:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002676:	4013      	ands	r3, r2
 8002678:	823b      	strh	r3, [r7, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	8a3a      	ldrh	r2, [r7, #16]
 8002680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002684:	b292      	uxth	r2, r2
 8002686:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f009 f873 	bl	800b774 <HAL_PCD_SetupStageCallback>
 800268e:	e306      	b.n	8002c9e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002690:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002694:	2b00      	cmp	r3, #0
 8002696:	f280 8302 	bge.w	8002c9e <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026a6:	4013      	ands	r3, r2
 80026a8:	83fb      	strh	r3, [r7, #30]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	8bfa      	ldrh	r2, [r7, #30]
 80026b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b4:	b292      	uxth	r2, r2
 80026b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d019      	beq.n	800271c <PCD_EP_ISR_Handler+0x1e6>
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d015      	beq.n	800271c <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f6:	6959      	ldr	r1, [r3, #20]
 80026f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002700:	b29b      	uxth	r3, r3
 8002702:	f004 fc09 	bl	8006f18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	441a      	add	r2, r3
 8002710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002712:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002714:	2100      	movs	r1, #0
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f009 f83e 	bl	800b798 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002726:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800272a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 82b5 	bne.w	8002c9e <PCD_EP_ISR_Handler+0x768>
 8002734:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002738:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800273c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002740:	f000 82ad 	beq.w	8002c9e <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276e:	b29a      	uxth	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b3e      	cmp	r3, #62	; 0x3e
 800277a:	d91d      	bls.n	80027b8 <PCD_EP_ISR_Handler+0x282>
 800277c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	647b      	str	r3, [r7, #68]	; 0x44
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <PCD_EP_ISR_Handler+0x260>
 8002790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002792:	3b01      	subs	r3, #1
 8002794:	647b      	str	r3, [r7, #68]	; 0x44
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29a      	uxth	r2, r3
 800279c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279e:	b29b      	uxth	r3, r3
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	e026      	b.n	8002806 <PCD_EP_ISR_Handler+0x2d0>
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <PCD_EP_ISR_Handler+0x2a0>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	e017      	b.n	8002806 <PCD_EP_ISR_Handler+0x2d0>
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <PCD_EP_ISR_Handler+0x2ba>
 80027ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ec:	3301      	adds	r3, #1
 80027ee:	647b      	str	r3, [r7, #68]	; 0x44
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b29a      	uxth	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	827b      	strh	r3, [r7, #18]
 8002818:	8a7b      	ldrh	r3, [r7, #18]
 800281a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800281e:	827b      	strh	r3, [r7, #18]
 8002820:	8a7b      	ldrh	r3, [r7, #18]
 8002822:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002826:	827b      	strh	r3, [r7, #18]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	8a7b      	ldrh	r3, [r7, #18]
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]
 8002842:	e22c      	b.n	8002c9e <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002858:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800285c:	2b00      	cmp	r3, #0
 800285e:	f280 80f6 	bge.w	8002a4e <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29a      	uxth	r2, r3
 8002874:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002878:	4013      	ands	r3, r2
 800287a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002894:	b292      	uxth	r2, r2
 8002896:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002898:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b0:	7b1b      	ldrb	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d123      	bne.n	80028fe <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 808e 	beq.w	8002a04 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	6959      	ldr	r1, [r3, #20]
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	88da      	ldrh	r2, [r3, #6]
 80028f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028f8:	f004 fb0e 	bl	8006f18 <USB_ReadPMA>
 80028fc:	e082      	b.n	8002a04 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002900:	78db      	ldrb	r3, [r3, #3]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d10a      	bne.n	800291c <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002906:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800290a:	461a      	mov	r2, r3
 800290c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9d3 	bl	8002cba <HAL_PCD_EP_DB_Receive>
 8002914:	4603      	mov	r3, r0
 8002916:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800291a:	e073      	b.n	8002a04 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800294c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800295c:	b29b      	uxth	r3, r3
 800295e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d022      	beq.n	80029c0 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4413      	add	r3, r2
 8002994:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800299e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02c      	beq.n	8002a04 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b0:	6959      	ldr	r1, [r3, #20]
 80029b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b4:	891a      	ldrh	r2, [r3, #8]
 80029b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029ba:	f004 faad 	bl	8006f18 <USB_ReadPMA>
 80029be:	e021      	b.n	8002a04 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	6959      	ldr	r1, [r3, #20]
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	895a      	ldrh	r2, [r3, #10]
 80029fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a00:	f004 fa8a 	bl	8006f18 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a0c:	441a      	add	r2, r3
 8002a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a1a:	441a      	add	r2, r3
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <PCD_EP_ISR_Handler+0x4fe>
 8002a28:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d206      	bcs.n	8002a42 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f008 feac 	bl	800b798 <HAL_PCD_DataOutStageCallback>
 8002a40:	e005      	b.n	8002a4e <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fd38 	bl	80054be <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8121 	beq.w	8002c9e <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a5c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	3310      	adds	r3, #16
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	441a      	add	r2, r3
 8002a9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 80a2 	bne.w	8002bfa <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abe:	7b1b      	ldrb	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8093 	beq.w	8002bec <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ac6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d046      	beq.n	8002b60 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d126      	bne.n	8002b28 <PCD_EP_ISR_Handler+0x5f2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	4413      	add	r3, r2
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	00da      	lsls	r2, r3, #3
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	4413      	add	r3, r2
 8002afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b00:	623b      	str	r3, [r7, #32]
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	e061      	b.n	8002bec <PCD_EP_ISR_Handler+0x6b6>
 8002b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d15d      	bne.n	8002bec <PCD_EP_ISR_Handler+0x6b6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	4413      	add	r3, r2
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	00da      	lsls	r2, r3, #3
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	4413      	add	r3, r2
 8002b52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e045      	b.n	8002bec <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d126      	bne.n	8002bbc <PCD_EP_ISR_Handler+0x686>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	4413      	add	r3, r2
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
 8002b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	00da      	lsls	r2, r3, #3
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8e:	4413      	add	r3, r2
 8002b90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	e017      	b.n	8002bec <PCD_EP_ISR_Handler+0x6b6>
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d113      	bne.n	8002bec <PCD_EP_ISR_Handler+0x6b6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd2:	4413      	add	r3, r2
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00da      	lsls	r2, r3, #3
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	4413      	add	r3, r2
 8002be0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f008 fdeb 	bl	800b7ce <HAL_PCD_DataInStageCallback>
 8002bf8:	e051      	b.n	8002c9e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d144      	bne.n	8002c90 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d907      	bls.n	8002c4a <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c46:	619a      	str	r2, [r3, #24]
 8002c48:	e002      	b.n	8002c50 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f008 fdb5 	bl	800b7ce <HAL_PCD_DataInStageCallback>
 8002c64:	e01b      	b.n	8002c9e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c6e:	441a      	add	r2, r3
 8002c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c72:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c7c:	441a      	add	r2, r3
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c80:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fc18 	bl	80054be <USB_EPStartXfer>
 8002c8e:	e006      	b.n	8002c9e <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c94:	461a      	mov	r2, r3
 8002c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f917 	bl	8002ecc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f6ff ac48 	blt.w	8002540 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3758      	adds	r7, #88	; 0x58
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b088      	sub	sp, #32
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d07c      	beq.n	8002dcc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	8b7b      	ldrh	r3, [r7, #26]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d306      	bcc.n	8002d10 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	8b7b      	ldrh	r3, [r7, #26]
 8002d08:	1ad2      	subs	r2, r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	619a      	str	r2, [r3, #24]
 8002d0e:	e002      	b.n	8002d16 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d123      	bne.n	8002d66 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	833b      	strh	r3, [r7, #24]
 8002d3a:	8b3b      	ldrh	r3, [r7, #24]
 8002d3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d40:	833b      	strh	r3, [r7, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	8b3b      	ldrh	r3, [r7, #24]
 8002d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01f      	beq.n	8002db0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	82fb      	strh	r3, [r7, #22]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	8afb      	ldrh	r3, [r7, #22]
 8002d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002db0:	8b7b      	ldrh	r3, [r7, #26]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8085 	beq.w	8002ec2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6959      	ldr	r1, [r3, #20]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	891a      	ldrh	r2, [r3, #8]
 8002dc4:	8b7b      	ldrh	r3, [r7, #26]
 8002dc6:	f004 f8a7 	bl	8006f18 <USB_ReadPMA>
 8002dca:	e07a      	b.n	8002ec2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d306      	bcc.n	8002e0a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	8b7b      	ldrh	r3, [r7, #26]
 8002e02:	1ad2      	subs	r2, r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	619a      	str	r2, [r3, #24]
 8002e08:	e002      	b.n	8002e10 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d123      	bne.n	8002e60 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	83fb      	strh	r3, [r7, #30]
 8002e34:	8bfb      	ldrh	r3, [r7, #30]
 8002e36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e3a:	83fb      	strh	r3, [r7, #30]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	8bfb      	ldrh	r3, [r7, #30]
 8002e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11f      	bne.n	8002eaa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e84:	83bb      	strh	r3, [r7, #28]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	441a      	add	r2, r3
 8002e94:	8bbb      	ldrh	r3, [r7, #28]
 8002e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002eaa:	8b7b      	ldrh	r3, [r7, #26]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	6959      	ldr	r1, [r3, #20]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	895a      	ldrh	r2, [r3, #10]
 8002ebc:	8b7b      	ldrh	r3, [r7, #26]
 8002ebe:	f004 f82b 	bl	8006f18 <USB_ReadPMA>
    }
  }

  return count;
 8002ec2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0a4      	sub	sp, #144	; 0x90
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 81db 	beq.w	800329c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d907      	bls.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	619a      	str	r2, [r3, #24]
 8002f28:	e002      	b.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 80b9 	bne.w	80030ac <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d126      	bne.n	8002f90 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	4413      	add	r3, r2
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	00da      	lsls	r2, r3, #3
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	4413      	add	r3, r2
 8002f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	801a      	strh	r2, [r3, #0]
 8002f8e:	e01a      	b.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d116      	bne.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	4413      	add	r3, r2
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	00da      	lsls	r2, r3, #3
 8002fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb8:	4413      	add	r3, r2
 8002fba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d126      	bne.n	8003022 <HAL_PCD_EP_DB_Transmit+0x156>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	00da      	lsls	r2, r3, #3
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003006:	b29a      	uxth	r2, r3
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301a:	b29a      	uxth	r2, r3
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	e017      	b.n	8003052 <HAL_PCD_EP_DB_Transmit+0x186>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d113      	bne.n	8003052 <HAL_PCD_EP_DB_Transmit+0x186>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	4413      	add	r3, r2
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	00da      	lsls	r2, r3, #3
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	4413      	add	r3, r2
 8003046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800304a:	623b      	str	r3, [r7, #32]
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2200      	movs	r2, #0
 8003050:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f008 fbb8 	bl	800b7ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 82fa 	beq.w	800365e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003084:	82fb      	strh	r3, [r7, #22]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	441a      	add	r2, r3
 8003094:	8afb      	ldrh	r3, [r7, #22]
 8003096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]
 80030aa:	e2d8      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d021      	beq.n	80030fa <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 82ac 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800310e:	441a      	add	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800311c:	441a      	add	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	429a      	cmp	r2, r3
 800312c:	d30b      	bcc.n	8003146 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	621a      	str	r2, [r3, #32]
 8003144:	e017      	b.n	8003176 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800314e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800315e:	e00a      	b.n	8003176 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d165      	bne.n	800324a <HAL_PCD_EP_DB_Transmit+0x37e>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003192:	4413      	add	r3, r2
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	00da      	lsls	r2, r3, #3
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	4413      	add	r3, r2
 80031a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ba:	2b3e      	cmp	r3, #62	; 0x3e
 80031bc:	d91d      	bls.n	80031fa <HAL_PCD_EP_DB_Transmit+0x32e>
 80031be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80031d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d4:	3b01      	subs	r3, #1
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	029b      	lsls	r3, r3, #10
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	4313      	orrs	r3, r2
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	e044      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003210:	b29a      	uxth	r2, r3
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	801a      	strh	r2, [r3, #0]
 8003216:	e035      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_PCD_EP_DB_Transmit+0x366>
 800322c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322e:	3301      	adds	r3, #1
 8003230:	64bb      	str	r3, [r7, #72]	; 0x48
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29a      	uxth	r2, r3
 8003238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323a:	b29b      	uxth	r3, r3
 800323c:	029b      	lsls	r3, r3, #10
 800323e:	b29b      	uxth	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b29a      	uxth	r2, r3
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	e01c      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	785b      	ldrb	r3, [r3, #1]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d118      	bne.n	8003284 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	647b      	str	r3, [r7, #68]	; 0x44
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003260:	b29b      	uxth	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003266:	4413      	add	r3, r2
 8003268:	647b      	str	r3, [r7, #68]	; 0x44
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	00da      	lsls	r2, r3, #3
 8003270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003272:	4413      	add	r3, r2
 8003274:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003278:	643b      	str	r3, [r7, #64]	; 0x40
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327e:	b29a      	uxth	r2, r3
 8003280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003282:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6959      	ldr	r1, [r3, #20]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	891a      	ldrh	r2, [r3, #8]
 8003290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003294:	b29b      	uxth	r3, r3
 8003296:	f003 fdfd 	bl	8006e94 <USB_WritePMA>
 800329a:	e1e0      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d307      	bcc.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032d8:	1ad2      	subs	r2, r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	619a      	str	r2, [r3, #24]
 80032de:	e002      	b.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 80c0 	bne.w	8003470 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d126      	bne.n	8003346 <HAL_PCD_EP_DB_Transmit+0x47a>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800330c:	4413      	add	r3, r2
 800330e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	00da      	lsls	r2, r3, #3
 8003316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003318:	4413      	add	r3, r2
 800331a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800331e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332a:	b29a      	uxth	r2, r3
 800332c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800332e:	801a      	strh	r2, [r3, #0]
 8003330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29a      	uxth	r2, r3
 8003340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	e01a      	b.n	800337c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d116      	bne.n	800337c <HAL_PCD_EP_DB_Transmit+0x4b0>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	667b      	str	r3, [r7, #100]	; 0x64
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003362:	4413      	add	r3, r2
 8003364:	667b      	str	r3, [r7, #100]	; 0x64
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	00da      	lsls	r2, r3, #3
 800336c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800336e:	4413      	add	r3, r2
 8003370:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003374:	663b      	str	r3, [r7, #96]	; 0x60
 8003376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003378:	2200      	movs	r2, #0
 800337a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	677b      	str	r3, [r7, #116]	; 0x74
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d12b      	bne.n	80033e2 <HAL_PCD_EP_DB_Transmit+0x516>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003398:	b29b      	uxth	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339e:	4413      	add	r3, r2
 80033a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	00da      	lsls	r2, r3, #3
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	4413      	add	r3, r2
 80033ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d8:	b29a      	uxth	r2, r3
 80033da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033de:	801a      	strh	r2, [r3, #0]
 80033e0:	e017      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x546>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d113      	bne.n	8003412 <HAL_PCD_EP_DB_Transmit+0x546>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f8:	4413      	add	r3, r2
 80033fa:	677b      	str	r3, [r7, #116]	; 0x74
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	00da      	lsls	r2, r3, #3
 8003402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003404:	4413      	add	r3, r2
 8003406:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800340a:	673b      	str	r3, [r7, #112]	; 0x70
 800340c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340e:	2200      	movs	r2, #0
 8003410:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f008 f9d8 	bl	800b7ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 811a 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003444:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
 800346e:	e0f6      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d121      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003494:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	f040 80ca 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034d2:	441a      	add	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034e0:	441a      	add	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d30b      	bcc.n	800350a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6a1a      	ldr	r2, [r3, #32]
 80034fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003502:	1ad2      	subs	r2, r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	621a      	str	r2, [r3, #32]
 8003508:	e017      	b.n	800353a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003512:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003522:	e00a      	b.n	800353a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2200      	movs	r2, #0
 8003530:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	657b      	str	r3, [r7, #84]	; 0x54
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d165      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0x748>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	4413      	add	r3, r2
 800355e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	00da      	lsls	r2, r3, #3
 8003566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003568:	4413      	add	r3, r2
 800356a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800356e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357a:	b29a      	uxth	r2, r3
 800357c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003584:	2b3e      	cmp	r3, #62	; 0x3e
 8003586:	d91d      	bls.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800359c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800359e:	3b01      	subs	r3, #1
 80035a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	029b      	lsls	r3, r3, #10
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035bc:	b29a      	uxth	r2, r3
 80035be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	e041      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x77c>
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x716>
 80035cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	e032      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x77c>
 80035e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80035ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_PCD_EP_DB_Transmit+0x730>
 80035f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f8:	3301      	adds	r3, #1
 80035fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80035fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29a      	uxth	r2, r3
 8003602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003604:	b29b      	uxth	r3, r3
 8003606:	029b      	lsls	r3, r3, #10
 8003608:	b29b      	uxth	r3, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	b29a      	uxth	r2, r3
 800360e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	e019      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d115      	bne.n	8003648 <HAL_PCD_EP_DB_Transmit+0x77c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	4413      	add	r3, r2
 800362c:	657b      	str	r3, [r7, #84]	; 0x54
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	00da      	lsls	r2, r3, #3
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	4413      	add	r3, r2
 8003638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800363c:	653b      	str	r3, [r7, #80]	; 0x50
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003642:	b29a      	uxth	r2, r3
 8003644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003646:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6959      	ldr	r1, [r3, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	895a      	ldrh	r2, [r3, #10]
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003658:	b29b      	uxth	r3, r3
 800365a:	f003 fc1b 	bl	8006e94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003678:	82bb      	strh	r3, [r7, #20]
 800367a:	8abb      	ldrh	r3, [r7, #20]
 800367c:	f083 0310 	eor.w	r3, r3, #16
 8003680:	82bb      	strh	r3, [r7, #20]
 8003682:	8abb      	ldrh	r3, [r7, #20]
 8003684:	f083 0320 	eor.w	r3, r3, #32
 8003688:	82bb      	strh	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	441a      	add	r2, r3
 8003698:	8abb      	ldrh	r3, [r7, #20]
 800369a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3790      	adds	r7, #144	; 0x90
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	817b      	strh	r3, [r7, #10]
 80036c6:	4613      	mov	r3, r2
 80036c8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	f003 0207 	and.w	r2, r3, #7
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3310      	adds	r3, #16
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e009      	b.n	8003702 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036ee:	897a      	ldrh	r2, [r7, #10]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003702:	893b      	ldrh	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d107      	bne.n	8003718 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	b29a      	uxth	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	80da      	strh	r2, [r3, #6]
 8003716:	e00b      	b.n	8003730 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2201      	movs	r2, #1
 800371c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	b29a      	uxth	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	b29a      	uxth	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003762:	b29b      	uxth	r3, r3
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003776:	b29b      	uxth	r3, r3
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d141      	bne.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037a2:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d131      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037b0:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b6:	4a46      	ldr	r2, [pc, #280]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c8:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037d0:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2232      	movs	r2, #50	; 0x32
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	0c9b      	lsrs	r3, r3, #18
 80037e2:	3301      	adds	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e6:	e002      	b.n	80037ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ee:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d102      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f2      	bne.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d158      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e057      	b.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003824:	e04d      	b.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d141      	bne.n	80038b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800382e:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d131      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	4a23      	ldr	r2, [pc, #140]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800384c:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2232      	movs	r2, #50	; 0x32
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	0c9b      	lsrs	r3, r3, #18
 800386e:	3301      	adds	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003872:	e002      	b.n	800387a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	d102      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f2      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d112      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e011      	b.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038b0:	e007      	b.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40007000 	.word	0x40007000
 80038d4:	20000000 	.word	0x20000000
 80038d8:	431bde83 	.word	0x431bde83

080038dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e2fe      	b.n	8003eec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d075      	beq.n	80039e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fa:	4b97      	ldr	r3, [pc, #604]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003904:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b0c      	cmp	r3, #12
 8003912:	d102      	bne.n	800391a <HAL_RCC_OscConfig+0x3e>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d002      	beq.n	8003920 <HAL_RCC_OscConfig+0x44>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d10b      	bne.n	8003938 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	4b8d      	ldr	r3, [pc, #564]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05b      	beq.n	80039e4 <HAL_RCC_OscConfig+0x108>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d157      	bne.n	80039e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e2d9      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d106      	bne.n	8003950 <HAL_RCC_OscConfig+0x74>
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a84      	ldr	r2, [pc, #528]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01d      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x98>
 800395a:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7e      	ldr	r2, [pc, #504]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7b      	ldr	r2, [pc, #492]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003974:	4b78      	ldr	r3, [pc, #480]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a77      	ldr	r2, [pc, #476]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b75      	ldr	r3, [pc, #468]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a74      	ldr	r2, [pc, #464]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fd fada 	bl	8000f4c <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fd fad6 	bl	8000f4c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e29e      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0xc0>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd fac6 	bl	8000f4c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fd fac2 	bl	8000f4c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e28a      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d6:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0xe8>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d075      	beq.n	8003ade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fc:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_OscConfig+0x136>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d002      	beq.n	8003a18 <HAL_RCC_OscConfig+0x13c>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d11f      	bne.n	8003a58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a18:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_OscConfig+0x154>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e25d      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	061b      	lsls	r3, r3, #24
 8003a3e:	4946      	ldr	r1, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a44:	4b45      	ldr	r3, [pc, #276]	; (8003b5c <HAL_RCC_OscConfig+0x280>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd fa33 	bl	8000eb4 <HAL_InitTick>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d043      	beq.n	8003adc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e249      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d023      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a60:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a3c      	ldr	r2, [pc, #240]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fa6e 	bl	8000f4c <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd fa6a 	bl	8000f4c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e232      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a86:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	492d      	ldr	r1, [pc, #180]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
 8003aa6:	e01a      	b.n	8003ade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fa4a 	bl	8000f4c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abc:	f7fd fa46 	bl	8000f4c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e20e      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x1e0>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d041      	beq.n	8003b6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01c      	beq.n	8003b2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fd fa23 	bl	8000f4c <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0a:	f7fd fa1f 	bl	8000f4c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1e7      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ef      	beq.n	8003b0a <HAL_RCC_OscConfig+0x22e>
 8003b2a:	e020      	b.n	8003b6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fa06 	bl	8000f4c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b42:	e00d      	b.n	8003b60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fd fa02 	bl	8000f4c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d906      	bls.n	8003b60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1ca      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b60:	4b8c      	ldr	r3, [pc, #560]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ea      	bne.n	8003b44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80a6 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2b4>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x2b6>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	4a7e      	ldr	r2, [pc, #504]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba2:	4b7c      	ldr	r3, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb2:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCC_OscConfig+0x4bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <HAL_RCC_OscConfig+0x4bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a75      	ldr	r2, [pc, #468]	; (8003d98 <HAL_RCC_OscConfig+0x4bc>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fd f9bf 	bl	8000f4c <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd f9bb 	bl	8000f4c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e183      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be4:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <HAL_RCC_OscConfig+0x4bc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d108      	bne.n	8003c0a <HAL_RCC_OscConfig+0x32e>
 8003bf8:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	4a65      	ldr	r2, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c08:	e024      	b.n	8003c54 <HAL_RCC_OscConfig+0x378>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d110      	bne.n	8003c34 <HAL_RCC_OscConfig+0x358>
 8003c12:	4b60      	ldr	r3, [pc, #384]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	4a5e      	ldr	r2, [pc, #376]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c22:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	4a5a      	ldr	r2, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c32:	e00f      	b.n	8003c54 <HAL_RCC_OscConfig+0x378>
 8003c34:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fd f976 	bl	8000f4c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fd f972 	bl	8000f4c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e138      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7a:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ed      	beq.n	8003c64 <HAL_RCC_OscConfig+0x388>
 8003c88:	e015      	b.n	8003cb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fd f95f 	bl	8000f4c <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd f95b 	bl	8000f4c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e121      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca8:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ed      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbc:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	4a34      	ldr	r2, [pc, #208]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03c      	beq.n	8003d4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cdc:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce2:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fd f92e 	bl	8000f4c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf4:	f7fd f92a 	bl	8000f4c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0f2      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d06:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x418>
 8003d14:	e01b      	b.n	8003d4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d16:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fd f911 	bl	8000f4c <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d2e:	f7fd f90d 	bl	8000f4c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e0d5      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ef      	bne.n	8003d2e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80c9 	beq.w	8003eea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	f000 8083 	beq.w	8003e6c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d15e      	bne.n	8003e2c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <HAL_RCC_OscConfig+0x4b8>)
 8003d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fd f8e7 	bl	8000f4c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	e00c      	b.n	8003d9c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fd f8e3 	bl	8000f4c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d905      	bls.n	8003d9c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0ab      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9c:	4b55      	ldr	r3, [pc, #340]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ec      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da8:	4b52      	ldr	r3, [pc, #328]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	4b52      	ldr	r3, [pc, #328]	; (8003ef8 <HAL_RCC_OscConfig+0x61c>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6a11      	ldr	r1, [r2, #32]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db8:	3a01      	subs	r2, #1
 8003dba:	0112      	lsls	r2, r2, #4
 8003dbc:	4311      	orrs	r1, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003dc2:	0212      	lsls	r2, r2, #8
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dca:	0852      	lsrs	r2, r2, #1
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	0552      	lsls	r2, r2, #21
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dd6:	0852      	lsrs	r2, r2, #1
 8003dd8:	3a01      	subs	r2, #1
 8003dda:	0652      	lsls	r2, r2, #25
 8003ddc:	4311      	orrs	r1, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003de2:	06d2      	lsls	r2, r2, #27
 8003de4:	430a      	orrs	r2, r1
 8003de6:	4943      	ldr	r1, [pc, #268]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a40      	ldr	r2, [pc, #256]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df8:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a3d      	ldr	r2, [pc, #244]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd f8a2 	bl	8000f4c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd f89e 	bl	8000f4c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e066      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1e:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x530>
 8003e2a:	e05e      	b.n	8003eea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a30      	ldr	r2, [pc, #192]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd f888 	bl	8000f4c <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd f884 	bl	8000f4c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e04c      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e52:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e5e:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_RCC_OscConfig+0x620>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	60cb      	str	r3, [r1, #12]
 8003e6a:	e03e      	b.n	8003eea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e039      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_RCC_OscConfig+0x618>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f003 0203 	and.w	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d12c      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	3b01      	subs	r3, #1
 8003e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d123      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d11b      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d113      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	019f800c 	.word	0x019f800c
 8003efc:	feeefffc 	.word	0xfeeefffc

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e11e      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f18:	4b91      	ldr	r3, [pc, #580]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d910      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b8e      	ldr	r3, [pc, #568]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 020f 	bic.w	r2, r3, #15
 8003f2e:	498c      	ldr	r1, [pc, #560]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b8a      	ldr	r3, [pc, #552]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e106      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d073      	beq.n	800403c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d129      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5c:	4b81      	ldr	r3, [pc, #516]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0f4      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f6c:	f000 f966 	bl	800423c <RCC_GetSysClockFreqFromPLLSource>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4a7c      	ldr	r2, [pc, #496]	; (8004168 <HAL_RCC_ClockConfig+0x268>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d93f      	bls.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f7a:	4b7a      	ldr	r3, [pc, #488]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d033      	beq.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12f      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f9a:	4b72      	ldr	r3, [pc, #456]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa2:	4a70      	ldr	r2, [pc, #448]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e024      	b.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0c6      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc8:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0be      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fd8:	f000 f8ce 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4a61      	ldr	r2, [pc, #388]	; (8004168 <HAL_RCC_ClockConfig+0x268>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d909      	bls.n	8003ffa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fee:	4a5d      	ldr	r2, [pc, #372]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4957      	ldr	r1, [pc, #348]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400c:	f7fc ff9e 	bl	8000f4c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fc ff9a 	bl	8000f4c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e095      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800405a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800405e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800406c:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004074:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800407a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4936      	ldr	r1, [pc, #216]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
 800408e:	e008      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b80      	cmp	r3, #128	; 0x80
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4a32      	ldr	r2, [pc, #200]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 800409c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a2:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d21d      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b0:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 020f 	bic.w	r2, r3, #15
 80040b8:	4929      	ldr	r1, [pc, #164]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040c0:	f7fc ff44 	bl	8000f4c <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fc ff40 	bl	8000f4c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e03b      	b.n	8004156 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_RCC_ClockConfig+0x260>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1ed      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4917      	ldr	r1, [pc, #92]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490f      	ldr	r1, [pc, #60]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800412a:	f000 f825 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCC_ClockConfig+0x264>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490c      	ldr	r1, [pc, #48]	; (800416c <HAL_RCC_ClockConfig+0x26c>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	fa22 f303 	lsr.w	r3, r2, r3
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x270>)
 8004148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x274>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc feb0 	bl	8000eb4 <HAL_InitTick>
 8004154:	4603      	mov	r3, r0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
 8004168:	04c4b400 	.word	0x04c4b400
 800416c:	0800bf80 	.word	0x0800bf80
 8004170:	20000000 	.word	0x20000000
 8004174:	20000004 	.word	0x20000004

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b04      	cmp	r3, #4
 8004188:	d102      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800418a:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <HAL_RCC_GetSysClockFreq+0xbc>)
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	e047      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d102      	bne.n	80041a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_RCC_GetSysClockFreq+0xc0>)
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e03e      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041a2:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d136      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	3301      	adds	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d10c      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d6:	68d2      	ldr	r2, [r2, #12]
 80041d8:	0a12      	lsrs	r2, r2, #8
 80041da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	617b      	str	r3, [r7, #20]
      break;
 80041e4:	e00c      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f0:	68d2      	ldr	r2, [r2, #12]
 80041f2:	0a12      	lsrs	r2, r2, #8
 80041f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
      break;
 80041fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0e5b      	lsrs	r3, r3, #25
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	3301      	adds	r3, #1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e001      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004220:	693b      	ldr	r3, [r7, #16]
}
 8004222:	4618      	mov	r0, r3
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	00f42400 	.word	0x00f42400
 8004238:	02dc6c00 	.word	0x02dc6c00

0800423c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d10c      	bne.n	800427a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004260:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800426a:	68d2      	ldr	r2, [r2, #12]
 800426c:	0a12      	lsrs	r2, r2, #8
 800426e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
    break;
 8004278:	e00c      	b.n	8004294 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	0a12      	lsrs	r2, r2, #8
 8004288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
    break;
 8004292:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0e5b      	lsrs	r3, r3, #25
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042ae:	687b      	ldr	r3, [r7, #4]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40021000 	.word	0x40021000
 80042c0:	02dc6c00 	.word	0x02dc6c00
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042d0:	2300      	movs	r3, #0
 80042d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d4:	2300      	movs	r3, #0
 80042d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8098 	beq.w	8004416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430e:	2301      	movs	r3, #1
 8004310:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004312:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a39      	ldr	r2, [pc, #228]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800431e:	f7fc fe15 	bl	8000f4c <HAL_GetTick>
 8004322:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004324:	e009      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fc fe11 	bl	8000f4c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d902      	bls.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	74fb      	strb	r3, [r7, #19]
        break;
 8004338:	e005      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ef      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d159      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800434c:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004356:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	d019      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fc fdd1 	bl	8000f4c <HAL_GetTick>
 80043aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ac:	e00b      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fc fdcd 	bl	8000f4c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d902      	bls.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	74fb      	strb	r3, [r7, #19]
            break;
 80043c4:	e006      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ec      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043f0:	e008      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043f2:	7cfb      	ldrb	r3, [r7, #19]
 80043f4:	74bb      	strb	r3, [r7, #18]
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004404:	7c7b      	ldrb	r3, [r7, #17]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4ba7      	ldr	r3, [pc, #668]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	4aa6      	ldr	r2, [pc, #664]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004422:	4ba1      	ldr	r3, [pc, #644]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 0203 	bic.w	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	499d      	ldr	r1, [pc, #628]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004444:	4b98      	ldr	r3, [pc, #608]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 020c 	bic.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4995      	ldr	r1, [pc, #596]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004466:	4b90      	ldr	r3, [pc, #576]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	498c      	ldr	r1, [pc, #560]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004488:	4b87      	ldr	r3, [pc, #540]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4984      	ldr	r1, [pc, #528]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044aa:	4b7f      	ldr	r3, [pc, #508]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	497b      	ldr	r1, [pc, #492]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044cc:	4b76      	ldr	r3, [pc, #472]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	4973      	ldr	r1, [pc, #460]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ee:	4b6e      	ldr	r3, [pc, #440]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	496a      	ldr	r1, [pc, #424]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004510:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4962      	ldr	r1, [pc, #392]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004532:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4959      	ldr	r1, [pc, #356]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004554:	4b54      	ldr	r3, [pc, #336]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800455a:	f023 0203 	bic.w	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	4951      	ldr	r1, [pc, #324]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004576:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4948      	ldr	r1, [pc, #288]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d015      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004598:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4940      	ldr	r1, [pc, #256]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b6:	d105      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b8:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	4932      	ldr	r1, [pc, #200]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ee:	d105      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f0:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a2c      	ldr	r2, [pc, #176]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d015      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004608:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	4924      	ldr	r1, [pc, #144]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004626:	d105      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004632:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	4916      	ldr	r1, [pc, #88]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800465e:	d105      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a10      	ldr	r2, [pc, #64]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d019      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4908      	ldr	r1, [pc, #32]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004696:	d109      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004698:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a02      	ldr	r2, [pc, #8]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a2:	60d3      	str	r3, [r2, #12]
 80046a4:	e002      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d015      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4926      	ldr	r1, [pc, #152]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d6:	d105      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d015      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	4918      	ldr	r1, [pc, #96]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470e:	d105      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a12      	ldr	r2, [pc, #72]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d015      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800472a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800472e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004736:	490a      	ldr	r1, [pc, #40]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004746:	d105      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800474e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004752:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004754:	7cbb      	ldrb	r3, [r7, #18]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000

08004764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e09d      	b.n	80048b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004786:	d009      	beq.n	800479c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	61da      	str	r2, [r3, #28]
 800478e:	e005      	b.n	800479c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fc fa0c 	bl	8000bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047dc:	d902      	bls.n	80047e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e002      	b.n	80047ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047f2:	d007      	beq.n	8004804 <HAL_SPI_Init+0xa0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	ea42 0103 	orr.w	r1, r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 0204 	and.w	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004880:	ea42 0103 	orr.w	r1, r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048ca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80048ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048f0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80048f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	b29b      	uxth	r3, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	b29b      	uxth	r3, r3
 8004906:	4013      	ands	r3, r2
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800495c:	b480      	push	{r7}
 800495e:	b09d      	sub	sp, #116	; 0x74
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	78db      	ldrb	r3, [r3, #3]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d81f      	bhi.n	80049ce <USB_ActivateEndpoint+0x72>
 800498e:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <USB_ActivateEndpoint+0x38>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049c1 	.word	0x080049c1
 800499c:	080049d7 	.word	0x080049d7
 80049a0:	080049b3 	.word	0x080049b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80049a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80049b0:	e012      	b.n	80049d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80049b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80049ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80049be:	e00b      	b.n	80049d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80049c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80049cc:	e004      	b.n	80049d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80049d4:	e000      	b.n	80049d8 <USB_ActivateEndpoint+0x7c>
      break;
 80049d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80049e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	b21b      	sxth	r3, r3
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	b21a      	sxth	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	7b1b      	ldrb	r3, [r3, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f040 8178 	bne.w	8004d3e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8084 	beq.w	8004b60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	4413      	add	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	00da      	lsls	r2, r3, #3
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	88db      	ldrh	r3, [r3, #6]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	827b      	strh	r3, [r7, #18]
 8004a9a:	8a7b      	ldrh	r3, [r7, #18]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <USB_ActivateEndpoint+0x180>
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	823b      	strh	r3, [r7, #16]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	8a3b      	ldrh	r3, [r7, #16]
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	78db      	ldrb	r3, [r3, #3]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d020      	beq.n	8004b26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afa:	81bb      	strh	r3, [r7, #12]
 8004afc:	89bb      	ldrh	r3, [r7, #12]
 8004afe:	f083 0320 	eor.w	r3, r3, #32
 8004b02:	81bb      	strh	r3, [r7, #12]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	89bb      	ldrh	r3, [r7, #12]
 8004b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	8013      	strh	r3, [r2, #0]
 8004b24:	e2d5      	b.n	80050d2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3c:	81fb      	strh	r3, [r7, #14]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]
 8004b5e:	e2b8      	b.n	80050d2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	4413      	add	r3, r2
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00da      	lsls	r2, r3, #3
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	88db      	ldrh	r3, [r3, #6]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	4413      	add	r3, r2
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00da      	lsls	r2, r3, #3
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8004bce:	d91d      	bls.n	8004c0c <USB_ActivateEndpoint+0x2b0>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <USB_ActivateEndpoint+0x28e>
 8004be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be6:	3b01      	subs	r3, #1
 8004be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e026      	b.n	8004c5a <USB_ActivateEndpoint+0x2fe>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <USB_ActivateEndpoint+0x2ce>
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e017      	b.n	8004c5a <USB_ActivateEndpoint+0x2fe>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <USB_ActivateEndpoint+0x2e8>
 8004c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c40:	3301      	adds	r3, #1
 8004c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	029b      	lsls	r3, r3, #10
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01b      	beq.n	8004caa <USB_ActivateEndpoint+0x34e>
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	843b      	strh	r3, [r7, #32]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	8c3b      	ldrh	r3, [r7, #32]
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d124      	bne.n	8004cfc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	83bb      	strh	r3, [r7, #28]
 8004cca:	8bbb      	ldrh	r3, [r7, #28]
 8004ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cd0:	83bb      	strh	r3, [r7, #28]
 8004cd2:	8bbb      	ldrh	r3, [r7, #28]
 8004cd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cd8:	83bb      	strh	r3, [r7, #28]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	8bbb      	ldrh	r3, [r7, #28]
 8004ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	8013      	strh	r3, [r2, #0]
 8004cfa:	e1ea      	b.n	80050d2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	83fb      	strh	r3, [r7, #30]
 8004d14:	8bfb      	ldrh	r3, [r7, #30]
 8004d16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d1a:	83fb      	strh	r3, [r7, #30]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	441a      	add	r2, r3
 8004d26:	8bfb      	ldrh	r3, [r7, #30]
 8004d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]
 8004d3c:	e1c9      	b.n	80050d2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	78db      	ldrb	r3, [r3, #3]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d11e      	bne.n	8004d84 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	441a      	add	r2, r3
 8004d6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd0:	4413      	add	r3, r2
 8004dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	00da      	lsls	r2, r3, #3
 8004dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	891b      	ldrh	r3, [r3, #8]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	657b      	str	r3, [r7, #84]	; 0x54
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e04:	4413      	add	r3, r2
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	00da      	lsls	r2, r3, #3
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e10:	4413      	add	r3, r2
 8004e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e16:	653b      	str	r3, [r7, #80]	; 0x50
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	895b      	ldrh	r3, [r3, #10]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 8093 	bne.w	8004f58 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01b      	beq.n	8004e86 <USB_ActivateEndpoint+0x52a>
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004e94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01b      	beq.n	8004ed6 <USB_ActivateEndpoint+0x57a>
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ece:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	873b      	strh	r3, [r7, #56]	; 0x38
 8004eee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ef0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ef4:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ef6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ef8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004efc:	873b      	strh	r3, [r7, #56]	; 0x38
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
 8004f56:	e0bc      	b.n	80050d2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004f68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01d      	beq.n	8004fb0 <USB_ActivateEndpoint+0x654>
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	441a      	add	r2, r3
 8004f98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004fc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01d      	beq.n	8005008 <USB_ActivateEndpoint+0x6ac>
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005004:	b29b      	uxth	r3, r3
 8005006:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	78db      	ldrb	r3, [r3, #3]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d024      	beq.n	800505a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005026:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800502a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800502e:	f083 0320 	eor.w	r3, r3, #32
 8005032:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005054:	b29b      	uxth	r3, r3
 8005056:	8013      	strh	r3, [r2, #0]
 8005058:	e01d      	b.n	8005096 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005070:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005092:	b29b      	uxth	r3, r3
 8005094:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	441a      	add	r2, r3
 80050ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80050d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3774      	adds	r7, #116	; 0x74
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop

080050e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b08d      	sub	sp, #52	; 0x34
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	7b1b      	ldrb	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 808e 	bne.w	8005214 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d044      	beq.n	800518a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	81bb      	strh	r3, [r7, #12]
 800510e:	89bb      	ldrh	r3, [r7, #12]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <USB_DeactivateEndpoint+0x6c>
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	817b      	strh	r3, [r7, #10]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005166:	813b      	strh	r3, [r7, #8]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	893b      	ldrh	r3, [r7, #8]
 8005174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]
 8005188:	e192      	b.n	80054b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	827b      	strh	r3, [r7, #18]
 8005198:	8a7b      	ldrh	r3, [r7, #18]
 800519a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01b      	beq.n	80051da <USB_DeactivateEndpoint+0xf6>
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b8:	823b      	strh	r3, [r7, #16]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	8a3b      	ldrh	r3, [r7, #16]
 80051c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f0:	81fb      	strh	r3, [r7, #14]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	441a      	add	r2, r3
 80051fc:	89fb      	ldrh	r3, [r7, #14]
 80051fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520e:	b29b      	uxth	r3, r3
 8005210:	8013      	strh	r3, [r2, #0]
 8005212:	e14d      	b.n	80054b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f040 80a5 	bne.w	8005368 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	843b      	strh	r3, [r7, #32]
 800522c:	8c3b      	ldrh	r3, [r7, #32]
 800522e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01b      	beq.n	800526e <USB_DeactivateEndpoint+0x18a>
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524c:	83fb      	strh	r3, [r7, #30]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	8bfb      	ldrh	r3, [r7, #30]
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	83bb      	strh	r3, [r7, #28]
 800527c:	8bbb      	ldrh	r3, [r7, #28]
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01b      	beq.n	80052be <USB_DeactivateEndpoint+0x1da>
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	837b      	strh	r3, [r7, #26]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	8b7b      	ldrh	r3, [r7, #26]
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	833b      	strh	r3, [r7, #24]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	8b3b      	ldrh	r3, [r7, #24]
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	82fb      	strh	r3, [r7, #22]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532a:	b29b      	uxth	r3, r3
 800532c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005344:	82bb      	strh	r3, [r7, #20]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	8abb      	ldrh	r3, [r7, #20]
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]
 8005366:	e0a3      	b.n	80054b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005376:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <USB_DeactivateEndpoint+0x2d4>
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	441a      	add	r2, r3
 80053a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80053c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <USB_DeactivateEndpoint+0x324>
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005404:	b29b      	uxth	r3, r3
 8005406:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800542c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005456:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	b29b      	uxth	r3, r3
 8005476:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3734      	adds	r7, #52	; 0x34
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b0c2      	sub	sp, #264	; 0x108
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054cc:	6018      	str	r0, [r3, #0]
 80054ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 86b7 	bne.w	8006258 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80054ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d908      	bls.n	8005518 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005516:	e007      	b.n	8005528 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	7b1b      	ldrb	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d13a      	bne.n	80055ae <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6959      	ldr	r1, [r3, #20]
 8005544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	88da      	ldrh	r2, [r3, #6]
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005554:	b29b      	uxth	r3, r3
 8005556:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800555a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800555e:	6800      	ldr	r0, [r0, #0]
 8005560:	f001 fc98 	bl	8006e94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4413      	add	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	00da      	lsls	r2, r3, #3
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4413      	add	r3, r2
 800559a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	f000 be1f 	b.w	80061ec <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80055ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	78db      	ldrb	r3, [r3, #3]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	f040 8462 	bne.w	8005e84 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80055c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	f240 83df 	bls.w	8005d9c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80055de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005604:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800563a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 81c7 	beq.w	8005a0e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	633b      	str	r3, [r7, #48]	; 0x30
 800568c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d177      	bne.n	800578c <USB_EPStartXfer+0x2ce>
 800569c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	4413      	add	r3, r2
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	00da      	lsls	r2, r3, #3
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	4413      	add	r3, r2
 80056d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ec:	2b3e      	cmp	r3, #62	; 0x3e
 80056ee:	d921      	bls.n	8005734 <USB_EPStartXfer+0x276>
 80056f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <USB_EPStartXfer+0x252>
 8005706:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800570a:	3b01      	subs	r3, #1
 800570c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29a      	uxth	r2, r3
 8005716:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800571a:	b29b      	uxth	r3, r3
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	b29b      	uxth	r3, r3
 8005720:	4313      	orrs	r3, r2
 8005722:	b29b      	uxth	r3, r3
 8005724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572c:	b29a      	uxth	r2, r3
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e050      	b.n	80057d6 <USB_EPStartXfer+0x318>
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <USB_EPStartXfer+0x294>
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574a:	b29a      	uxth	r2, r3
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e041      	b.n	80057d6 <USB_EPStartXfer+0x318>
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <USB_EPStartXfer+0x2b4>
 8005768:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800576c:	3301      	adds	r3, #1
 800576e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29a      	uxth	r2, r3
 8005778:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800577c:	b29b      	uxth	r3, r3
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	b29b      	uxth	r3, r3
 8005782:	4313      	orrs	r3, r2
 8005784:	b29a      	uxth	r2, r3
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	e024      	b.n	80057d6 <USB_EPStartXfer+0x318>
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d11c      	bne.n	80057d6 <USB_EPStartXfer+0x318>
 800579c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	4413      	add	r3, r2
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
 80057b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	00da      	lsls	r2, r3, #3
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	4413      	add	r3, r2
 80057c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	895b      	ldrh	r3, [r3, #10]
 80057e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6959      	ldr	r1, [r3, #20]
 80057f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005800:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005804:	6800      	ldr	r0, [r0, #0]
 8005806:	f001 fb45 	bl	8006e94 <USB_WritePMA>
            ep->xfer_buff += len;
 800580a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	441a      	add	r2, r3
 800581c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d90f      	bls.n	8005864 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	621a      	str	r2, [r3, #32]
 8005862:	e00e      	b.n	8005882 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d177      	bne.n	8005982 <USB_EPStartXfer+0x4c4>
 8005892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4413      	add	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	00da      	lsls	r2, r3, #3
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	4413      	add	r3, r2
 80058c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d8:	b29a      	uxth	r2, r3
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e2:	2b3e      	cmp	r3, #62	; 0x3e
 80058e4:	d921      	bls.n	800592a <USB_EPStartXfer+0x46c>
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <USB_EPStartXfer+0x448>
 80058fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005900:	3b01      	subs	r3, #1
 8005902:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005910:	b29b      	uxth	r3, r3
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	b29b      	uxth	r3, r3
 8005916:	4313      	orrs	r3, r2
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005922:	b29a      	uxth	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e056      	b.n	80059d8 <USB_EPStartXfer+0x51a>
 800592a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <USB_EPStartXfer+0x48a>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e047      	b.n	80059d8 <USB_EPStartXfer+0x51a>
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <USB_EPStartXfer+0x4aa>
 800595e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005962:	3301      	adds	r3, #1
 8005964:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29a      	uxth	r2, r3
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005972:	b29b      	uxth	r3, r3
 8005974:	029b      	lsls	r3, r3, #10
 8005976:	b29b      	uxth	r3, r3
 8005978:	4313      	orrs	r3, r2
 800597a:	b29a      	uxth	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e02a      	b.n	80059d8 <USB_EPStartXfer+0x51a>
 8005982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d122      	bne.n	80059d8 <USB_EPStartXfer+0x51a>
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	4413      	add	r3, r2
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	00da      	lsls	r2, r3, #3
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	891b      	ldrh	r3, [r3, #8]
 80059e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6959      	ldr	r1, [r3, #20]
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a06:	6800      	ldr	r0, [r0, #0]
 8005a08:	f001 fa44 	bl	8006e94 <USB_WritePMA>
 8005a0c:	e3ee      	b.n	80061ec <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d177      	bne.n	8005b0e <USB_EPStartXfer+0x650>
 8005a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3e:	4413      	add	r3, r2
 8005a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	00da      	lsls	r2, r3, #3
 8005a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a70:	d921      	bls.n	8005ab6 <USB_EPStartXfer+0x5f8>
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <USB_EPStartXfer+0x5d4>
 8005a88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	029b      	lsls	r3, r3, #10
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e056      	b.n	8005b64 <USB_EPStartXfer+0x6a6>
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <USB_EPStartXfer+0x616>
 8005abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e047      	b.n	8005b64 <USB_EPStartXfer+0x6a6>
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <USB_EPStartXfer+0x636>
 8005aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aee:	3301      	adds	r3, #1
 8005af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	4313      	orrs	r3, r2
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e02a      	b.n	8005b64 <USB_EPStartXfer+0x6a6>
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d122      	bne.n	8005b64 <USB_EPStartXfer+0x6a6>
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	653b      	str	r3, [r7, #80]	; 0x50
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b3e:	4413      	add	r3, r2
 8005b40:	653b      	str	r3, [r7, #80]	; 0x50
 8005b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	00da      	lsls	r2, r3, #3
 8005b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	891b      	ldrh	r3, [r3, #8]
 8005b70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6959      	ldr	r1, [r3, #20]
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b92:	6800      	ldr	r0, [r0, #0]
 8005b94:	f001 f97e 	bl	8006e94 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695a      	ldr	r2, [r3, #20]
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba8:	441a      	add	r2, r3
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a1a      	ldr	r2, [r3, #32]
 8005bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d90f      	bls.n	8005bf2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	621a      	str	r2, [r3, #32]
 8005bf0:	e00e      	b.n	8005c10 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d177      	bne.n	8005d1c <USB_EPStartXfer+0x85e>
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	4413      	add	r3, r2
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	00da      	lsls	r2, r3, #3
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	4413      	add	r3, r2
 8005c62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7e:	d921      	bls.n	8005cc4 <USB_EPStartXfer+0x806>
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <USB_EPStartXfer+0x7e2>
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e050      	b.n	8005d66 <USB_EPStartXfer+0x8a8>
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <USB_EPStartXfer+0x824>
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e041      	b.n	8005d66 <USB_EPStartXfer+0x8a8>
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <USB_EPStartXfer+0x844>
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	029b      	lsls	r3, r3, #10
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	4313      	orrs	r3, r2
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e024      	b.n	8005d66 <USB_EPStartXfer+0x8a8>
 8005d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d11c      	bne.n	8005d66 <USB_EPStartXfer+0x8a8>
 8005d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d40:	4413      	add	r3, r2
 8005d42:	643b      	str	r3, [r7, #64]	; 0x40
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	00da      	lsls	r2, r3, #3
 8005d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	895b      	ldrh	r3, [r3, #10]
 8005d72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6959      	ldr	r1, [r3, #20]
 8005d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d94:	6800      	ldr	r0, [r0, #0]
 8005d96:	f001 f87d 	bl	8006e94 <USB_WritePMA>
 8005d9a:	e227      	b.n	80061ec <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e28:	4413      	add	r3, r2
 8005e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	00da      	lsls	r2, r3, #3
 8005e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	891b      	ldrh	r3, [r3, #8]
 8005e5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6959      	ldr	r1, [r3, #20]
 8005e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e7c:	6800      	ldr	r0, [r0, #0]
 8005e7e:	f001 f809 	bl	8006e94 <USB_WritePMA>
 8005e82:	e1b3      	b.n	80061ec <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e94:	1ad2      	subs	r2, r2, r3
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80c6 	beq.w	8006056 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d177      	bne.n	8005fd6 <USB_EPStartXfer+0xb18>
 8005ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f06:	4413      	add	r3, r2
 8005f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	00da      	lsls	r2, r3, #3
 8005f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f20:	667b      	str	r3, [r7, #100]	; 0x64
 8005f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f36:	2b3e      	cmp	r3, #62	; 0x3e
 8005f38:	d921      	bls.n	8005f7e <USB_EPStartXfer+0xac0>
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <USB_EPStartXfer+0xa9c>
 8005f50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f54:	3b01      	subs	r3, #1
 8005f56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e050      	b.n	8006020 <USB_EPStartXfer+0xb62>
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <USB_EPStartXfer+0xade>
 8005f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	e041      	b.n	8006020 <USB_EPStartXfer+0xb62>
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d004      	beq.n	8005fbc <USB_EPStartXfer+0xafe>
 8005fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e024      	b.n	8006020 <USB_EPStartXfer+0xb62>
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d11c      	bne.n	8006020 <USB_EPStartXfer+0xb62>
 8005fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ffa:	4413      	add	r3, r2
 8005ffc:	673b      	str	r3, [r7, #112]	; 0x70
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	00da      	lsls	r2, r3, #3
 800600c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800600e:	4413      	add	r3, r2
 8006010:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006014:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601a:	b29a      	uxth	r2, r3
 800601c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	895b      	ldrh	r3, [r3, #10]
 800602c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6959      	ldr	r1, [r3, #20]
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006040:	b29b      	uxth	r3, r3
 8006042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006046:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800604a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800604e:	6800      	ldr	r0, [r0, #0]
 8006050:	f000 ff20 	bl	8006e94 <USB_WritePMA>
 8006054:	e0ca      	b.n	80061ec <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d177      	bne.n	8006156 <USB_EPStartXfer+0xc98>
 8006066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006080:	b29b      	uxth	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006086:	4413      	add	r3, r2
 8006088:	67fb      	str	r3, [r7, #124]	; 0x7c
 800608a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	00da      	lsls	r2, r3, #3
 8006098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800609a:	4413      	add	r3, r2
 800609c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80060a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b6:	2b3e      	cmp	r3, #62	; 0x3e
 80060b8:	d921      	bls.n	80060fe <USB_EPStartXfer+0xc40>
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <USB_EPStartXfer+0xc1c>
 80060d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060d4:	3b01      	subs	r3, #1
 80060d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	029b      	lsls	r3, r3, #10
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4313      	orrs	r3, r2
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e05c      	b.n	80061b8 <USB_EPStartXfer+0xcfa>
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <USB_EPStartXfer+0xc5e>
 8006106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006114:	b29a      	uxth	r2, r3
 8006116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e04d      	b.n	80061b8 <USB_EPStartXfer+0xcfa>
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <USB_EPStartXfer+0xc7e>
 8006132:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006136:	3301      	adds	r3, #1
 8006138:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800613c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29a      	uxth	r2, r3
 8006142:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006146:	b29b      	uxth	r3, r3
 8006148:	029b      	lsls	r3, r3, #10
 800614a:	b29b      	uxth	r3, r3
 800614c:	4313      	orrs	r3, r2
 800614e:	b29a      	uxth	r2, r3
 8006150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e030      	b.n	80061b8 <USB_EPStartXfer+0xcfa>
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d128      	bne.n	80061b8 <USB_EPStartXfer+0xcfa>
 8006166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800618a:	4413      	add	r3, r2
 800618c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	00da      	lsls	r2, r3, #3
 800619e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061a2:	4413      	add	r3, r2
 80061a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	891b      	ldrh	r3, [r3, #8]
 80061c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6959      	ldr	r1, [r3, #20]
 80061d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061e6:	6800      	ldr	r0, [r0, #0]
 80061e8:	f000 fe54 	bl	8006e94 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006212:	817b      	strh	r3, [r7, #10]
 8006214:	897b      	ldrh	r3, [r7, #10]
 8006216:	f083 0310 	eor.w	r3, r3, #16
 800621a:	817b      	strh	r3, [r7, #10]
 800621c:	897b      	ldrh	r3, [r7, #10]
 800621e:	f083 0320 	eor.w	r3, r3, #32
 8006222:	817b      	strh	r3, [r7, #10]
 8006224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	897b      	ldrh	r3, [r7, #10]
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]
 8006254:	f000 bcde 	b.w	8006c14 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	7b1b      	ldrb	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f040 80bb 	bne.w	80063e0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	429a      	cmp	r2, r3
 8006284:	d917      	bls.n	80062b6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	619a      	str	r2, [r3, #24]
 80062b4:	e00e      	b.n	80062d4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80062c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2200      	movs	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062f8:	4413      	add	r3, r2
 80062fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	00da      	lsls	r2, r3, #3
 800630c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006310:	4413      	add	r3, r2
 8006312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800631a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006326:	b29a      	uxth	r2, r3
 8006328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006332:	2b3e      	cmp	r3, #62	; 0x3e
 8006334:	d924      	bls.n	8006380 <USB_EPStartXfer+0xec2>
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <USB_EPStartXfer+0xe98>
 800634c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006350:	3b01      	subs	r3, #1
 8006352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006362:	b29b      	uxth	r3, r3
 8006364:	029b      	lsls	r3, r3, #10
 8006366:	b29b      	uxth	r3, r3
 8006368:	4313      	orrs	r3, r2
 800636a:	b29b      	uxth	r3, r3
 800636c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006374:	b29a      	uxth	r2, r3
 8006376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	f000 bc10 	b.w	8006ba0 <USB_EPStartXfer+0x16e2>
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <USB_EPStartXfer+0xee4>
 8006388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e3fe      	b.n	8006ba0 <USB_EPStartXfer+0x16e2>
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <USB_EPStartXfer+0xf04>
 80063b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063bc:	3301      	adds	r3, #1
 80063be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	4313      	orrs	r3, r2
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	e3df      	b.n	8006ba0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	78db      	ldrb	r3, [r3, #3]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	f040 8218 	bne.w	8006822 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 809d 	bne.w	800653e <USB_EPStartXfer+0x1080>
 8006404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006420:	b29b      	uxth	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006428:	4413      	add	r3, r2
 800642a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	00da      	lsls	r2, r3, #3
 800643c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006440:	4413      	add	r3, r2
 8006442:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800644a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006456:	b29a      	uxth	r2, r3
 8006458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b3e      	cmp	r3, #62	; 0x3e
 800646c:	d92b      	bls.n	80064c6 <USB_EPStartXfer+0x1008>
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <USB_EPStartXfer+0xfe0>
 8006494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006498:	3b01      	subs	r3, #1
 800649a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800649e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	029b      	lsls	r3, r3, #10
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4313      	orrs	r3, r2
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	e070      	b.n	80065a8 <USB_EPStartXfer+0x10ea>
 80064c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10c      	bne.n	80064f0 <USB_EPStartXfer+0x1032>
 80064d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e05b      	b.n	80065a8 <USB_EPStartXfer+0x10ea>
 80064f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <USB_EPStartXfer+0x1062>
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651a:	3301      	adds	r3, #1
 800651c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	b29b      	uxth	r3, r3
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	b29b      	uxth	r3, r3
 8006532:	4313      	orrs	r3, r2
 8006534:	b29a      	uxth	r2, r3
 8006536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e034      	b.n	80065a8 <USB_EPStartXfer+0x10ea>
 800653e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d12c      	bne.n	80065a8 <USB_EPStartXfer+0x10ea>
 800654e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006572:	4413      	add	r3, r2
 8006574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	00da      	lsls	r2, r3, #3
 8006586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800658a:	4413      	add	r3, r2
 800658c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 809d 	bne.w	8006702 <USB_EPStartXfer+0x1244>
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065ec:	4413      	add	r3, r2
 80065ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	00da      	lsls	r2, r3, #3
 8006600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006604:	4413      	add	r3, r2
 8006606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800660a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800660e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b3e      	cmp	r3, #62	; 0x3e
 8006630:	d92b      	bls.n	800668a <USB_EPStartXfer+0x11cc>
 8006632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <USB_EPStartXfer+0x11a4>
 8006658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800665c:	3b01      	subs	r3, #1
 800665e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006662:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29a      	uxth	r2, r3
 800666a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666e:	b29b      	uxth	r3, r3
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	b29b      	uxth	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b29b      	uxth	r3, r3
 8006678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006680:	b29a      	uxth	r2, r3
 8006682:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e069      	b.n	800675e <USB_EPStartXfer+0x12a0>
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10c      	bne.n	80066b4 <USB_EPStartXfer+0x11f6>
 800669a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	e054      	b.n	800675e <USB_EPStartXfer+0x12a0>
 80066b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <USB_EPStartXfer+0x1226>
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066de:	3301      	adds	r3, #1
 80066e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	029b      	lsls	r3, r3, #10
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	4313      	orrs	r3, r2
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	e02d      	b.n	800675e <USB_EPStartXfer+0x12a0>
 8006702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d125      	bne.n	800675e <USB_EPStartXfer+0x12a0>
 8006712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006728:	4413      	add	r3, r2
 800672a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800672e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	00da      	lsls	r2, r3, #3
 800673c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006740:	4413      	add	r3, r2
 8006742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800674a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	b29a      	uxth	r2, r3
 8006758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800675c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8218 	beq.w	8006ba0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006790:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <USB_EPStartXfer+0x12ea>
 800679c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10d      	bne.n	80067c4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80067ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 81f5 	bne.w	8006ba0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 81ee 	bne.w	8006ba0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80067c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]
 8006820:	e1be      	b.n	8006ba0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	78db      	ldrb	r3, [r3, #3]
 800682e:	2b01      	cmp	r3, #1
 8006830:	f040 81b4 	bne.w	8006b9c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	429a      	cmp	r2, r3
 800684e:	d917      	bls.n	8006880 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	619a      	str	r2, [r3, #24]
 800687e:	e00e      	b.n	800689e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800689e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8085 	bne.w	80069ba <USB_EPStartXfer+0x14fc>
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068d4:	4413      	add	r3, r2
 80068d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	00da      	lsls	r2, r3, #3
 80068e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690e:	2b3e      	cmp	r3, #62	; 0x3e
 8006910:	d923      	bls.n	800695a <USB_EPStartXfer+0x149c>
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <USB_EPStartXfer+0x1474>
 8006928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692c:	3b01      	subs	r3, #1
 800692e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800693e:	b29b      	uxth	r3, r3
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	b29b      	uxth	r3, r3
 8006944:	4313      	orrs	r3, r2
 8006946:	b29b      	uxth	r3, r3
 8006948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	e060      	b.n	8006a1c <USB_EPStartXfer+0x155e>
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10c      	bne.n	800697c <USB_EPStartXfer+0x14be>
 8006962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	e04f      	b.n	8006a1c <USB_EPStartXfer+0x155e>
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006980:	085b      	lsrs	r3, r3, #1
 8006982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <USB_EPStartXfer+0x14de>
 8006992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006996:	3301      	adds	r3, #1
 8006998:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800699c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	029b      	lsls	r3, r3, #10
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	e030      	b.n	8006a1c <USB_EPStartXfer+0x155e>
 80069ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d128      	bne.n	8006a1c <USB_EPStartXfer+0x155e>
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ee:	4413      	add	r3, r2
 80069f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	00da      	lsls	r2, r3, #3
 8006a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a06:	4413      	add	r3, r2
 8006a08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 8085 	bne.w	8006b46 <USB_EPStartXfer+0x1688>
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a60:	4413      	add	r3, r2
 8006a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	00da      	lsls	r2, r3, #3
 8006a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a9c:	d923      	bls.n	8006ae6 <USB_EPStartXfer+0x1628>
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <USB_EPStartXfer+0x1600>
 8006ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	029b      	lsls	r3, r3, #10
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	e05c      	b.n	8006ba0 <USB_EPStartXfer+0x16e2>
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10c      	bne.n	8006b08 <USB_EPStartXfer+0x164a>
 8006aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e04b      	b.n	8006ba0 <USB_EPStartXfer+0x16e2>
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <USB_EPStartXfer+0x166a>
 8006b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b22:	3301      	adds	r3, #1
 8006b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e02c      	b.n	8006ba0 <USB_EPStartXfer+0x16e2>
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d124      	bne.n	8006ba0 <USB_EPStartXfer+0x16e2>
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	00da      	lsls	r2, r3, #3
 8006b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	e001      	b.n	8006ba0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e03a      	b.n	8006c16 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006bca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006bce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bd2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006bd6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bde:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	441a      	add	r2, r3
 8006bfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d020      	beq.n	8006c74 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c48:	81bb      	strh	r3, [r7, #12]
 8006c4a:	89bb      	ldrh	r3, [r7, #12]
 8006c4c:	f083 0310 	eor.w	r3, r3, #16
 8006c50:	81bb      	strh	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	441a      	add	r2, r3
 8006c5c:	89bb      	ldrh	r3, [r7, #12]
 8006c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]
 8006c72:	e01f      	b.n	8006cb4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	81fb      	strh	r3, [r7, #14]
 8006c8c:	89fb      	ldrh	r3, [r7, #14]
 8006c8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c92:	81fb      	strh	r3, [r7, #14]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	89fb      	ldrh	r3, [r7, #14]
 8006ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b087      	sub	sp, #28
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	7b1b      	ldrb	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 809d 	bne.w	8006e10 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	785b      	ldrb	r3, [r3, #1]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d04c      	beq.n	8006d78 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	823b      	strh	r3, [r7, #16]
 8006cec:	8a3b      	ldrh	r3, [r7, #16]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01b      	beq.n	8006d2e <USB_EPClearStall+0x6c>
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	81fb      	strh	r3, [r7, #14]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	441a      	add	r2, r3
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	78db      	ldrb	r3, [r3, #3]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d06c      	beq.n	8006e10 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4c:	81bb      	strh	r3, [r7, #12]
 8006d4e:	89bb      	ldrh	r3, [r7, #12]
 8006d50:	f083 0320 	eor.w	r3, r3, #32
 8006d54:	81bb      	strh	r3, [r7, #12]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	441a      	add	r2, r3
 8006d60:	89bb      	ldrh	r3, [r7, #12]
 8006d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	8013      	strh	r3, [r2, #0]
 8006d76:	e04b      	b.n	8006e10 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	82fb      	strh	r3, [r7, #22]
 8006d86:	8afb      	ldrh	r3, [r7, #22]
 8006d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <USB_EPClearStall+0x106>
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	82bb      	strh	r3, [r7, #20]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	8abb      	ldrh	r3, [r7, #20]
 8006db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dde:	827b      	strh	r3, [r7, #18]
 8006de0:	8a7b      	ldrh	r3, [r7, #18]
 8006de2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006de6:	827b      	strh	r3, [r7, #18]
 8006de8:	8a7b      	ldrh	r3, [r7, #18]
 8006dea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dee:	827b      	strh	r3, [r7, #18]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	8a7b      	ldrh	r3, [r7, #18]
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b08b      	sub	sp, #44	; 0x2c
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	80fb      	strh	r3, [r7, #6]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006eaa:	88bb      	ldrh	r3, [r7, #4]
 8006eac:	3301      	adds	r3, #1
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006eba:	88fa      	ldrh	r2, [r7, #6]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ec4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eca:	e01b      	b.n	8006f04 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	b21a      	sxth	r2, r3
 8006edc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	8a7a      	ldrh	r2, [r7, #18]
 8006eea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	3302      	adds	r3, #2
 8006ef0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	3b01      	subs	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e0      	bne.n	8006ecc <USB_WritePMA+0x38>
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	372c      	adds	r7, #44	; 0x2c
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b08b      	sub	sp, #44	; 0x2c
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4611      	mov	r1, r2
 8006f24:	461a      	mov	r2, r3
 8006f26:	460b      	mov	r3, r1
 8006f28:	80fb      	strh	r3, [r7, #6]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f2e:	88bb      	ldrh	r3, [r7, #4]
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4e:	e018      	b.n	8006f82 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e3      	bne.n	8006f50 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006f88:	88bb      	ldrh	r3, [r7, #4]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	701a      	strb	r2, [r3, #0]
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	372c      	adds	r7, #44	; 0x2c
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006fc0:	f004 fe56 	bl	800bc70 <USBD_static_malloc>
 8006fc4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e066      	b.n	80070a6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7c1b      	ldrb	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d119      	bne.n	800701c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fec:	2202      	movs	r2, #2
 8006fee:	2181      	movs	r1, #129	; 0x81
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f004 fce4 	bl	800b9be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007000:	2202      	movs	r2, #2
 8007002:	2101      	movs	r1, #1
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f004 fcda 	bl	800b9be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2210      	movs	r2, #16
 8007016:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800701a:	e016      	b.n	800704a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	2202      	movs	r2, #2
 8007020:	2181      	movs	r1, #129	; 0x81
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f004 fccb 	bl	800b9be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800702e:	2340      	movs	r3, #64	; 0x40
 8007030:	2202      	movs	r2, #2
 8007032:	2101      	movs	r1, #1
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f004 fcc2 	bl	800b9be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2210      	movs	r2, #16
 8007046:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800704a:	2308      	movs	r3, #8
 800704c:	2203      	movs	r2, #3
 800704e:	2182      	movs	r1, #130	; 0x82
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f004 fcb4 	bl	800b9be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7c1b      	ldrb	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800708a:	2101      	movs	r1, #1
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f004 fd85 	bl	800bb9c <USBD_LL_PrepareReceive>
 8007092:	e007      	b.n	80070a4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800709a:	2340      	movs	r3, #64	; 0x40
 800709c:	2101      	movs	r1, #1
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f004 fd7c 	bl	800bb9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070ba:	2181      	movs	r1, #129	; 0x81
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f004 fca4 	bl	800ba0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070c8:	2101      	movs	r1, #1
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f004 fc9d 	bl	800ba0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070d8:	2182      	movs	r1, #130	; 0x82
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f004 fc95 	bl	800ba0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00e      	beq.n	8007118 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710a:	4618      	mov	r0, r3
 800710c:	f004 fdbe 	bl	800bc8c <USBD_static_free>
    pdev->pClassData = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007134:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	e0af      	b.n	80072ac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007154:	2b00      	cmp	r3, #0
 8007156:	d03f      	beq.n	80071d8 <USBD_CDC_Setup+0xb4>
 8007158:	2b20      	cmp	r3, #32
 800715a:	f040 809f 	bne.w	800729c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d02e      	beq.n	80071c4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	b25b      	sxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	da16      	bge.n	800719e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800717c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	88d2      	ldrh	r2, [r2, #6]
 8007182:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	88db      	ldrh	r3, [r3, #6]
 8007188:	2b07      	cmp	r3, #7
 800718a:	bf28      	it	cs
 800718c:	2307      	movcs	r3, #7
 800718e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	89fa      	ldrh	r2, [r7, #14]
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fa9f 	bl	80086da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800719c:	e085      	b.n	80072aa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	785a      	ldrb	r2, [r3, #1]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	88db      	ldrh	r3, [r3, #6]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80071b4:	6939      	ldr	r1, [r7, #16]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	88db      	ldrh	r3, [r3, #6]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fab8 	bl	8008732 <USBD_CtlPrepareRx>
      break;
 80071c2:	e072      	b.n	80072aa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	7850      	ldrb	r0, [r2, #1]
 80071d0:	2200      	movs	r2, #0
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	4798      	blx	r3
      break;
 80071d6:	e068      	b.n	80072aa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b0b      	cmp	r3, #11
 80071de:	d852      	bhi.n	8007286 <USBD_CDC_Setup+0x162>
 80071e0:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <USBD_CDC_Setup+0xc4>)
 80071e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e6:	bf00      	nop
 80071e8:	08007219 	.word	0x08007219
 80071ec:	08007295 	.word	0x08007295
 80071f0:	08007287 	.word	0x08007287
 80071f4:	08007287 	.word	0x08007287
 80071f8:	08007287 	.word	0x08007287
 80071fc:	08007287 	.word	0x08007287
 8007200:	08007287 	.word	0x08007287
 8007204:	08007287 	.word	0x08007287
 8007208:	08007287 	.word	0x08007287
 800720c:	08007287 	.word	0x08007287
 8007210:	08007243 	.word	0x08007243
 8007214:	0800726d 	.word	0x0800726d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b03      	cmp	r3, #3
 8007222:	d107      	bne.n	8007234 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007224:	f107 030a 	add.w	r3, r7, #10
 8007228:	2202      	movs	r2, #2
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 fa54 	bl	80086da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007232:	e032      	b.n	800729a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f9de 	bl	80085f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	75fb      	strb	r3, [r7, #23]
          break;
 8007240:	e02b      	b.n	800729a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d107      	bne.n	800725e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800724e:	f107 030d 	add.w	r3, r7, #13
 8007252:	2201      	movs	r2, #1
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fa3f 	bl	80086da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800725c:	e01d      	b.n	800729a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f9c9 	bl	80085f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007266:	2303      	movs	r3, #3
 8007268:	75fb      	strb	r3, [r7, #23]
          break;
 800726a:	e016      	b.n	800729a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b03      	cmp	r3, #3
 8007276:	d00f      	beq.n	8007298 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 f9bc 	bl	80085f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007284:	e008      	b.n	8007298 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f9b5 	bl	80085f8 <USBD_CtlError>
          ret = USBD_FAIL;
 800728e:	2303      	movs	r3, #3
 8007290:	75fb      	strb	r3, [r7, #23]
          break;
 8007292:	e002      	b.n	800729a <USBD_CDC_Setup+0x176>
          break;
 8007294:	bf00      	nop
 8007296:	e008      	b.n	80072aa <USBD_CDC_Setup+0x186>
          break;
 8007298:	bf00      	nop
      }
      break;
 800729a:	e006      	b.n	80072aa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 f9aa 	bl	80085f8 <USBD_CtlError>
      ret = USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	75fb      	strb	r3, [r7, #23]
      break;
 80072a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e04f      	b.n	8007376 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	3318      	adds	r3, #24
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d029      	beq.n	8007348 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072f4:	78fa      	ldrb	r2, [r7, #3]
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	3318      	adds	r3, #24
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	78f9      	ldrb	r1, [r7, #3]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	460b      	mov	r3, r1
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4403      	add	r3, r0
 8007314:	3320      	adds	r3, #32
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	fbb2 f1f3 	udiv	r1, r2, r3
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007322:	2b00      	cmp	r3, #0
 8007324:	d110      	bne.n	8007348 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	3318      	adds	r3, #24
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800733a:	78f9      	ldrb	r1, [r7, #3]
 800733c:	2300      	movs	r3, #0
 800733e:	2200      	movs	r2, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f004 fc0a 	bl	800bb5a <USBD_LL_Transmit>
 8007346:	e015      	b.n	8007374 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007390:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	e015      	b.n	80073cc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f004 fc1a 	bl	800bbde <USBD_LL_GetRxDataSize>
 80073aa:	4602      	mov	r2, r0
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073c6:	4611      	mov	r1, r2
 80073c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e01b      	b.n	8007426 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d015      	beq.n	8007424 <USBD_CDC_EP0_RxReady+0x50>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073fe:	2bff      	cmp	r3, #255	; 0xff
 8007400:	d010      	beq.n	8007424 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007410:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007418:	b292      	uxth	r2, r2
 800741a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	22ff      	movs	r2, #255	; 0xff
 8007420:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2243      	movs	r2, #67	; 0x43
 800743c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800743e:	4b03      	ldr	r3, [pc, #12]	; (800744c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000094 	.word	0x20000094

08007450 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2243      	movs	r2, #67	; 0x43
 800745c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800745e:	4b03      	ldr	r3, [pc, #12]	; (800746c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	20000050 	.word	0x20000050

08007470 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2243      	movs	r2, #67	; 0x43
 800747c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800747e:	4b03      	ldr	r3, [pc, #12]	; (800748c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	200000d8 	.word	0x200000d8

08007490 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	220a      	movs	r2, #10
 800749c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800749e:	4b03      	ldr	r3, [pc, #12]	; (80074ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e004      	b.n	80074ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074da:	b480      	push	{r7}
 80074dc:	b087      	sub	sp, #28
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e008      	b.n	800750a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007526:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800752e:	2303      	movs	r3, #3
 8007530:	e004      	b.n	800753c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007556:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007562:	2303      	movs	r3, #3
 8007564:	e016      	b.n	8007594 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	7c1b      	ldrb	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d109      	bne.n	8007582 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f004 fb0e 	bl	800bb9c <USBD_LL_PrepareReceive>
 8007580:	e007      	b.n	8007592 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	2101      	movs	r1, #1
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f004 fb05 	bl	800bb9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e01f      	b.n	80075f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	79fa      	ldrb	r2, [r7, #7]
 80075e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f004 f96d 	bl	800b8c8 <USBD_LL_Init>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	e016      	b.n	8007642 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	f107 020e 	add.w	r2, r7, #14
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	4602      	mov	r2, r0
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f004 f998 	bl	800b988 <USBD_LL_Start>
 8007658:	4603      	mov	r3, r0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	4611      	mov	r1, r2
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	4611      	mov	r1, r2
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
  }

  return USBD_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 ff46 	bl	8008584 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007714:	f003 031f 	and.w	r3, r3, #31
 8007718:	2b02      	cmp	r3, #2
 800771a:	d01a      	beq.n	8007752 <USBD_LL_SetupStage+0x72>
 800771c:	2b02      	cmp	r3, #2
 800771e:	d822      	bhi.n	8007766 <USBD_LL_SetupStage+0x86>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <USBD_LL_SetupStage+0x4a>
 8007724:	2b01      	cmp	r3, #1
 8007726:	d00a      	beq.n	800773e <USBD_LL_SetupStage+0x5e>
 8007728:	e01d      	b.n	8007766 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9ee 	bl	8007b14 <USBD_StdDevReq>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e020      	b.n	8007780 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa52 	bl	8007bf0 <USBD_StdItfReq>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e016      	b.n	8007780 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa91 	bl	8007c82 <USBD_StdEPReq>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]
      break;
 8007764:	e00c      	b.n	8007780 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800776c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007770:	b2db      	uxtb	r3, r3
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f004 f967 	bl	800ba48 <USBD_LL_StallEP>
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]
      break;
 800777e:	bf00      	nop
  }

  return ret;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	460b      	mov	r3, r1
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d138      	bne.n	8007810 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d14a      	bne.n	8007846 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d913      	bls.n	80077e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	1ad2      	subs	r2, r2, r3
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	4293      	cmp	r3, r2
 80077d4:	bf28      	it	cs
 80077d6:	4613      	movcs	r3, r2
 80077d8:	461a      	mov	r2, r3
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 ffc5 	bl	800876c <USBD_CtlContinueRx>
 80077e2:	e030      	b.n	8007846 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d10b      	bne.n	8007808 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 ffc0 	bl	800878e <USBD_CtlSendStatus>
 800780e:	e01a      	b.n	8007846 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d114      	bne.n	8007846 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00e      	beq.n	8007846 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	7afa      	ldrb	r2, [r7, #11]
 8007832:	4611      	mov	r1, r2
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	4798      	blx	r3
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	e000      	b.n	8007848 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	460b      	mov	r3, r1
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800785e:	7afb      	ldrb	r3, [r7, #11]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d16b      	bne.n	800793c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3314      	adds	r3, #20
 8007868:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007870:	2b02      	cmp	r3, #2
 8007872:	d156      	bne.n	8007922 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	429a      	cmp	r2, r3
 800787e:	d914      	bls.n	80078aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	1ad2      	subs	r2, r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	461a      	mov	r2, r3
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 ff3a 	bl	8008710 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800789c:	2300      	movs	r3, #0
 800789e:	2200      	movs	r2, #0
 80078a0:	2100      	movs	r1, #0
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f004 f97a 	bl	800bb9c <USBD_LL_PrepareReceive>
 80078a8:	e03b      	b.n	8007922 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d11c      	bne.n	80078f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078be:	429a      	cmp	r2, r3
 80078c0:	d316      	bcc.n	80078f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d20f      	bcs.n	80078f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 ff1b 	bl	8008710 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e2:	2300      	movs	r3, #0
 80078e4:	2200      	movs	r2, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f004 f957 	bl	800bb9c <USBD_LL_PrepareReceive>
 80078ee:	e018      	b.n	8007922 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d10b      	bne.n	8007914 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f004 f896 	bl	800ba48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 ff49 	bl	80087b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007928:	2b01      	cmp	r3, #1
 800792a:	d122      	bne.n	8007972 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7ff fe98 	bl	8007662 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800793a:	e01a      	b.n	8007972 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b03      	cmp	r3, #3
 8007946:	d114      	bne.n	8007972 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	7afa      	ldrb	r2, [r7, #11]
 800795e:	4611      	mov	r1, r2
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	4798      	blx	r3
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	e000      	b.n	8007974 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e02f      	b.n	8007a10 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00f      	beq.n	80079da <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6852      	ldr	r2, [r2, #4]
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	4611      	mov	r1, r2
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	2200      	movs	r2, #0
 80079de:	2100      	movs	r1, #0
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f003 ffec 	bl	800b9be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2240      	movs	r2, #64	; 0x40
 80079f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079f6:	2340      	movs	r3, #64	; 0x40
 80079f8:	2200      	movs	r2, #0
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f003 ffde 	bl	800b9be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2240      	movs	r2, #64	; 0x40
 8007a0c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	78fa      	ldrb	r2, [r7, #3]
 8007a28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2204      	movs	r2, #4
 8007a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d106      	bne.n	8007a86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e012      	b.n	8007ad0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d10b      	bne.n	8007ace <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3301      	adds	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007af6:	8a3b      	ldrh	r3, [r7, #16]
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b21a      	sxth	r2, r3
 8007afc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	b21b      	sxth	r3, r3
 8007b04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b06:	89fb      	ldrh	r3, [r7, #14]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d005      	beq.n	8007b3a <USBD_StdDevReq+0x26>
 8007b2e:	2b40      	cmp	r3, #64	; 0x40
 8007b30:	d853      	bhi.n	8007bda <USBD_StdDevReq+0xc6>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <USBD_StdDevReq+0x3a>
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d14f      	bne.n	8007bda <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4c:	e04a      	b.n	8007be4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b09      	cmp	r3, #9
 8007b54:	d83b      	bhi.n	8007bce <USBD_StdDevReq+0xba>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <USBD_StdDevReq+0x48>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007bc5 	.word	0x08007bc5
 8007b64:	08007bcf 	.word	0x08007bcf
 8007b68:	08007bbb 	.word	0x08007bbb
 8007b6c:	08007bcf 	.word	0x08007bcf
 8007b70:	08007b8f 	.word	0x08007b8f
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007bcf 	.word	0x08007bcf
 8007b7c:	08007ba7 	.word	0x08007ba7
 8007b80:	08007b99 	.word	0x08007b99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f9de 	bl	8007f48 <USBD_GetDescriptor>
          break;
 8007b8c:	e024      	b.n	8007bd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb6d 	bl	8008270 <USBD_SetAddress>
          break;
 8007b96:	e01f      	b.n	8007bd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fbac 	bl	80082f8 <USBD_SetConfig>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8007ba4:	e018      	b.n	8007bd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fc4b 	bl	8008444 <USBD_GetConfig>
          break;
 8007bae:	e013      	b.n	8007bd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fc7c 	bl	80084b0 <USBD_GetStatus>
          break;
 8007bb8:	e00e      	b.n	8007bd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fcab 	bl	8008518 <USBD_SetFeature>
          break;
 8007bc2:	e009      	b.n	8007bd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fcba 	bl	8008540 <USBD_ClrFeature>
          break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fd11 	bl	80085f8 <USBD_CtlError>
          break;
 8007bd6:	bf00      	nop
      }
      break;
 8007bd8:	e004      	b.n	8007be4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fd0b 	bl	80085f8 <USBD_CtlError>
      break;
 8007be2:	bf00      	nop
  }

  return ret;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop

08007bf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c06:	2b40      	cmp	r3, #64	; 0x40
 8007c08:	d005      	beq.n	8007c16 <USBD_StdItfReq+0x26>
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d82f      	bhi.n	8007c6e <USBD_StdItfReq+0x7e>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <USBD_StdItfReq+0x26>
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d12b      	bne.n	8007c6e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d81d      	bhi.n	8007c60 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	889b      	ldrh	r3, [r3, #4]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d813      	bhi.n	8007c56 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	4798      	blx	r3
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d110      	bne.n	8007c6a <USBD_StdItfReq+0x7a>
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fd9d 	bl	800878e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c54:	e009      	b.n	8007c6a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fccd 	bl	80085f8 <USBD_CtlError>
          break;
 8007c5e:	e004      	b.n	8007c6a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fcc8 	bl	80085f8 <USBD_CtlError>
          break;
 8007c68:	e000      	b.n	8007c6c <USBD_StdItfReq+0x7c>
          break;
 8007c6a:	bf00      	nop
      }
      break;
 8007c6c:	e004      	b.n	8007c78 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fcc1 	bl	80085f8 <USBD_CtlError>
      break;
 8007c76:	bf00      	nop
  }

  return ret;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	889b      	ldrh	r3, [r3, #4]
 8007c94:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d007      	beq.n	8007cb2 <USBD_StdEPReq+0x30>
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	f200 8145 	bhi.w	8007f32 <USBD_StdEPReq+0x2b0>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00c      	beq.n	8007cc6 <USBD_StdEPReq+0x44>
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	f040 8140 	bne.w	8007f32 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e13a      	b.n	8007f3c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d007      	beq.n	8007cde <USBD_StdEPReq+0x5c>
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f300 8129 	bgt.w	8007f26 <USBD_StdEPReq+0x2a4>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d07f      	beq.n	8007dd8 <USBD_StdEPReq+0x156>
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d03c      	beq.n	8007d56 <USBD_StdEPReq+0xd4>
 8007cdc:	e123      	b.n	8007f26 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d002      	beq.n	8007cf0 <USBD_StdEPReq+0x6e>
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d016      	beq.n	8007d1c <USBD_StdEPReq+0x9a>
 8007cee:	e02c      	b.n	8007d4a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <USBD_StdEPReq+0x90>
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b80      	cmp	r3, #128	; 0x80
 8007cfa:	d00a      	beq.n	8007d12 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f003 fea1 	bl	800ba48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f003 fe9d 	bl	800ba48 <USBD_LL_StallEP>
 8007d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d10:	e020      	b.n	8007d54 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc6f 	bl	80085f8 <USBD_CtlError>
              break;
 8007d1a:	e01b      	b.n	8007d54 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10e      	bne.n	8007d42 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <USBD_StdEPReq+0xc0>
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	2b80      	cmp	r3, #128	; 0x80
 8007d2e:	d008      	beq.n	8007d42 <USBD_StdEPReq+0xc0>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	88db      	ldrh	r3, [r3, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f003 fe83 	bl	800ba48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fd23 	bl	800878e <USBD_CtlSendStatus>

              break;
 8007d48:	e004      	b.n	8007d54 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fc53 	bl	80085f8 <USBD_CtlError>
              break;
 8007d52:	bf00      	nop
          }
          break;
 8007d54:	e0ec      	b.n	8007f30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d002      	beq.n	8007d68 <USBD_StdEPReq+0xe6>
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d016      	beq.n	8007d94 <USBD_StdEPReq+0x112>
 8007d66:	e030      	b.n	8007dca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00d      	beq.n	8007d8a <USBD_StdEPReq+0x108>
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b80      	cmp	r3, #128	; 0x80
 8007d72:	d00a      	beq.n	8007d8a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f003 fe65 	bl	800ba48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d7e:	2180      	movs	r1, #128	; 0x80
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f003 fe61 	bl	800ba48 <USBD_LL_StallEP>
 8007d86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d88:	e025      	b.n	8007dd6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fc33 	bl	80085f8 <USBD_CtlError>
              break;
 8007d92:	e020      	b.n	8007dd6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	885b      	ldrh	r3, [r3, #2]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d11b      	bne.n	8007dd4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f003 fe6b 	bl	800ba86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fcec 	bl	800878e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007dc8:	e004      	b.n	8007dd4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc13 	bl	80085f8 <USBD_CtlError>
              break;
 8007dd2:	e000      	b.n	8007dd6 <USBD_StdEPReq+0x154>
              break;
 8007dd4:	bf00      	nop
          }
          break;
 8007dd6:	e0ab      	b.n	8007f30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d002      	beq.n	8007dea <USBD_StdEPReq+0x168>
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d032      	beq.n	8007e4e <USBD_StdEPReq+0x1cc>
 8007de8:	e097      	b.n	8007f1a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <USBD_StdEPReq+0x17e>
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	2b80      	cmp	r3, #128	; 0x80
 8007df4:	d004      	beq.n	8007e00 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fbfd 	bl	80085f8 <USBD_CtlError>
                break;
 8007dfe:	e091      	b.n	8007f24 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da0b      	bge.n	8007e20 <USBD_StdEPReq+0x19e>
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	3310      	adds	r3, #16
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	e00b      	b.n	8007e38 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	3304      	adds	r3, #4
 8007e38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2202      	movs	r2, #2
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fc47 	bl	80086da <USBD_CtlSendData>
              break;
 8007e4c:	e06a      	b.n	8007f24 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da11      	bge.n	8007e7a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	f003 020f 	and.w	r2, r3, #15
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	440b      	add	r3, r1
 8007e68:	3324      	adds	r3, #36	; 0x24
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d117      	bne.n	8007ea0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fbc0 	bl	80085f8 <USBD_CtlError>
                  break;
 8007e78:	e054      	b.n	8007f24 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	f003 020f 	and.w	r2, r3, #15
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fbad 	bl	80085f8 <USBD_CtlError>
                  break;
 8007e9e:	e041      	b.n	8007f24 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da0b      	bge.n	8007ec0 <USBD_StdEPReq+0x23e>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	3310      	adds	r3, #16
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	e00b      	b.n	8007ed8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <USBD_StdEPReq+0x264>
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d103      	bne.n	8007eee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e00e      	b.n	8007f0c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f003 fde6 	bl	800bac4 <USBD_LL_IsStallEP>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e002      	b.n	8007f0c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fbe1 	bl	80086da <USBD_CtlSendData>
              break;
 8007f18:	e004      	b.n	8007f24 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fb6b 	bl	80085f8 <USBD_CtlError>
              break;
 8007f22:	bf00      	nop
          }
          break;
 8007f24:	e004      	b.n	8007f30 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb65 	bl	80085f8 <USBD_CtlError>
          break;
 8007f2e:	bf00      	nop
      }
      break;
 8007f30:	e004      	b.n	8007f3c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fb5f 	bl	80085f8 <USBD_CtlError>
      break;
 8007f3a:	bf00      	nop
  }

  return ret;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	2b0e      	cmp	r3, #14
 8007f6a:	f200 8152 	bhi.w	8008212 <USBD_GetDescriptor+0x2ca>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <USBD_GetDescriptor+0x2c>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007fe5 	.word	0x08007fe5
 8007f78:	08007ffd 	.word	0x08007ffd
 8007f7c:	0800803d 	.word	0x0800803d
 8007f80:	08008213 	.word	0x08008213
 8007f84:	08008213 	.word	0x08008213
 8007f88:	080081b3 	.word	0x080081b3
 8007f8c:	080081df 	.word	0x080081df
 8007f90:	08008213 	.word	0x08008213
 8007f94:	08008213 	.word	0x08008213
 8007f98:	08008213 	.word	0x08008213
 8007f9c:	08008213 	.word	0x08008213
 8007fa0:	08008213 	.word	0x08008213
 8007fa4:	08008213 	.word	0x08008213
 8007fa8:	08008213 	.word	0x08008213
 8007fac:	08007fb1 	.word	0x08007fb1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	7c12      	ldrb	r2, [r2, #16]
 8007fc8:	f107 0108 	add.w	r1, r7, #8
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
 8007fd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fd2:	e126      	b.n	8008222 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb0e 	bl	80085f8 <USBD_CtlError>
        err++;
 8007fdc:	7afb      	ldrb	r3, [r7, #11]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	72fb      	strb	r3, [r7, #11]
      break;
 8007fe2:	e11e      	b.n	8008222 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	7c12      	ldrb	r2, [r2, #16]
 8007ff0:	f107 0108 	add.w	r1, r7, #8
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4798      	blx	r3
 8007ff8:	60f8      	str	r0, [r7, #12]
      break;
 8007ffa:	e112      	b.n	8008222 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7c1b      	ldrb	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10d      	bne.n	8008020 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	f107 0208 	add.w	r2, r7, #8
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	2202      	movs	r2, #2
 800801c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800801e:	e100      	b.n	8008222 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	f107 0208 	add.w	r2, r7, #8
 800802c:	4610      	mov	r0, r2
 800802e:	4798      	blx	r3
 8008030:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3301      	adds	r3, #1
 8008036:	2202      	movs	r2, #2
 8008038:	701a      	strb	r2, [r3, #0]
      break;
 800803a:	e0f2      	b.n	8008222 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	885b      	ldrh	r3, [r3, #2]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b05      	cmp	r3, #5
 8008044:	f200 80ac 	bhi.w	80081a0 <USBD_GetDescriptor+0x258>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <USBD_GetDescriptor+0x108>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008069 	.word	0x08008069
 8008054:	0800809d 	.word	0x0800809d
 8008058:	080080d1 	.word	0x080080d1
 800805c:	08008105 	.word	0x08008105
 8008060:	08008139 	.word	0x08008139
 8008064:	0800816d 	.word	0x0800816d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	7c12      	ldrb	r2, [r2, #16]
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
 8008088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808a:	e091      	b.n	80081b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fab2 	bl	80085f8 <USBD_CtlError>
            err++;
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	3301      	adds	r3, #1
 8008098:	72fb      	strb	r3, [r7, #11]
          break;
 800809a:	e089      	b.n	80081b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7c12      	ldrb	r2, [r2, #16]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080be:	e077      	b.n	80081b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa98 	bl	80085f8 <USBD_CtlError>
            err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
          break;
 80080ce:	e06f      	b.n	80081b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	7c12      	ldrb	r2, [r2, #16]
 80080e8:	f107 0108 	add.w	r1, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f2:	e05d      	b.n	80081b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa7e 	bl	80085f8 <USBD_CtlError>
            err++;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	3301      	adds	r3, #1
 8008100:	72fb      	strb	r3, [r7, #11]
          break;
 8008102:	e055      	b.n	80081b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	f107 0108 	add.w	r1, r7, #8
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008126:	e043      	b.n	80081b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa64 	bl	80085f8 <USBD_CtlError>
            err++;
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	3301      	adds	r3, #1
 8008134:	72fb      	strb	r3, [r7, #11]
          break;
 8008136:	e03b      	b.n	80081b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	7c12      	ldrb	r2, [r2, #16]
 8008150:	f107 0108 	add.w	r1, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815a:	e029      	b.n	80081b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa4a 	bl	80085f8 <USBD_CtlError>
            err++;
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	3301      	adds	r3, #1
 8008168:	72fb      	strb	r3, [r7, #11]
          break;
 800816a:	e021      	b.n	80081b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	7c12      	ldrb	r2, [r2, #16]
 8008184:	f107 0108 	add.w	r1, r7, #8
 8008188:	4610      	mov	r0, r2
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818e:	e00f      	b.n	80081b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa30 	bl	80085f8 <USBD_CtlError>
            err++;
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	3301      	adds	r3, #1
 800819c:	72fb      	strb	r3, [r7, #11]
          break;
 800819e:	e007      	b.n	80081b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa28 	bl	80085f8 <USBD_CtlError>
          err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80081ae:	bf00      	nop
      }
      break;
 80081b0:	e037      	b.n	8008222 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	7c1b      	ldrb	r3, [r3, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c2:	f107 0208 	add.w	r2, r7, #8
 80081c6:	4610      	mov	r0, r2
 80081c8:	4798      	blx	r3
 80081ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081cc:	e029      	b.n	8008222 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fa11 	bl	80085f8 <USBD_CtlError>
        err++;
 80081d6:	7afb      	ldrb	r3, [r7, #11]
 80081d8:	3301      	adds	r3, #1
 80081da:	72fb      	strb	r3, [r7, #11]
      break;
 80081dc:	e021      	b.n	8008222 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	7c1b      	ldrb	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	f107 0208 	add.w	r2, r7, #8
 80081f2:	4610      	mov	r0, r2
 80081f4:	4798      	blx	r3
 80081f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3301      	adds	r3, #1
 80081fc:	2207      	movs	r2, #7
 80081fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008200:	e00f      	b.n	8008222 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f9f7 	bl	80085f8 <USBD_CtlError>
        err++;
 800820a:	7afb      	ldrb	r3, [r7, #11]
 800820c:	3301      	adds	r3, #1
 800820e:	72fb      	strb	r3, [r7, #11]
      break;
 8008210:	e007      	b.n	8008222 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f9ef 	bl	80085f8 <USBD_CtlError>
      err++;
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	3301      	adds	r3, #1
 800821e:	72fb      	strb	r3, [r7, #11]
      break;
 8008220:	bf00      	nop
  }

  if (err != 0U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d11e      	bne.n	8008266 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	88db      	ldrh	r3, [r3, #6]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d016      	beq.n	800825e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008230:	893b      	ldrh	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00e      	beq.n	8008254 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	88da      	ldrh	r2, [r3, #6]
 800823a:	893b      	ldrh	r3, [r7, #8]
 800823c:	4293      	cmp	r3, r2
 800823e:	bf28      	it	cs
 8008240:	4613      	movcs	r3, r2
 8008242:	b29b      	uxth	r3, r3
 8008244:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008246:	893b      	ldrh	r3, [r7, #8]
 8008248:	461a      	mov	r2, r3
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fa44 	bl	80086da <USBD_CtlSendData>
 8008252:	e009      	b.n	8008268 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f9ce 	bl	80085f8 <USBD_CtlError>
 800825c:	e004      	b.n	8008268 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa95 	bl	800878e <USBD_CtlSendStatus>
 8008264:	e000      	b.n	8008268 <USBD_GetDescriptor+0x320>
    return;
 8008266:	bf00      	nop
  }
}
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop

08008270 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d131      	bne.n	80082e6 <USBD_SetAddress+0x76>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	88db      	ldrh	r3, [r3, #6]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d12d      	bne.n	80082e6 <USBD_SetAddress+0x76>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	2b7f      	cmp	r3, #127	; 0x7f
 8008290:	d829      	bhi.n	80082e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	885b      	ldrh	r3, [r3, #2]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d104      	bne.n	80082b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f9a3 	bl	80085f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b2:	e01d      	b.n	80082f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	7bfa      	ldrb	r2, [r7, #15]
 80082b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f003 fc2b 	bl	800bb1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa61 	bl	800878e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082da:	e009      	b.n	80082f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e4:	e004      	b.n	80082f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f985 	bl	80085f8 <USBD_CtlError>
  }
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	885b      	ldrh	r3, [r3, #2]
 800830a:	b2da      	uxtb	r2, r3
 800830c:	4b4c      	ldr	r3, [pc, #304]	; (8008440 <USBD_SetConfig+0x148>)
 800830e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008310:	4b4b      	ldr	r3, [pc, #300]	; (8008440 <USBD_SetConfig+0x148>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d905      	bls.n	8008324 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f96c 	bl	80085f8 <USBD_CtlError>
    return USBD_FAIL;
 8008320:	2303      	movs	r3, #3
 8008322:	e088      	b.n	8008436 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d002      	beq.n	8008336 <USBD_SetConfig+0x3e>
 8008330:	2b03      	cmp	r3, #3
 8008332:	d025      	beq.n	8008380 <USBD_SetConfig+0x88>
 8008334:	e071      	b.n	800841a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008336:	4b42      	ldr	r3, [pc, #264]	; (8008440 <USBD_SetConfig+0x148>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01c      	beq.n	8008378 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800833e:	4b40      	ldr	r3, [pc, #256]	; (8008440 <USBD_SetConfig+0x148>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008348:	4b3d      	ldr	r3, [pc, #244]	; (8008440 <USBD_SetConfig+0x148>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff f992 	bl	8007678 <USBD_SetClassConfig>
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d004      	beq.n	8008368 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f949 	bl	80085f8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008366:	e065      	b.n	8008434 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fa10 	bl	800878e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2203      	movs	r2, #3
 8008372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008376:	e05d      	b.n	8008434 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fa08 	bl	800878e <USBD_CtlSendStatus>
      break;
 800837e:	e059      	b.n	8008434 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008380:	4b2f      	ldr	r3, [pc, #188]	; (8008440 <USBD_SetConfig+0x148>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d112      	bne.n	80083ae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008390:	4b2b      	ldr	r3, [pc, #172]	; (8008440 <USBD_SetConfig+0x148>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800839a:	4b29      	ldr	r3, [pc, #164]	; (8008440 <USBD_SetConfig+0x148>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff f985 	bl	80076b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9f1 	bl	800878e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083ac:	e042      	b.n	8008434 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80083ae:	4b24      	ldr	r3, [pc, #144]	; (8008440 <USBD_SetConfig+0x148>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d02a      	beq.n	8008412 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff f973 	bl	80076b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083ca:	4b1d      	ldr	r3, [pc, #116]	; (8008440 <USBD_SetConfig+0x148>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083d4:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <USBD_SetConfig+0x148>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff f94c 	bl	8007678 <USBD_SetClassConfig>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00f      	beq.n	800840a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f903 	bl	80085f8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff f958 	bl	80076b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008408:	e014      	b.n	8008434 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f9bf 	bl	800878e <USBD_CtlSendStatus>
      break;
 8008410:	e010      	b.n	8008434 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f9bb 	bl	800878e <USBD_CtlSendStatus>
      break;
 8008418:	e00c      	b.n	8008434 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f8eb 	bl	80085f8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <USBD_SetConfig+0x148>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff f941 	bl	80076b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800842e:	2303      	movs	r3, #3
 8008430:	73fb      	strb	r3, [r7, #15]
      break;
 8008432:	bf00      	nop
  }

  return ret;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	200004d0 	.word	0x200004d0

08008444 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	88db      	ldrh	r3, [r3, #6]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d004      	beq.n	8008460 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f8cd 	bl	80085f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800845e:	e023      	b.n	80084a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	dc02      	bgt.n	8008472 <USBD_GetConfig+0x2e>
 800846c:	2b00      	cmp	r3, #0
 800846e:	dc03      	bgt.n	8008478 <USBD_GetConfig+0x34>
 8008470:	e015      	b.n	800849e <USBD_GetConfig+0x5a>
 8008472:	2b03      	cmp	r3, #3
 8008474:	d00b      	beq.n	800848e <USBD_GetConfig+0x4a>
 8008476:	e012      	b.n	800849e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3308      	adds	r3, #8
 8008482:	2201      	movs	r2, #1
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f927 	bl	80086da <USBD_CtlSendData>
        break;
 800848c:	e00c      	b.n	80084a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3304      	adds	r3, #4
 8008492:	2201      	movs	r2, #1
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f91f 	bl	80086da <USBD_CtlSendData>
        break;
 800849c:	e004      	b.n	80084a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f8a9 	bl	80085f8 <USBD_CtlError>
        break;
 80084a6:	bf00      	nop
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d81e      	bhi.n	8008506 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	88db      	ldrh	r3, [r3, #6]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d004      	beq.n	80084da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f890 	bl	80085f8 <USBD_CtlError>
        break;
 80084d8:	e01a      	b.n	8008510 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f043 0202 	orr.w	r2, r3, #2
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	330c      	adds	r3, #12
 80084fa:	2202      	movs	r2, #2
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8eb 	bl	80086da <USBD_CtlSendData>
      break;
 8008504:	e004      	b.n	8008510 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f875 	bl	80085f8 <USBD_CtlError>
      break;
 800850e:	bf00      	nop
  }
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	885b      	ldrh	r3, [r3, #2]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d106      	bne.n	8008538 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f92b 	bl	800878e <USBD_CtlSendStatus>
  }
}
 8008538:	bf00      	nop
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	b2db      	uxtb	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	2b02      	cmp	r3, #2
 8008556:	d80b      	bhi.n	8008570 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d10c      	bne.n	800857a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f910 	bl	800878e <USBD_CtlSendStatus>
      }
      break;
 800856e:	e004      	b.n	800857a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f840 	bl	80085f8 <USBD_CtlError>
      break;
 8008578:	e000      	b.n	800857c <USBD_ClrFeature+0x3c>
      break;
 800857a:	bf00      	nop
  }
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3301      	adds	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3301      	adds	r3, #1
 80085ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fa92 	bl	8007ad8 <SWAPBYTE>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3301      	adds	r3, #1
 80085c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff fa85 	bl	8007ad8 <SWAPBYTE>
 80085ce:	4603      	mov	r3, r0
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3301      	adds	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fa78 	bl	8007ad8 <SWAPBYTE>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	80da      	strh	r2, [r3, #6]
}
 80085f0:	bf00      	nop
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008602:	2180      	movs	r1, #128	; 0x80
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f003 fa1f 	bl	800ba48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800860a:	2100      	movs	r1, #0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f003 fa1b 	bl	800ba48 <USBD_LL_StallEP>
}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b086      	sub	sp, #24
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d036      	beq.n	800869e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008634:	6938      	ldr	r0, [r7, #16]
 8008636:	f000 f836 	bl	80086a6 <USBD_GetLen>
 800863a:	4603      	mov	r3, r0
 800863c:	3301      	adds	r3, #1
 800863e:	b29b      	uxth	r3, r3
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	7812      	ldrb	r2, [r2, #0]
 8008652:	701a      	strb	r2, [r3, #0]
  idx++;
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	3301      	adds	r3, #1
 8008658:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	4413      	add	r3, r2
 8008660:	2203      	movs	r2, #3
 8008662:	701a      	strb	r2, [r3, #0]
  idx++;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	3301      	adds	r3, #1
 8008668:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800866a:	e013      	b.n	8008694 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	4413      	add	r3, r2
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	7812      	ldrb	r2, [r2, #0]
 8008676:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	3301      	adds	r3, #1
 800867c:	613b      	str	r3, [r7, #16]
    idx++;
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	3301      	adds	r3, #1
 8008682:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	4413      	add	r3, r2
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
    idx++;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	3301      	adds	r3, #1
 8008692:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e7      	bne.n	800866c <USBD_GetString+0x52>
 800869c:	e000      	b.n	80086a0 <USBD_GetString+0x86>
    return;
 800869e:	bf00      	nop
  }
}
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086b6:	e005      	b.n	80086c4 <USBD_GetLen+0x1e>
  {
    len++;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	3301      	adds	r3, #1
 80086bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1f5      	bne.n	80086b8 <USBD_GetLen+0x12>
  }

  return len;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2202      	movs	r2, #2
 80086ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	2100      	movs	r1, #0
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f003 fa2a 	bl	800bb5a <USBD_LL_Transmit>

  return USBD_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	2100      	movs	r1, #0
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f003 fa19 	bl	800bb5a <USBD_LL_Transmit>

  return USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2203      	movs	r2, #3
 8008742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	2100      	movs	r1, #0
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f003 fa1d 	bl	800bb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	2100      	movs	r1, #0
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f003 fa0c 	bl	800bb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2204      	movs	r2, #4
 800879a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800879e:	2300      	movs	r3, #0
 80087a0:	2200      	movs	r2, #0
 80087a2:	2100      	movs	r1, #0
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f003 f9d8 	bl	800bb5a <USBD_LL_Transmit>

  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2205      	movs	r2, #5
 80087c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087c4:	2300      	movs	r3, #0
 80087c6:	2200      	movs	r2, #0
 80087c8:	2100      	movs	r1, #0
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f003 f9e6 	bl	800bb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <__NVIC_SetPriority>:
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	db0a      	blt.n	8008806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	490c      	ldr	r1, [pc, #48]	; (8008828 <__NVIC_SetPriority+0x4c>)
 80087f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087fa:	0112      	lsls	r2, r2, #4
 80087fc:	b2d2      	uxtb	r2, r2
 80087fe:	440b      	add	r3, r1
 8008800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008804:	e00a      	b.n	800881c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4908      	ldr	r1, [pc, #32]	; (800882c <__NVIC_SetPriority+0x50>)
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	f003 030f 	and.w	r3, r3, #15
 8008812:	3b04      	subs	r3, #4
 8008814:	0112      	lsls	r2, r2, #4
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	440b      	add	r3, r1
 800881a:	761a      	strb	r2, [r3, #24]
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	e000e100 	.word	0xe000e100
 800882c:	e000ed00 	.word	0xe000ed00

08008830 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008834:	2100      	movs	r1, #0
 8008836:	f06f 0004 	mvn.w	r0, #4
 800883a:	f7ff ffcf 	bl	80087dc <__NVIC_SetPriority>
#endif
}
 800883e:	bf00      	nop
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800884a:	f3ef 8305 	mrs	r3, IPSR
 800884e:	603b      	str	r3, [r7, #0]
  return(result);
 8008850:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008856:	f06f 0305 	mvn.w	r3, #5
 800885a:	607b      	str	r3, [r7, #4]
 800885c:	e00c      	b.n	8008878 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800885e:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <osKernelInitialize+0x44>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d105      	bne.n	8008872 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008866:	4b08      	ldr	r3, [pc, #32]	; (8008888 <osKernelInitialize+0x44>)
 8008868:	2201      	movs	r2, #1
 800886a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800886c:	2300      	movs	r3, #0
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	e002      	b.n	8008878 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008872:	f04f 33ff 	mov.w	r3, #4294967295
 8008876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008878:	687b      	ldr	r3, [r7, #4]
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	200004d4 	.word	0x200004d4

0800888c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008892:	f3ef 8305 	mrs	r3, IPSR
 8008896:	603b      	str	r3, [r7, #0]
  return(result);
 8008898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800889e:	f06f 0305 	mvn.w	r3, #5
 80088a2:	607b      	str	r3, [r7, #4]
 80088a4:	e010      	b.n	80088c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <osKernelStart+0x48>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d109      	bne.n	80088c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088ae:	f7ff ffbf 	bl	8008830 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <osKernelStart+0x48>)
 80088b4:	2202      	movs	r2, #2
 80088b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088b8:	f001 f87c 	bl	80099b4 <vTaskStartScheduler>
      stat = osOK;
 80088bc:	2300      	movs	r3, #0
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	e002      	b.n	80088c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088c8:	687b      	ldr	r3, [r7, #4]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	200004d4 	.word	0x200004d4

080088d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08e      	sub	sp, #56	; 0x38
 80088dc:	af04      	add	r7, sp, #16
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e8:	f3ef 8305 	mrs	r3, IPSR
 80088ec:	617b      	str	r3, [r7, #20]
  return(result);
 80088ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d17e      	bne.n	80089f2 <osThreadNew+0x11a>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d07b      	beq.n	80089f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80088fa:	2380      	movs	r3, #128	; 0x80
 80088fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80088fe:	2318      	movs	r3, #24
 8008900:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008906:	f04f 33ff 	mov.w	r3, #4294967295
 800890a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d045      	beq.n	800899e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <osThreadNew+0x48>
        name = attr->name;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d008      	beq.n	8008946 <osThreadNew+0x6e>
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	2b38      	cmp	r3, #56	; 0x38
 8008938:	d805      	bhi.n	8008946 <osThreadNew+0x6e>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <osThreadNew+0x72>
        return (NULL);
 8008946:	2300      	movs	r3, #0
 8008948:	e054      	b.n	80089f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <osThreadNew+0xa8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	2ba7      	cmp	r3, #167	; 0xa7
 8008968:	d90a      	bls.n	8008980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800896e:	2b00      	cmp	r3, #0
 8008970:	d006      	beq.n	8008980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <osThreadNew+0xa8>
        mem = 1;
 800897a:	2301      	movs	r3, #1
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	e010      	b.n	80089a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10c      	bne.n	80089a2 <osThreadNew+0xca>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d108      	bne.n	80089a2 <osThreadNew+0xca>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <osThreadNew+0xca>
          mem = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	e001      	b.n	80089a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d110      	bne.n	80089ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089b0:	9202      	str	r2, [sp, #8]
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	6a3a      	ldr	r2, [r7, #32]
 80089bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fe0c 	bl	80095dc <xTaskCreateStatic>
 80089c4:	4603      	mov	r3, r0
 80089c6:	613b      	str	r3, [r7, #16]
 80089c8:	e013      	b.n	80089f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d110      	bne.n	80089f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	f107 0310 	add.w	r3, r7, #16
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 fe57 	bl	8009696 <xTaskCreate>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d001      	beq.n	80089f2 <osThreadNew+0x11a>
            hTask = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80089f2:	693b      	ldr	r3, [r7, #16]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3728      	adds	r7, #40	; 0x28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a04:	f3ef 8305 	mrs	r3, IPSR
 8008a08:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <osDelay+0x1c>
    stat = osErrorISR;
 8008a10:	f06f 0305 	mvn.w	r3, #5
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e007      	b.n	8008a28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 ff92 	bl	800994c <vTaskDelay>
    }
  }

  return (stat);
 8008a28:	68fb      	ldr	r3, [r7, #12]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4a07      	ldr	r2, [pc, #28]	; (8008a60 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	4a06      	ldr	r2, [pc, #24]	; (8008a64 <vApplicationGetIdleTaskMemory+0x30>)
 8008a4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2280      	movs	r2, #128	; 0x80
 8008a50:	601a      	str	r2, [r3, #0]
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	200004d8 	.word	0x200004d8
 8008a64:	20000580 	.word	0x20000580

08008a68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4a07      	ldr	r2, [pc, #28]	; (8008a94 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	4a06      	ldr	r2, [pc, #24]	; (8008a98 <vApplicationGetTimerTaskMemory+0x30>)
 8008a7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a86:	601a      	str	r2, [r3, #0]
}
 8008a88:	bf00      	nop
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	20000780 	.word	0x20000780
 8008a98:	20000828 	.word	0x20000828

08008a9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f103 0208 	add.w	r2, r3, #8
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f103 0208 	add.w	r2, r3, #8
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f103 0208 	add.w	r2, r3, #8
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	601a      	str	r2, [r3, #0]
}
 8008b32:	bf00      	nop
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b54:	d103      	bne.n	8008b5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	e00c      	b.n	8008b78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3308      	adds	r3, #8
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e002      	b.n	8008b6c <vListInsert+0x2e>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d2f6      	bcs.n	8008b66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6892      	ldr	r2, [r2, #8]
 8008bc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6852      	ldr	r2, [r2, #4]
 8008bd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d103      	bne.n	8008be4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c2e:	f002 f879 	bl	800ad24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	68f9      	ldr	r1, [r7, #12]
 8008c3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c3e:	fb01 f303 	mul.w	r3, r1, r3
 8008c42:	441a      	add	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	68f9      	ldr	r1, [r7, #12]
 8008c62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c64:	fb01 f303 	mul.w	r3, r1, r3
 8008c68:	441a      	add	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	22ff      	movs	r2, #255	; 0xff
 8008c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	22ff      	movs	r2, #255	; 0xff
 8008c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d114      	bne.n	8008cae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01a      	beq.n	8008cc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3310      	adds	r3, #16
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 f929 	bl	8009ee8 <xTaskRemoveFromEventList>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d012      	beq.n	8008cc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c9c:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <xQueueGenericReset+0xcc>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	e009      	b.n	8008cc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3310      	adds	r3, #16
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fef2 	bl	8008a9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3324      	adds	r3, #36	; 0x24
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff feed 	bl	8008a9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008cc2:	f002 f85f 	bl	800ad84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008cc6:	2301      	movs	r3, #1
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08e      	sub	sp, #56	; 0x38
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cfa:	bf00      	nop
 8008cfc:	e7fe      	b.n	8008cfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <xQueueGenericCreateStatic+0x52>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <xQueueGenericCreateStatic+0x56>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e000      	b.n	8008d2c <xQueueGenericCreateStatic+0x58>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	623b      	str	r3, [r7, #32]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <xQueueGenericCreateStatic+0x7e>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <xQueueGenericCreateStatic+0x82>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <xQueueGenericCreateStatic+0x84>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	61fb      	str	r3, [r7, #28]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d72:	2350      	movs	r3, #80	; 0x50
 8008d74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b50      	cmp	r3, #80	; 0x50
 8008d7a:	d00a      	beq.n	8008d92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	61bb      	str	r3, [r7, #24]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00d      	beq.n	8008dba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008da6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	4613      	mov	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f805 	bl	8008dc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3730      	adds	r7, #48	; 0x30
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008df2:	2101      	movs	r1, #1
 8008df4:	69b8      	ldr	r0, [r7, #24]
 8008df6:	f7ff ff05 	bl	8008c04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	78fa      	ldrb	r2, [r7, #3]
 8008dfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08e      	sub	sp, #56	; 0x38
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xQueueGenericSend+0x32>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d103      	bne.n	8008e4c <xQueueGenericSend+0x40>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <xQueueGenericSend+0x44>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <xQueueGenericSend+0x46>
 8008e50:	2300      	movs	r3, #0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <xQueueGenericSend+0x60>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d103      	bne.n	8008e7a <xQueueGenericSend+0x6e>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <xQueueGenericSend+0x72>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <xQueueGenericSend+0x74>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10a      	bne.n	8008e9a <xQueueGenericSend+0x8e>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	623b      	str	r3, [r7, #32]
}
 8008e96:	bf00      	nop
 8008e98:	e7fe      	b.n	8008e98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e9a:	f001 f9e7 	bl	800a26c <xTaskGetSchedulerState>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <xQueueGenericSend+0x9e>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <xQueueGenericSend+0xa2>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e000      	b.n	8008eb0 <xQueueGenericSend+0xa4>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xQueueGenericSend+0xbe>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	61fb      	str	r3, [r7, #28]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008eca:	f001 ff2b 	bl	800ad24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d302      	bcc.n	8008ee0 <xQueueGenericSend+0xd4>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d129      	bne.n	8008f34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ee6:	f000 fa0b 	bl	8009300 <prvCopyDataToQueue>
 8008eea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d010      	beq.n	8008f16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	3324      	adds	r3, #36	; 0x24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fff5 	bl	8009ee8 <xTaskRemoveFromEventList>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d013      	beq.n	8008f2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f04:	4b3f      	ldr	r3, [pc, #252]	; (8009004 <xQueueGenericSend+0x1f8>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	e00a      	b.n	8008f2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f1c:	4b39      	ldr	r3, [pc, #228]	; (8009004 <xQueueGenericSend+0x1f8>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f2c:	f001 ff2a 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e063      	b.n	8008ffc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f3a:	f001 ff23 	bl	800ad84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e05c      	b.n	8008ffc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 f82f 	bl	8009fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f52:	2301      	movs	r3, #1
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f56:	f001 ff15 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f5a:	f000 fd9b 	bl	8009a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f5e:	f001 fee1 	bl	800ad24 <vPortEnterCritical>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f68:	b25b      	sxtb	r3, r3
 8008f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6e:	d103      	bne.n	8008f78 <xQueueGenericSend+0x16c>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d103      	bne.n	8008f8e <xQueueGenericSend+0x182>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f8e:	f001 fef9 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f92:	1d3a      	adds	r2, r7, #4
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 f81e 	bl	8009fdc <xTaskCheckForTimeOut>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d124      	bne.n	8008ff0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fa8:	f000 faa2 	bl	80094f0 <prvIsQueueFull>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d018      	beq.n	8008fe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	3310      	adds	r3, #16
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 ff44 	bl	8009e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fc2:	f000 fa2d 	bl	8009420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008fc6:	f000 fd73 	bl	8009ab0 <xTaskResumeAll>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f47f af7c 	bne.w	8008eca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008fd2:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <xQueueGenericSend+0x1f8>)
 8008fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	e772      	b.n	8008eca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fe6:	f000 fa1b 	bl	8009420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fea:	f000 fd61 	bl	8009ab0 <xTaskResumeAll>
 8008fee:	e76c      	b.n	8008eca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ff2:	f000 fa15 	bl	8009420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ff6:	f000 fd5b 	bl	8009ab0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ffa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3738      	adds	r7, #56	; 0x38
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	e000ed04 	.word	0xe000ed04

08009008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b090      	sub	sp, #64	; 0x40
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d103      	bne.n	8009044 <xQueueGenericSendFromISR+0x3c>
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <xQueueGenericSendFromISR+0x40>
 8009044:	2301      	movs	r3, #1
 8009046:	e000      	b.n	800904a <xQueueGenericSendFromISR+0x42>
 8009048:	2300      	movs	r3, #0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d103      	bne.n	8009072 <xQueueGenericSendFromISR+0x6a>
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906e:	2b01      	cmp	r3, #1
 8009070:	d101      	bne.n	8009076 <xQueueGenericSendFromISR+0x6e>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <xQueueGenericSendFromISR+0x70>
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	623b      	str	r3, [r7, #32]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009092:	f001 ff29 	bl	800aee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009096:	f3ef 8211 	mrs	r2, BASEPRI
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	61fa      	str	r2, [r7, #28]
 80090ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d302      	bcc.n	80090c4 <xQueueGenericSendFromISR+0xbc>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d12f      	bne.n	8009124 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090da:	f000 f911 	bl	8009300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d112      	bne.n	800910e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d016      	beq.n	800911e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	3324      	adds	r3, #36	; 0x24
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fef7 	bl	8009ee8 <xTaskRemoveFromEventList>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00e      	beq.n	800911e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	e007      	b.n	800911e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800910e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009112:	3301      	adds	r3, #1
 8009114:	b2db      	uxtb	r3, r3
 8009116:	b25a      	sxtb	r2, r3
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800911e:	2301      	movs	r3, #1
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009122:	e001      	b.n	8009128 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009124:	2300      	movs	r3, #0
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009132:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009136:	4618      	mov	r0, r3
 8009138:	3740      	adds	r7, #64	; 0x40
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08c      	sub	sp, #48	; 0x30
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800914c:	2300      	movs	r3, #0
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10a      	bne.n	8009170 <xQueueReceive+0x30>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	623b      	str	r3, [r7, #32]
}
 800916c:	bf00      	nop
 800916e:	e7fe      	b.n	800916e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <xQueueReceive+0x3e>
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <xQueueReceive+0x42>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <xQueueReceive+0x44>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueReceive+0x5e>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	61fb      	str	r3, [r7, #28]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800919e:	f001 f865 	bl	800a26c <xTaskGetSchedulerState>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d102      	bne.n	80091ae <xQueueReceive+0x6e>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <xQueueReceive+0x72>
 80091ae:	2301      	movs	r3, #1
 80091b0:	e000      	b.n	80091b4 <xQueueReceive+0x74>
 80091b2:	2300      	movs	r3, #0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <xQueueReceive+0x8e>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	61bb      	str	r3, [r7, #24]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091ce:	f001 fda9 	bl	800ad24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01f      	beq.n	800921e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e2:	f000 f8f7 	bl	80093d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	1e5a      	subs	r2, r3, #1
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00f      	beq.n	8009216 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	3310      	adds	r3, #16
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 fe74 	bl	8009ee8 <xTaskRemoveFromEventList>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d007      	beq.n	8009216 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009206:	4b3d      	ldr	r3, [pc, #244]	; (80092fc <xQueueReceive+0x1bc>)
 8009208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009216:	f001 fdb5 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 800921a:	2301      	movs	r3, #1
 800921c:	e069      	b.n	80092f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d103      	bne.n	800922c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009224:	f001 fdae 	bl	800ad84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009228:	2300      	movs	r3, #0
 800922a:	e062      	b.n	80092f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	4618      	mov	r0, r3
 8009238:	f000 feba 	bl	8009fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009240:	f001 fda0 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009244:	f000 fc26 	bl	8009a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009248:	f001 fd6c 	bl	800ad24 <vPortEnterCritical>
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009252:	b25b      	sxtb	r3, r3
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009258:	d103      	bne.n	8009262 <xQueueReceive+0x122>
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009268:	b25b      	sxtb	r3, r3
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926e:	d103      	bne.n	8009278 <xQueueReceive+0x138>
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009278:	f001 fd84 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800927c:	1d3a      	adds	r2, r7, #4
 800927e:	f107 0310 	add.w	r3, r7, #16
 8009282:	4611      	mov	r1, r2
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fea9 	bl	8009fdc <xTaskCheckForTimeOut>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d123      	bne.n	80092d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009292:	f000 f917 	bl	80094c4 <prvIsQueueEmpty>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d017      	beq.n	80092cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	3324      	adds	r3, #36	; 0x24
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fdcf 	bl	8009e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ac:	f000 f8b8 	bl	8009420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092b0:	f000 fbfe 	bl	8009ab0 <xTaskResumeAll>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d189      	bne.n	80091ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80092ba:	4b10      	ldr	r3, [pc, #64]	; (80092fc <xQueueReceive+0x1bc>)
 80092bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	e780      	b.n	80091ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80092cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ce:	f000 f8a7 	bl	8009420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092d2:	f000 fbed 	bl	8009ab0 <xTaskResumeAll>
 80092d6:	e77a      	b.n	80091ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80092d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092da:	f000 f8a1 	bl	8009420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092de:	f000 fbe7 	bl	8009ab0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e4:	f000 f8ee 	bl	80094c4 <prvIsQueueEmpty>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f43f af6f 	beq.w	80091ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3730      	adds	r7, #48	; 0x30
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	e000ed04 	.word	0xe000ed04

08009300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10d      	bne.n	800933a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d14d      	bne.n	80093c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 ffbc 	bl	800a2a8 <xTaskPriorityDisinherit>
 8009330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	609a      	str	r2, [r3, #8]
 8009338:	e043      	b.n	80093c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d119      	bne.n	8009374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6858      	ldr	r0, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	461a      	mov	r2, r3
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	f002 fd5e 	bl	800be0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009358:	441a      	add	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	d32b      	bcc.n	80093c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	605a      	str	r2, [r3, #4]
 8009372:	e026      	b.n	80093c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68d8      	ldr	r0, [r3, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937c:	461a      	mov	r2, r3
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	f002 fd44 	bl	800be0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938c:	425b      	negs	r3, r3
 800938e:	441a      	add	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d207      	bcs.n	80093b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	425b      	negs	r3, r3
 80093aa:	441a      	add	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d105      	bne.n	80093c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	3b01      	subs	r3, #1
 80093c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1c5a      	adds	r2, r3, #1
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80093ca:	697b      	ldr	r3, [r7, #20]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d018      	beq.n	8009418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	441a      	add	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d303      	bcc.n	8009408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68d9      	ldr	r1, [r3, #12]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009410:	461a      	mov	r2, r3
 8009412:	6838      	ldr	r0, [r7, #0]
 8009414:	f002 fcfa 	bl	800be0c <memcpy>
	}
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009428:	f001 fc7c 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009434:	e011      	b.n	800945a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	2b00      	cmp	r3, #0
 800943c:	d012      	beq.n	8009464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3324      	adds	r3, #36	; 0x24
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fd50 	bl	8009ee8 <xTaskRemoveFromEventList>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800944e:	f000 fe27 	bl	800a0a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	3b01      	subs	r3, #1
 8009456:	b2db      	uxtb	r3, r3
 8009458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800945a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800945e:	2b00      	cmp	r3, #0
 8009460:	dce9      	bgt.n	8009436 <prvUnlockQueue+0x16>
 8009462:	e000      	b.n	8009466 <prvUnlockQueue+0x46>
					break;
 8009464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	22ff      	movs	r2, #255	; 0xff
 800946a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800946e:	f001 fc89 	bl	800ad84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009472:	f001 fc57 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800947c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800947e:	e011      	b.n	80094a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d012      	beq.n	80094ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3310      	adds	r3, #16
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fd2b 	bl	8009ee8 <xTaskRemoveFromEventList>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009498:	f000 fe02 	bl	800a0a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	3b01      	subs	r3, #1
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dce9      	bgt.n	8009480 <prvUnlockQueue+0x60>
 80094ac:	e000      	b.n	80094b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	22ff      	movs	r2, #255	; 0xff
 80094b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80094b8:	f001 fc64 	bl	800ad84 <vPortExitCritical>
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094cc:	f001 fc2a 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094d8:	2301      	movs	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	e001      	b.n	80094e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094e2:	f001 fc4f 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 80094e6:	68fb      	ldr	r3, [r7, #12]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094f8:	f001 fc14 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009504:	429a      	cmp	r2, r3
 8009506:	d102      	bne.n	800950e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e001      	b.n	8009512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800950e:	2300      	movs	r3, #0
 8009510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009512:	f001 fc37 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 8009516:	68fb      	ldr	r3, [r7, #12]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	e014      	b.n	800955a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009530:	4a0f      	ldr	r2, [pc, #60]	; (8009570 <vQueueAddToRegistry+0x50>)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10b      	bne.n	8009554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800953c:	490c      	ldr	r1, [pc, #48]	; (8009570 <vQueueAddToRegistry+0x50>)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009546:	4a0a      	ldr	r2, [pc, #40]	; (8009570 <vQueueAddToRegistry+0x50>)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	4413      	add	r3, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009552:	e006      	b.n	8009562 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b07      	cmp	r3, #7
 800955e:	d9e7      	bls.n	8009530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009560:	bf00      	nop
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000c28 	.word	0x20000c28

08009574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009584:	f001 fbce 	bl	800ad24 <vPortEnterCritical>
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800958e:	b25b      	sxtb	r3, r3
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d103      	bne.n	800959e <vQueueWaitForMessageRestricted+0x2a>
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095a4:	b25b      	sxtb	r3, r3
 80095a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095aa:	d103      	bne.n	80095b4 <vQueueWaitForMessageRestricted+0x40>
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095b4:	f001 fbe6 	bl	800ad84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d106      	bne.n	80095ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	3324      	adds	r3, #36	; 0x24
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fc61 	bl	8009e90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80095ce:	6978      	ldr	r0, [r7, #20]
 80095d0:	f7ff ff26 	bl	8009420 <prvUnlockQueue>
	}
 80095d4:	bf00      	nop
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08e      	sub	sp, #56	; 0x38
 80095e0:	af04      	add	r7, sp, #16
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10a      	bne.n	8009606 <xTaskCreateStatic+0x2a>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	623b      	str	r3, [r7, #32]
}
 8009602:	bf00      	nop
 8009604:	e7fe      	b.n	8009604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xTaskCreateStatic+0x46>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	61fb      	str	r3, [r7, #28]
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009622:	23a8      	movs	r3, #168	; 0xa8
 8009624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2ba8      	cmp	r3, #168	; 0xa8
 800962a:	d00a      	beq.n	8009642 <xTaskCreateStatic+0x66>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	61bb      	str	r3, [r7, #24]
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009642:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009646:	2b00      	cmp	r3, #0
 8009648:	d01e      	beq.n	8009688 <xTaskCreateStatic+0xac>
 800964a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01b      	beq.n	8009688 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009658:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	2202      	movs	r2, #2
 800965e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009662:	2300      	movs	r3, #0
 8009664:	9303      	str	r3, [sp, #12]
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	f107 0314 	add.w	r3, r7, #20
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 f850 	bl	8009720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009682:	f000 f8f3 	bl	800986c <prvAddNewTaskToReadyList>
 8009686:	e001      	b.n	800968c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800968c:	697b      	ldr	r3, [r7, #20]
	}
 800968e:	4618      	mov	r0, r3
 8009690:	3728      	adds	r7, #40	; 0x28
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009696:	b580      	push	{r7, lr}
 8009698:	b08c      	sub	sp, #48	; 0x30
 800969a:	af04      	add	r7, sp, #16
 800969c:	60f8      	str	r0, [r7, #12]
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	603b      	str	r3, [r7, #0]
 80096a2:	4613      	mov	r3, r2
 80096a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096a6:	88fb      	ldrh	r3, [r7, #6]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 fc5c 	bl	800af68 <pvPortMalloc>
 80096b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00e      	beq.n	80096d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096b8:	20a8      	movs	r0, #168	; 0xa8
 80096ba:	f001 fc55 	bl	800af68 <pvPortMalloc>
 80096be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
 80096cc:	e005      	b.n	80096da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096ce:	6978      	ldr	r0, [r7, #20]
 80096d0:	f001 fd16 	bl	800b100 <vPortFree>
 80096d4:	e001      	b.n	80096da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d017      	beq.n	8009710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096e8:	88fa      	ldrh	r2, [r7, #6]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9303      	str	r3, [sp, #12]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	9302      	str	r3, [sp, #8]
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 f80e 	bl	8009720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009704:	69f8      	ldr	r0, [r7, #28]
 8009706:	f000 f8b1 	bl	800986c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800970a:	2301      	movs	r3, #1
 800970c:	61bb      	str	r3, [r7, #24]
 800970e:	e002      	b.n	8009716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009710:	f04f 33ff 	mov.w	r3, #4294967295
 8009714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009716:	69bb      	ldr	r3, [r7, #24]
	}
 8009718:	4618      	mov	r0, r3
 800971a:	3720      	adds	r7, #32
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	461a      	mov	r2, r3
 8009738:	21a5      	movs	r1, #165	; 0xa5
 800973a:	f002 fae3 	bl	800bd04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009748:	3b01      	subs	r3, #1
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	f023 0307 	bic.w	r3, r3, #7
 8009756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	617b      	str	r3, [r7, #20]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d01f      	beq.n	80097be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	e012      	b.n	80097aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	7819      	ldrb	r1, [r3, #0]
 800978c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4413      	add	r3, r2
 8009792:	3334      	adds	r3, #52	; 0x34
 8009794:	460a      	mov	r2, r1
 8009796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	4413      	add	r3, r2
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d006      	beq.n	80097b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	3301      	adds	r3, #1
 80097a8:	61fb      	str	r3, [r7, #28]
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	2b0f      	cmp	r3, #15
 80097ae:	d9e9      	bls.n	8009784 <prvInitialiseNewTask+0x64>
 80097b0:	e000      	b.n	80097b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80097b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097bc:	e003      	b.n	80097c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c8:	2b37      	cmp	r3, #55	; 0x37
 80097ca:	d901      	bls.n	80097d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097cc:	2337      	movs	r3, #55	; 0x37
 80097ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	2200      	movs	r2, #0
 80097e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	3304      	adds	r3, #4
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff f978 	bl	8008adc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	3318      	adds	r3, #24
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff f973 	bl	8008adc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	2200      	movs	r2, #0
 8009810:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	2200      	movs	r2, #0
 8009818:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	3354      	adds	r3, #84	; 0x54
 8009820:	224c      	movs	r2, #76	; 0x4c
 8009822:	2100      	movs	r1, #0
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fa6d 	bl	800bd04 <memset>
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	4a0c      	ldr	r2, [pc, #48]	; (8009860 <prvInitialiseNewTask+0x140>)
 800982e:	659a      	str	r2, [r3, #88]	; 0x58
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <prvInitialiseNewTask+0x144>)
 8009834:	65da      	str	r2, [r3, #92]	; 0x5c
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	4a0b      	ldr	r2, [pc, #44]	; (8009868 <prvInitialiseNewTask+0x148>)
 800983a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	69b8      	ldr	r0, [r7, #24]
 8009842:	f001 f941 	bl	800aac8 <pxPortInitialiseStack>
 8009846:	4602      	mov	r2, r0
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009856:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009858:	bf00      	nop
 800985a:	3720      	adds	r7, #32
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20011c88 	.word	0x20011c88
 8009864:	20011cf0 	.word	0x20011cf0
 8009868:	20011d58 	.word	0x20011d58

0800986c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009874:	f001 fa56 	bl	800ad24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009878:	4b2d      	ldr	r3, [pc, #180]	; (8009930 <prvAddNewTaskToReadyList+0xc4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3301      	adds	r3, #1
 800987e:	4a2c      	ldr	r2, [pc, #176]	; (8009930 <prvAddNewTaskToReadyList+0xc4>)
 8009880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009882:	4b2c      	ldr	r3, [pc, #176]	; (8009934 <prvAddNewTaskToReadyList+0xc8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800988a:	4a2a      	ldr	r2, [pc, #168]	; (8009934 <prvAddNewTaskToReadyList+0xc8>)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009890:	4b27      	ldr	r3, [pc, #156]	; (8009930 <prvAddNewTaskToReadyList+0xc4>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d110      	bne.n	80098ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009898:	f000 fc26 	bl	800a0e8 <prvInitialiseTaskLists>
 800989c:	e00d      	b.n	80098ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800989e:	4b26      	ldr	r3, [pc, #152]	; (8009938 <prvAddNewTaskToReadyList+0xcc>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098a6:	4b23      	ldr	r3, [pc, #140]	; (8009934 <prvAddNewTaskToReadyList+0xc8>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d802      	bhi.n	80098ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098b4:	4a1f      	ldr	r2, [pc, #124]	; (8009934 <prvAddNewTaskToReadyList+0xc8>)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098ba:	4b20      	ldr	r3, [pc, #128]	; (800993c <prvAddNewTaskToReadyList+0xd0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3301      	adds	r3, #1
 80098c0:	4a1e      	ldr	r2, [pc, #120]	; (800993c <prvAddNewTaskToReadyList+0xd0>)
 80098c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80098c4:	4b1d      	ldr	r3, [pc, #116]	; (800993c <prvAddNewTaskToReadyList+0xd0>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <prvAddNewTaskToReadyList+0xd4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d903      	bls.n	80098e0 <prvAddNewTaskToReadyList+0x74>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	4a18      	ldr	r2, [pc, #96]	; (8009940 <prvAddNewTaskToReadyList+0xd4>)
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4a15      	ldr	r2, [pc, #84]	; (8009944 <prvAddNewTaskToReadyList+0xd8>)
 80098ee:	441a      	add	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f7ff f8fd 	bl	8008af6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098fc:	f001 fa42 	bl	800ad84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009900:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <prvAddNewTaskToReadyList+0xcc>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00e      	beq.n	8009926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009908:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <prvAddNewTaskToReadyList+0xc8>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	429a      	cmp	r2, r3
 8009914:	d207      	bcs.n	8009926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009916:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <prvAddNewTaskToReadyList+0xdc>)
 8009918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009926:	bf00      	nop
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	2000113c 	.word	0x2000113c
 8009934:	20000c68 	.word	0x20000c68
 8009938:	20001148 	.word	0x20001148
 800993c:	20001158 	.word	0x20001158
 8009940:	20001144 	.word	0x20001144
 8009944:	20000c6c 	.word	0x20000c6c
 8009948:	e000ed04 	.word	0xe000ed04

0800994c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d017      	beq.n	800998e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800995e:	4b13      	ldr	r3, [pc, #76]	; (80099ac <vTaskDelay+0x60>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <vTaskDelay+0x30>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60bb      	str	r3, [r7, #8]
}
 8009978:	bf00      	nop
 800997a:	e7fe      	b.n	800997a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800997c:	f000 f88a 	bl	8009a94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009980:	2100      	movs	r1, #0
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fcfe 	bl	800a384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009988:	f000 f892 	bl	8009ab0 <xTaskResumeAll>
 800998c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d107      	bne.n	80099a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <vTaskDelay+0x64>)
 8009996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20001164 	.word	0x20001164
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	; 0x28
 80099b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099c2:	463a      	mov	r2, r7
 80099c4:	1d39      	adds	r1, r7, #4
 80099c6:	f107 0308 	add.w	r3, r7, #8
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff f832 	bl	8008a34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	9202      	str	r2, [sp, #8]
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	2300      	movs	r3, #0
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	2300      	movs	r3, #0
 80099e0:	460a      	mov	r2, r1
 80099e2:	4924      	ldr	r1, [pc, #144]	; (8009a74 <vTaskStartScheduler+0xc0>)
 80099e4:	4824      	ldr	r0, [pc, #144]	; (8009a78 <vTaskStartScheduler+0xc4>)
 80099e6:	f7ff fdf9 	bl	80095dc <xTaskCreateStatic>
 80099ea:	4603      	mov	r3, r0
 80099ec:	4a23      	ldr	r2, [pc, #140]	; (8009a7c <vTaskStartScheduler+0xc8>)
 80099ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099f0:	4b22      	ldr	r3, [pc, #136]	; (8009a7c <vTaskStartScheduler+0xc8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099f8:	2301      	movs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	e001      	b.n	8009a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d102      	bne.n	8009a0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a08:	f000 fd10 	bl	800a42c <xTimerCreateTimerTask>
 8009a0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d11b      	bne.n	8009a4c <vTaskStartScheduler+0x98>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	613b      	str	r3, [r7, #16]
}
 8009a26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <vTaskStartScheduler+0xcc>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3354      	adds	r3, #84	; 0x54
 8009a2e:	4a15      	ldr	r2, [pc, #84]	; (8009a84 <vTaskStartScheduler+0xd0>)
 8009a30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a32:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <vTaskStartScheduler+0xd4>)
 8009a34:	f04f 32ff 	mov.w	r2, #4294967295
 8009a38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <vTaskStartScheduler+0xd8>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a40:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <vTaskStartScheduler+0xdc>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a46:	f001 f8cb 	bl	800abe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a4a:	e00e      	b.n	8009a6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a52:	d10a      	bne.n	8009a6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	60fb      	str	r3, [r7, #12]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <vTaskStartScheduler+0xb4>
}
 8009a6a:	bf00      	nop
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	0800befc 	.word	0x0800befc
 8009a78:	0800a0b9 	.word	0x0800a0b9
 8009a7c:	20001160 	.word	0x20001160
 8009a80:	20000c68 	.word	0x20000c68
 8009a84:	200001d4 	.word	0x200001d4
 8009a88:	2000115c 	.word	0x2000115c
 8009a8c:	20001148 	.word	0x20001148
 8009a90:	20001140 	.word	0x20001140

08009a94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <vTaskSuspendAll+0x18>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	4a03      	ldr	r2, [pc, #12]	; (8009aac <vTaskSuspendAll+0x18>)
 8009aa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009aa2:	bf00      	nop
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	20001164 	.word	0x20001164

08009ab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009abe:	4b42      	ldr	r3, [pc, #264]	; (8009bc8 <xTaskResumeAll+0x118>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10a      	bne.n	8009adc <xTaskResumeAll+0x2c>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	603b      	str	r3, [r7, #0]
}
 8009ad8:	bf00      	nop
 8009ada:	e7fe      	b.n	8009ada <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009adc:	f001 f922 	bl	800ad24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ae0:	4b39      	ldr	r3, [pc, #228]	; (8009bc8 <xTaskResumeAll+0x118>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	4a38      	ldr	r2, [pc, #224]	; (8009bc8 <xTaskResumeAll+0x118>)
 8009ae8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aea:	4b37      	ldr	r3, [pc, #220]	; (8009bc8 <xTaskResumeAll+0x118>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d162      	bne.n	8009bb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009af2:	4b36      	ldr	r3, [pc, #216]	; (8009bcc <xTaskResumeAll+0x11c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d05e      	beq.n	8009bb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009afa:	e02f      	b.n	8009b5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afc:	4b34      	ldr	r3, [pc, #208]	; (8009bd0 <xTaskResumeAll+0x120>)
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3318      	adds	r3, #24
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff f851 	bl	8008bb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff f84c 	bl	8008bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1c:	4b2d      	ldr	r3, [pc, #180]	; (8009bd4 <xTaskResumeAll+0x124>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d903      	bls.n	8009b2c <xTaskResumeAll+0x7c>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	4a2a      	ldr	r2, [pc, #168]	; (8009bd4 <xTaskResumeAll+0x124>)
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4a27      	ldr	r2, [pc, #156]	; (8009bd8 <xTaskResumeAll+0x128>)
 8009b3a:	441a      	add	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4619      	mov	r1, r3
 8009b42:	4610      	mov	r0, r2
 8009b44:	f7fe ffd7 	bl	8008af6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4c:	4b23      	ldr	r3, [pc, #140]	; (8009bdc <xTaskResumeAll+0x12c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d302      	bcc.n	8009b5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b56:	4b22      	ldr	r3, [pc, #136]	; (8009be0 <xTaskResumeAll+0x130>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b5c:	4b1c      	ldr	r3, [pc, #112]	; (8009bd0 <xTaskResumeAll+0x120>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1cb      	bne.n	8009afc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b6a:	f000 fb5f 	bl	800a22c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b6e:	4b1d      	ldr	r3, [pc, #116]	; (8009be4 <xTaskResumeAll+0x134>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d010      	beq.n	8009b9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b7a:	f000 f847 	bl	8009c0c <xTaskIncrementTick>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b84:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <xTaskResumeAll+0x130>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1f1      	bne.n	8009b7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <xTaskResumeAll+0x134>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b9c:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <xTaskResumeAll+0x130>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d009      	beq.n	8009bb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ba8:	4b0f      	ldr	r3, [pc, #60]	; (8009be8 <xTaskResumeAll+0x138>)
 8009baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bb8:	f001 f8e4 	bl	800ad84 <vPortExitCritical>

	return xAlreadyYielded;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20001164 	.word	0x20001164
 8009bcc:	2000113c 	.word	0x2000113c
 8009bd0:	200010fc 	.word	0x200010fc
 8009bd4:	20001144 	.word	0x20001144
 8009bd8:	20000c6c 	.word	0x20000c6c
 8009bdc:	20000c68 	.word	0x20000c68
 8009be0:	20001150 	.word	0x20001150
 8009be4:	2000114c 	.word	0x2000114c
 8009be8:	e000ed04 	.word	0xe000ed04

08009bec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <xTaskGetTickCount+0x1c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bf8:	687b      	ldr	r3, [r7, #4]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20001140 	.word	0x20001140

08009c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c16:	4b4f      	ldr	r3, [pc, #316]	; (8009d54 <xTaskIncrementTick+0x148>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f040 808f 	bne.w	8009d3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c20:	4b4d      	ldr	r3, [pc, #308]	; (8009d58 <xTaskIncrementTick+0x14c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c28:	4a4b      	ldr	r2, [pc, #300]	; (8009d58 <xTaskIncrementTick+0x14c>)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d120      	bne.n	8009c76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c34:	4b49      	ldr	r3, [pc, #292]	; (8009d5c <xTaskIncrementTick+0x150>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <xTaskIncrementTick+0x48>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	603b      	str	r3, [r7, #0]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <xTaskIncrementTick+0x46>
 8009c54:	4b41      	ldr	r3, [pc, #260]	; (8009d5c <xTaskIncrementTick+0x150>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	4b41      	ldr	r3, [pc, #260]	; (8009d60 <xTaskIncrementTick+0x154>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a3f      	ldr	r2, [pc, #252]	; (8009d5c <xTaskIncrementTick+0x150>)
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	4a3f      	ldr	r2, [pc, #252]	; (8009d60 <xTaskIncrementTick+0x154>)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	4b3e      	ldr	r3, [pc, #248]	; (8009d64 <xTaskIncrementTick+0x158>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	4a3d      	ldr	r2, [pc, #244]	; (8009d64 <xTaskIncrementTick+0x158>)
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	f000 fadb 	bl	800a22c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c76:	4b3c      	ldr	r3, [pc, #240]	; (8009d68 <xTaskIncrementTick+0x15c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d349      	bcc.n	8009d14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c80:	4b36      	ldr	r3, [pc, #216]	; (8009d5c <xTaskIncrementTick+0x150>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d104      	bne.n	8009c94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c8a:	4b37      	ldr	r3, [pc, #220]	; (8009d68 <xTaskIncrementTick+0x15c>)
 8009c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c90:	601a      	str	r2, [r3, #0]
					break;
 8009c92:	e03f      	b.n	8009d14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c94:	4b31      	ldr	r3, [pc, #196]	; (8009d5c <xTaskIncrementTick+0x150>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d203      	bcs.n	8009cb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cac:	4a2e      	ldr	r2, [pc, #184]	; (8009d68 <xTaskIncrementTick+0x15c>)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cb2:	e02f      	b.n	8009d14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe ff79 	bl	8008bb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	3318      	adds	r3, #24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe ff70 	bl	8008bb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd4:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <xTaskIncrementTick+0x160>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d903      	bls.n	8009ce4 <xTaskIncrementTick+0xd8>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce0:	4a22      	ldr	r2, [pc, #136]	; (8009d6c <xTaskIncrementTick+0x160>)
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <xTaskIncrementTick+0x164>)
 8009cf2:	441a      	add	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7fe fefb 	bl	8008af6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d04:	4b1b      	ldr	r3, [pc, #108]	; (8009d74 <xTaskIncrementTick+0x168>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d3b8      	bcc.n	8009c80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d12:	e7b5      	b.n	8009c80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d14:	4b17      	ldr	r3, [pc, #92]	; (8009d74 <xTaskIncrementTick+0x168>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1a:	4915      	ldr	r1, [pc, #84]	; (8009d70 <xTaskIncrementTick+0x164>)
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d901      	bls.n	8009d30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d30:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <xTaskIncrementTick+0x16c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d007      	beq.n	8009d48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	e004      	b.n	8009d48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d3e:	4b0f      	ldr	r3, [pc, #60]	; (8009d7c <xTaskIncrementTick+0x170>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3301      	adds	r3, #1
 8009d44:	4a0d      	ldr	r2, [pc, #52]	; (8009d7c <xTaskIncrementTick+0x170>)
 8009d46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d48:	697b      	ldr	r3, [r7, #20]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20001164 	.word	0x20001164
 8009d58:	20001140 	.word	0x20001140
 8009d5c:	200010f4 	.word	0x200010f4
 8009d60:	200010f8 	.word	0x200010f8
 8009d64:	20001154 	.word	0x20001154
 8009d68:	2000115c 	.word	0x2000115c
 8009d6c:	20001144 	.word	0x20001144
 8009d70:	20000c6c 	.word	0x20000c6c
 8009d74:	20000c68 	.word	0x20000c68
 8009d78:	20001150 	.word	0x20001150
 8009d7c:	2000114c 	.word	0x2000114c

08009d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d86:	4b2a      	ldr	r3, [pc, #168]	; (8009e30 <vTaskSwitchContext+0xb0>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d8e:	4b29      	ldr	r3, [pc, #164]	; (8009e34 <vTaskSwitchContext+0xb4>)
 8009d90:	2201      	movs	r2, #1
 8009d92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d94:	e046      	b.n	8009e24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009d96:	4b27      	ldr	r3, [pc, #156]	; (8009e34 <vTaskSwitchContext+0xb4>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d9c:	4b26      	ldr	r3, [pc, #152]	; (8009e38 <vTaskSwitchContext+0xb8>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	60fb      	str	r3, [r7, #12]
 8009da2:	e010      	b.n	8009dc6 <vTaskSwitchContext+0x46>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	607b      	str	r3, [r7, #4]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vTaskSwitchContext+0x3e>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	491d      	ldr	r1, [pc, #116]	; (8009e3c <vTaskSwitchContext+0xbc>)
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0e4      	beq.n	8009da4 <vTaskSwitchContext+0x24>
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4a15      	ldr	r2, [pc, #84]	; (8009e3c <vTaskSwitchContext+0xbc>)
 8009de6:	4413      	add	r3, r2
 8009de8:	60bb      	str	r3, [r7, #8]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	685a      	ldr	r2, [r3, #4]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	605a      	str	r2, [r3, #4]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d104      	bne.n	8009e0a <vTaskSwitchContext+0x8a>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	4a0b      	ldr	r2, [pc, #44]	; (8009e40 <vTaskSwitchContext+0xc0>)
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	4a08      	ldr	r2, [pc, #32]	; (8009e38 <vTaskSwitchContext+0xb8>)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e1a:	4b09      	ldr	r3, [pc, #36]	; (8009e40 <vTaskSwitchContext+0xc0>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3354      	adds	r3, #84	; 0x54
 8009e20:	4a08      	ldr	r2, [pc, #32]	; (8009e44 <vTaskSwitchContext+0xc4>)
 8009e22:	6013      	str	r3, [r2, #0]
}
 8009e24:	bf00      	nop
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	20001164 	.word	0x20001164
 8009e34:	20001150 	.word	0x20001150
 8009e38:	20001144 	.word	0x20001144
 8009e3c:	20000c6c 	.word	0x20000c6c
 8009e40:	20000c68 	.word	0x20000c68
 8009e44:	200001d4 	.word	0x200001d4

08009e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	60fb      	str	r3, [r7, #12]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e6e:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <vTaskPlaceOnEventList+0x44>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3318      	adds	r3, #24
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7fe fe61 	bl	8008b3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	6838      	ldr	r0, [r7, #0]
 8009e80:	f000 fa80 	bl	800a384 <prvAddCurrentTaskToDelayedList>
}
 8009e84:	bf00      	nop
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000c68 	.word	0x20000c68

08009e90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	617b      	str	r3, [r7, #20]
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3318      	adds	r3, #24
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7fe fe18 	bl	8008af6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	68b8      	ldr	r0, [r7, #8]
 8009ed6:	f000 fa55 	bl	800a384 <prvAddCurrentTaskToDelayedList>
	}
 8009eda:	bf00      	nop
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000c68 	.word	0x20000c68

08009ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60fb      	str	r3, [r7, #12]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	3318      	adds	r3, #24
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fe49 	bl	8008bb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f1e:	4b1e      	ldr	r3, [pc, #120]	; (8009f98 <xTaskRemoveFromEventList+0xb0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d11d      	bne.n	8009f62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fe40 	bl	8008bb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f34:	4b19      	ldr	r3, [pc, #100]	; (8009f9c <xTaskRemoveFromEventList+0xb4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d903      	bls.n	8009f44 <xTaskRemoveFromEventList+0x5c>
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	4a16      	ldr	r2, [pc, #88]	; (8009f9c <xTaskRemoveFromEventList+0xb4>)
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4a13      	ldr	r2, [pc, #76]	; (8009fa0 <xTaskRemoveFromEventList+0xb8>)
 8009f52:	441a      	add	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	3304      	adds	r3, #4
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7fe fdcb 	bl	8008af6 <vListInsertEnd>
 8009f60:	e005      	b.n	8009f6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3318      	adds	r3, #24
 8009f66:	4619      	mov	r1, r3
 8009f68:	480e      	ldr	r0, [pc, #56]	; (8009fa4 <xTaskRemoveFromEventList+0xbc>)
 8009f6a:	f7fe fdc4 	bl	8008af6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f72:	4b0d      	ldr	r3, [pc, #52]	; (8009fa8 <xTaskRemoveFromEventList+0xc0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d905      	bls.n	8009f88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f80:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <xTaskRemoveFromEventList+0xc4>)
 8009f82:	2201      	movs	r2, #1
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	e001      	b.n	8009f8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f8c:	697b      	ldr	r3, [r7, #20]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20001164 	.word	0x20001164
 8009f9c:	20001144 	.word	0x20001144
 8009fa0:	20000c6c 	.word	0x20000c6c
 8009fa4:	200010fc 	.word	0x200010fc
 8009fa8:	20000c68 	.word	0x20000c68
 8009fac:	20001150 	.word	0x20001150

08009fb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fb8:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <vTaskInternalSetTimeOutState+0x24>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fc0:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <vTaskInternalSetTimeOutState+0x28>)
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	605a      	str	r2, [r3, #4]
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	20001154 	.word	0x20001154
 8009fd8:	20001140 	.word	0x20001140

08009fdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	613b      	str	r3, [r7, #16]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a01e:	f000 fe81 	bl	800ad24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a022:	4b1d      	ldr	r3, [pc, #116]	; (800a098 <xTaskCheckForTimeOut+0xbc>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03a:	d102      	bne.n	800a042 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	61fb      	str	r3, [r7, #28]
 800a040:	e023      	b.n	800a08a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	4b15      	ldr	r3, [pc, #84]	; (800a09c <xTaskCheckForTimeOut+0xc0>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d007      	beq.n	800a05e <xTaskCheckForTimeOut+0x82>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	429a      	cmp	r2, r3
 800a056:	d302      	bcc.n	800a05e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a058:	2301      	movs	r3, #1
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	e015      	b.n	800a08a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	429a      	cmp	r2, r3
 800a066:	d20b      	bcs.n	800a080 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7ff ff9b 	bl	8009fb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a07a:	2300      	movs	r3, #0
 800a07c:	61fb      	str	r3, [r7, #28]
 800a07e:	e004      	b.n	800a08a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a086:	2301      	movs	r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a08a:	f000 fe7b 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 800a08e:	69fb      	ldr	r3, [r7, #28]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3720      	adds	r7, #32
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20001140 	.word	0x20001140
 800a09c:	20001154 	.word	0x20001154

0800a0a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0a4:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <vTaskMissedYield+0x14>)
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]
}
 800a0aa:	bf00      	nop
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	20001150 	.word	0x20001150

0800a0b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0c0:	f000 f852 	bl	800a168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0c4:	4b06      	ldr	r3, [pc, #24]	; (800a0e0 <prvIdleTask+0x28>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d9f9      	bls.n	800a0c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <prvIdleTask+0x2c>)
 800a0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0dc:	e7f0      	b.n	800a0c0 <prvIdleTask+0x8>
 800a0de:	bf00      	nop
 800a0e0:	20000c6c 	.word	0x20000c6c
 800a0e4:	e000ed04 	.word	0xe000ed04

0800a0e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	e00c      	b.n	800a10e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4a12      	ldr	r2, [pc, #72]	; (800a148 <prvInitialiseTaskLists+0x60>)
 800a100:	4413      	add	r3, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fcca 	bl	8008a9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3301      	adds	r3, #1
 800a10c:	607b      	str	r3, [r7, #4]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b37      	cmp	r3, #55	; 0x37
 800a112:	d9ef      	bls.n	800a0f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a114:	480d      	ldr	r0, [pc, #52]	; (800a14c <prvInitialiseTaskLists+0x64>)
 800a116:	f7fe fcc1 	bl	8008a9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a11a:	480d      	ldr	r0, [pc, #52]	; (800a150 <prvInitialiseTaskLists+0x68>)
 800a11c:	f7fe fcbe 	bl	8008a9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a120:	480c      	ldr	r0, [pc, #48]	; (800a154 <prvInitialiseTaskLists+0x6c>)
 800a122:	f7fe fcbb 	bl	8008a9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a126:	480c      	ldr	r0, [pc, #48]	; (800a158 <prvInitialiseTaskLists+0x70>)
 800a128:	f7fe fcb8 	bl	8008a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a12c:	480b      	ldr	r0, [pc, #44]	; (800a15c <prvInitialiseTaskLists+0x74>)
 800a12e:	f7fe fcb5 	bl	8008a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a132:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <prvInitialiseTaskLists+0x78>)
 800a134:	4a05      	ldr	r2, [pc, #20]	; (800a14c <prvInitialiseTaskLists+0x64>)
 800a136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a138:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <prvInitialiseTaskLists+0x7c>)
 800a13a:	4a05      	ldr	r2, [pc, #20]	; (800a150 <prvInitialiseTaskLists+0x68>)
 800a13c:	601a      	str	r2, [r3, #0]
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000c6c 	.word	0x20000c6c
 800a14c:	200010cc 	.word	0x200010cc
 800a150:	200010e0 	.word	0x200010e0
 800a154:	200010fc 	.word	0x200010fc
 800a158:	20001110 	.word	0x20001110
 800a15c:	20001128 	.word	0x20001128
 800a160:	200010f4 	.word	0x200010f4
 800a164:	200010f8 	.word	0x200010f8

0800a168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a16e:	e019      	b.n	800a1a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a170:	f000 fdd8 	bl	800ad24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a174:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <prvCheckTasksWaitingTermination+0x50>)
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3304      	adds	r3, #4
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe fd15 	bl	8008bb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a186:	4b0d      	ldr	r3, [pc, #52]	; (800a1bc <prvCheckTasksWaitingTermination+0x54>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	4a0b      	ldr	r2, [pc, #44]	; (800a1bc <prvCheckTasksWaitingTermination+0x54>)
 800a18e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a190:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <prvCheckTasksWaitingTermination+0x58>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3b01      	subs	r3, #1
 800a196:	4a0a      	ldr	r2, [pc, #40]	; (800a1c0 <prvCheckTasksWaitingTermination+0x58>)
 800a198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a19a:	f000 fdf3 	bl	800ad84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f810 	bl	800a1c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1a4:	4b06      	ldr	r3, [pc, #24]	; (800a1c0 <prvCheckTasksWaitingTermination+0x58>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e1      	bne.n	800a170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20001110 	.word	0x20001110
 800a1bc:	2000113c 	.word	0x2000113c
 800a1c0:	20001124 	.word	0x20001124

0800a1c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3354      	adds	r3, #84	; 0x54
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f001 fd9f 	bl	800bd14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d108      	bne.n	800a1f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 ff8b 	bl	800b100 <vPortFree>
				vPortFree( pxTCB );
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 ff88 	bl	800b100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1f0:	e018      	b.n	800a224 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d103      	bne.n	800a204 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 ff7f 	bl	800b100 <vPortFree>
	}
 800a202:	e00f      	b.n	800a224 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d00a      	beq.n	800a224 <prvDeleteTCB+0x60>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	60fb      	str	r3, [r7, #12]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <prvDeleteTCB+0x5e>
	}
 800a224:	bf00      	nop
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a232:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <prvResetNextTaskUnblockTime+0x38>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d104      	bne.n	800a246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a23c:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <prvResetNextTaskUnblockTime+0x3c>)
 800a23e:	f04f 32ff 	mov.w	r2, #4294967295
 800a242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a244:	e008      	b.n	800a258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <prvResetNextTaskUnblockTime+0x38>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	4a04      	ldr	r2, [pc, #16]	; (800a268 <prvResetNextTaskUnblockTime+0x3c>)
 800a256:	6013      	str	r3, [r2, #0]
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	200010f4 	.word	0x200010f4
 800a268:	2000115c 	.word	0x2000115c

0800a26c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a272:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <xTaskGetSchedulerState+0x34>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d102      	bne.n	800a280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a27a:	2301      	movs	r3, #1
 800a27c:	607b      	str	r3, [r7, #4]
 800a27e:	e008      	b.n	800a292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a280:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <xTaskGetSchedulerState+0x38>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a288:	2302      	movs	r3, #2
 800a28a:	607b      	str	r3, [r7, #4]
 800a28c:	e001      	b.n	800a292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a292:	687b      	ldr	r3, [r7, #4]
	}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	20001148 	.word	0x20001148
 800a2a4:	20001164 	.word	0x20001164

0800a2a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d056      	beq.n	800a36c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2be:	4b2e      	ldr	r3, [pc, #184]	; (800a378 <xTaskPriorityDisinherit+0xd0>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d00a      	beq.n	800a2de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	60fb      	str	r3, [r7, #12]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10a      	bne.n	800a2fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	60bb      	str	r3, [r7, #8]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a300:	1e5a      	subs	r2, r3, #1
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a30e:	429a      	cmp	r2, r3
 800a310:	d02c      	beq.n	800a36c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a316:	2b00      	cmp	r3, #0
 800a318:	d128      	bne.n	800a36c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	3304      	adds	r3, #4
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fc46 	bl	8008bb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33c:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <xTaskPriorityDisinherit+0xd4>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d903      	bls.n	800a34c <xTaskPriorityDisinherit+0xa4>
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	4a0c      	ldr	r2, [pc, #48]	; (800a37c <xTaskPriorityDisinherit+0xd4>)
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4a09      	ldr	r2, [pc, #36]	; (800a380 <xTaskPriorityDisinherit+0xd8>)
 800a35a:	441a      	add	r2, r3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	3304      	adds	r3, #4
 800a360:	4619      	mov	r1, r3
 800a362:	4610      	mov	r0, r2
 800a364:	f7fe fbc7 	bl	8008af6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a368:	2301      	movs	r3, #1
 800a36a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a36c:	697b      	ldr	r3, [r7, #20]
	}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000c68 	.word	0x20000c68
 800a37c:	20001144 	.word	0x20001144
 800a380:	20000c6c 	.word	0x20000c6c

0800a384 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a38e:	4b21      	ldr	r3, [pc, #132]	; (800a414 <prvAddCurrentTaskToDelayedList+0x90>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a394:	4b20      	ldr	r3, [pc, #128]	; (800a418 <prvAddCurrentTaskToDelayedList+0x94>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3304      	adds	r3, #4
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe fc08 	bl	8008bb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d10a      	bne.n	800a3be <prvAddCurrentTaskToDelayedList+0x3a>
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ae:	4b1a      	ldr	r3, [pc, #104]	; (800a418 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4819      	ldr	r0, [pc, #100]	; (800a41c <prvAddCurrentTaskToDelayedList+0x98>)
 800a3b8:	f7fe fb9d 	bl	8008af6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3bc:	e026      	b.n	800a40c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d209      	bcs.n	800a3ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3d6:	4b12      	ldr	r3, [pc, #72]	; (800a420 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	f7fe fbab 	bl	8008b3e <vListInsert>
}
 800a3e8:	e010      	b.n	800a40c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ea:	4b0e      	ldr	r3, [pc, #56]	; (800a424 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	f7fe fba1 	bl	8008b3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	429a      	cmp	r2, r3
 800a404:	d202      	bcs.n	800a40c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a406:	4a08      	ldr	r2, [pc, #32]	; (800a428 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	6013      	str	r3, [r2, #0]
}
 800a40c:	bf00      	nop
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	20001140 	.word	0x20001140
 800a418:	20000c68 	.word	0x20000c68
 800a41c:	20001128 	.word	0x20001128
 800a420:	200010f8 	.word	0x200010f8
 800a424:	200010f4 	.word	0x200010f4
 800a428:	2000115c 	.word	0x2000115c

0800a42c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b08a      	sub	sp, #40	; 0x28
 800a430:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a436:	f000 fb07 	bl	800aa48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a43a:	4b1c      	ldr	r3, [pc, #112]	; (800a4ac <xTimerCreateTimerTask+0x80>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d021      	beq.n	800a486 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a446:	2300      	movs	r3, #0
 800a448:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a44a:	1d3a      	adds	r2, r7, #4
 800a44c:	f107 0108 	add.w	r1, r7, #8
 800a450:	f107 030c 	add.w	r3, r7, #12
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fb07 	bl	8008a68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	9202      	str	r2, [sp, #8]
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	2302      	movs	r3, #2
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	2300      	movs	r3, #0
 800a46a:	460a      	mov	r2, r1
 800a46c:	4910      	ldr	r1, [pc, #64]	; (800a4b0 <xTimerCreateTimerTask+0x84>)
 800a46e:	4811      	ldr	r0, [pc, #68]	; (800a4b4 <xTimerCreateTimerTask+0x88>)
 800a470:	f7ff f8b4 	bl	80095dc <xTaskCreateStatic>
 800a474:	4603      	mov	r3, r0
 800a476:	4a10      	ldr	r2, [pc, #64]	; (800a4b8 <xTimerCreateTimerTask+0x8c>)
 800a478:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a47a:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <xTimerCreateTimerTask+0x8c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a482:	2301      	movs	r3, #1
 800a484:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	613b      	str	r3, [r7, #16]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a4a2:	697b      	ldr	r3, [r7, #20]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	20001198 	.word	0x20001198
 800a4b0:	0800bf04 	.word	0x0800bf04
 800a4b4:	0800a5f1 	.word	0x0800a5f1
 800a4b8:	2000119c 	.word	0x2000119c

0800a4bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08a      	sub	sp, #40	; 0x28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	623b      	str	r3, [r7, #32]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4ea:	4b1a      	ldr	r3, [pc, #104]	; (800a554 <xTimerGenericCommand+0x98>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d02a      	beq.n	800a548 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b05      	cmp	r3, #5
 800a502:	dc18      	bgt.n	800a536 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a504:	f7ff feb2 	bl	800a26c <xTaskGetSchedulerState>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d109      	bne.n	800a522 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a50e:	4b11      	ldr	r3, [pc, #68]	; (800a554 <xTimerGenericCommand+0x98>)
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f107 0110 	add.w	r1, r7, #16
 800a516:	2300      	movs	r3, #0
 800a518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a51a:	f7fe fc77 	bl	8008e0c <xQueueGenericSend>
 800a51e:	6278      	str	r0, [r7, #36]	; 0x24
 800a520:	e012      	b.n	800a548 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a522:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <xTimerGenericCommand+0x98>)
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	f107 0110 	add.w	r1, r7, #16
 800a52a:	2300      	movs	r3, #0
 800a52c:	2200      	movs	r2, #0
 800a52e:	f7fe fc6d 	bl	8008e0c <xQueueGenericSend>
 800a532:	6278      	str	r0, [r7, #36]	; 0x24
 800a534:	e008      	b.n	800a548 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a536:	4b07      	ldr	r3, [pc, #28]	; (800a554 <xTimerGenericCommand+0x98>)
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	f107 0110 	add.w	r1, r7, #16
 800a53e:	2300      	movs	r3, #0
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	f7fe fd61 	bl	8009008 <xQueueGenericSendFromISR>
 800a546:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3728      	adds	r7, #40	; 0x28
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20001198 	.word	0x20001198

0800a558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a562:	4b22      	ldr	r3, [pc, #136]	; (800a5ec <prvProcessExpiredTimer+0x94>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	3304      	adds	r3, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fb1d 	bl	8008bb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d022      	beq.n	800a5ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	699a      	ldr	r2, [r3, #24]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	18d1      	adds	r1, r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	6978      	ldr	r0, [r7, #20]
 800a592:	f000 f8d1 	bl	800a738 <prvInsertTimerInActiveList>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01f      	beq.n	800a5dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a59c:	2300      	movs	r3, #0
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	6978      	ldr	r0, [r7, #20]
 800a5a8:	f7ff ff88 	bl	800a4bc <xTimerGenericCommand>
 800a5ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d113      	bne.n	800a5dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	60fb      	str	r3, [r7, #12]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d0:	f023 0301 	bic.w	r3, r3, #1
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	6978      	ldr	r0, [r7, #20]
 800a5e2:	4798      	blx	r3
}
 800a5e4:	bf00      	nop
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20001190 	.word	0x20001190

0800a5f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5f8:	f107 0308 	add.w	r3, r7, #8
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 f857 	bl	800a6b0 <prvGetNextExpireTime>
 800a602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4619      	mov	r1, r3
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f803 	bl	800a614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a60e:	f000 f8d5 	bl	800a7bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a612:	e7f1      	b.n	800a5f8 <prvTimerTask+0x8>

0800a614 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a61e:	f7ff fa39 	bl	8009a94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a622:	f107 0308 	add.w	r3, r7, #8
 800a626:	4618      	mov	r0, r3
 800a628:	f000 f866 	bl	800a6f8 <prvSampleTimeNow>
 800a62c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d130      	bne.n	800a696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <prvProcessTimerOrBlockTask+0x3c>
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d806      	bhi.n	800a650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a642:	f7ff fa35 	bl	8009ab0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a646:	68f9      	ldr	r1, [r7, #12]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff ff85 	bl	800a558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a64e:	e024      	b.n	800a69a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d008      	beq.n	800a668 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a656:	4b13      	ldr	r3, [pc, #76]	; (800a6a4 <prvProcessTimerOrBlockTask+0x90>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <prvProcessTimerOrBlockTask+0x50>
 800a660:	2301      	movs	r3, #1
 800a662:	e000      	b.n	800a666 <prvProcessTimerOrBlockTask+0x52>
 800a664:	2300      	movs	r3, #0
 800a666:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a668:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <prvProcessTimerOrBlockTask+0x94>)
 800a66a:	6818      	ldr	r0, [r3, #0]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	4619      	mov	r1, r3
 800a676:	f7fe ff7d 	bl	8009574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a67a:	f7ff fa19 	bl	8009ab0 <xTaskResumeAll>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a684:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <prvProcessTimerOrBlockTask+0x98>)
 800a686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	f3bf 8f6f 	isb	sy
}
 800a694:	e001      	b.n	800a69a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a696:	f7ff fa0b 	bl	8009ab0 <xTaskResumeAll>
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20001194 	.word	0x20001194
 800a6a8:	20001198 	.word	0x20001198
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6b8:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <prvGetNextExpireTime+0x44>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <prvGetNextExpireTime+0x16>
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	e000      	b.n	800a6c8 <prvGetNextExpireTime+0x18>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d105      	bne.n	800a6e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6d4:	4b07      	ldr	r3, [pc, #28]	; (800a6f4 <prvGetNextExpireTime+0x44>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	e001      	b.n	800a6e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	20001190 	.word	0x20001190

0800a6f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a700:	f7ff fa74 	bl	8009bec <xTaskGetTickCount>
 800a704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a706:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <prvSampleTimeNow+0x3c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d205      	bcs.n	800a71c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a710:	f000 f936 	bl	800a980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	e002      	b.n	800a722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a722:	4a04      	ldr	r2, [pc, #16]	; (800a734 <prvSampleTimeNow+0x3c>)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a728:	68fb      	ldr	r3, [r7, #12]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	200011a0 	.word	0x200011a0

0800a738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a746:	2300      	movs	r3, #0
 800a748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d812      	bhi.n	800a784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	1ad2      	subs	r2, r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d302      	bcc.n	800a772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a76c:	2301      	movs	r3, #1
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e01b      	b.n	800a7aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a772:	4b10      	ldr	r3, [pc, #64]	; (800a7b4 <prvInsertTimerInActiveList+0x7c>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3304      	adds	r3, #4
 800a77a:	4619      	mov	r1, r3
 800a77c:	4610      	mov	r0, r2
 800a77e:	f7fe f9de 	bl	8008b3e <vListInsert>
 800a782:	e012      	b.n	800a7aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d206      	bcs.n	800a79a <prvInsertTimerInActiveList+0x62>
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d302      	bcc.n	800a79a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	e007      	b.n	800a7aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a79a:	4b07      	ldr	r3, [pc, #28]	; (800a7b8 <prvInsertTimerInActiveList+0x80>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	f7fe f9ca 	bl	8008b3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7aa:	697b      	ldr	r3, [r7, #20]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20001194 	.word	0x20001194
 800a7b8:	20001190 	.word	0x20001190

0800a7bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08e      	sub	sp, #56	; 0x38
 800a7c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7c2:	e0ca      	b.n	800a95a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	da18      	bge.n	800a7fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7ca:	1d3b      	adds	r3, r7, #4
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	61fb      	str	r3, [r7, #28]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f2:	6850      	ldr	r0, [r2, #4]
 800a7f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f6:	6892      	ldr	r2, [r2, #8]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f2c0 80ab 	blt.w	800a95a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d004      	beq.n	800a81a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	3304      	adds	r3, #4
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe f9cb 	bl	8008bb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a81a:	463b      	mov	r3, r7
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7ff ff6b 	bl	800a6f8 <prvSampleTimeNow>
 800a822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b09      	cmp	r3, #9
 800a828:	f200 8096 	bhi.w	800a958 <prvProcessReceivedCommands+0x19c>
 800a82c:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <prvProcessReceivedCommands+0x78>)
 800a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a832:	bf00      	nop
 800a834:	0800a85d 	.word	0x0800a85d
 800a838:	0800a85d 	.word	0x0800a85d
 800a83c:	0800a85d 	.word	0x0800a85d
 800a840:	0800a8d1 	.word	0x0800a8d1
 800a844:	0800a8e5 	.word	0x0800a8e5
 800a848:	0800a92f 	.word	0x0800a92f
 800a84c:	0800a85d 	.word	0x0800a85d
 800a850:	0800a85d 	.word	0x0800a85d
 800a854:	0800a8d1 	.word	0x0800a8d1
 800a858:	0800a8e5 	.word	0x0800a8e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	b2da      	uxtb	r2, r3
 800a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	18d1      	adds	r1, r2, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a87c:	f7ff ff5c 	bl	800a738 <prvInsertTimerInActiveList>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d069      	beq.n	800a95a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a88c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05e      	beq.n	800a95a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	441a      	add	r2, r3
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ae:	f7ff fe05 	bl	800a4bc <xTimerGenericCommand>
 800a8b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d14f      	bne.n	800a95a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	61bb      	str	r3, [r7, #24]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d6:	f023 0301 	bic.w	r3, r3, #1
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a8e2:	e03a      	b.n	800a95a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8ea:	f043 0301 	orr.w	r3, r3, #1
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	617b      	str	r3, [r7, #20]
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91c:	699a      	ldr	r2, [r3, #24]
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	18d1      	adds	r1, r2, r3
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a928:	f7ff ff06 	bl	800a738 <prvInsertTimerInActiveList>
					break;
 800a92c:	e015      	b.n	800a95a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d103      	bne.n	800a944 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a93e:	f000 fbdf 	bl	800b100 <vPortFree>
 800a942:	e00a      	b.n	800a95a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a94a:	f023 0301 	bic.w	r3, r3, #1
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a956:	e000      	b.n	800a95a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a95a:	4b08      	ldr	r3, [pc, #32]	; (800a97c <prvProcessReceivedCommands+0x1c0>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	1d39      	adds	r1, r7, #4
 800a960:	2200      	movs	r2, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fbec 	bl	8009140 <xQueueReceive>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f47f af2a 	bne.w	800a7c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	3730      	adds	r7, #48	; 0x30
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20001198 	.word	0x20001198

0800a980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a986:	e048      	b.n	800aa1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a988:	4b2d      	ldr	r3, [pc, #180]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a992:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe f905 	bl	8008bb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d02e      	beq.n	800aa1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d90e      	bls.n	800a9ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9da:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	f7fe f8aa 	bl	8008b3e <vListInsert>
 800a9ea:	e016      	b.n	800aa1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff fd60 	bl	800a4bc <xTimerGenericCommand>
 800a9fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	603b      	str	r3, [r7, #0]
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa1a:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1b1      	bne.n	800a988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa24:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa2a:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <prvSwitchTimerLists+0xc4>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a04      	ldr	r2, [pc, #16]	; (800aa40 <prvSwitchTimerLists+0xc0>)
 800aa30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa32:	4a04      	ldr	r2, [pc, #16]	; (800aa44 <prvSwitchTimerLists+0xc4>)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	6013      	str	r3, [r2, #0]
}
 800aa38:	bf00      	nop
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	20001190 	.word	0x20001190
 800aa44:	20001194 	.word	0x20001194

0800aa48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa4e:	f000 f969 	bl	800ad24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d120      	bne.n	800aa9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa5a:	4814      	ldr	r0, [pc, #80]	; (800aaac <prvCheckForValidListAndQueue+0x64>)
 800aa5c:	f7fe f81e 	bl	8008a9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa60:	4813      	ldr	r0, [pc, #76]	; (800aab0 <prvCheckForValidListAndQueue+0x68>)
 800aa62:	f7fe f81b 	bl	8008a9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <prvCheckForValidListAndQueue+0x6c>)
 800aa68:	4a10      	ldr	r2, [pc, #64]	; (800aaac <prvCheckForValidListAndQueue+0x64>)
 800aa6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa6c:	4b12      	ldr	r3, [pc, #72]	; (800aab8 <prvCheckForValidListAndQueue+0x70>)
 800aa6e:	4a10      	ldr	r2, [pc, #64]	; (800aab0 <prvCheckForValidListAndQueue+0x68>)
 800aa70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa72:	2300      	movs	r3, #0
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	4b11      	ldr	r3, [pc, #68]	; (800aabc <prvCheckForValidListAndQueue+0x74>)
 800aa78:	4a11      	ldr	r2, [pc, #68]	; (800aac0 <prvCheckForValidListAndQueue+0x78>)
 800aa7a:	2110      	movs	r1, #16
 800aa7c:	200a      	movs	r0, #10
 800aa7e:	f7fe f929 	bl	8008cd4 <xQueueGenericCreateStatic>
 800aa82:	4603      	mov	r3, r0
 800aa84:	4a08      	ldr	r2, [pc, #32]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa88:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d005      	beq.n	800aa9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	490b      	ldr	r1, [pc, #44]	; (800aac4 <prvCheckForValidListAndQueue+0x7c>)
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fd42 	bl	8009520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa9c:	f000 f972 	bl	800ad84 <vPortExitCritical>
}
 800aaa0:	bf00      	nop
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20001198 	.word	0x20001198
 800aaac:	20001168 	.word	0x20001168
 800aab0:	2000117c 	.word	0x2000117c
 800aab4:	20001190 	.word	0x20001190
 800aab8:	20001194 	.word	0x20001194
 800aabc:	20001244 	.word	0x20001244
 800aac0:	200011a4 	.word	0x200011a4
 800aac4:	0800bf0c 	.word	0x0800bf0c

0800aac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3b04      	subs	r3, #4
 800aad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3b04      	subs	r3, #4
 800aae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f023 0201 	bic.w	r2, r3, #1
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3b04      	subs	r3, #4
 800aaf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaf8:	4a0c      	ldr	r2, [pc, #48]	; (800ab2c <pxPortInitialiseStack+0x64>)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3b14      	subs	r3, #20
 800ab02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3b04      	subs	r3, #4
 800ab0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f06f 0202 	mvn.w	r2, #2
 800ab16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3b20      	subs	r3, #32
 800ab1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	0800ab31 	.word	0x0800ab31

0800ab30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab3a:	4b12      	ldr	r3, [pc, #72]	; (800ab84 <prvTaskExitError+0x54>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab42:	d00a      	beq.n	800ab5a <prvTaskExitError+0x2a>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	60fb      	str	r3, [r7, #12]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <prvTaskExitError+0x28>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	60bb      	str	r3, [r7, #8]
}
 800ab6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab6e:	bf00      	nop
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0fc      	beq.n	800ab70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	2000011c 	.word	0x2000011c
	...

0800ab90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <pxCurrentTCBConst2>)
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	6808      	ldr	r0, [r1, #0]
 800ab96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	f380 8809 	msr	PSP, r0
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8811 	msr	BASEPRI, r0
 800abaa:	4770      	bx	lr
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst2>:
 800abb0:	20000c68 	.word	0x20000c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abb8:	4808      	ldr	r0, [pc, #32]	; (800abdc <prvPortStartFirstTask+0x24>)
 800abba:	6800      	ldr	r0, [r0, #0]
 800abbc:	6800      	ldr	r0, [r0, #0]
 800abbe:	f380 8808 	msr	MSP, r0
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8814 	msr	CONTROL, r0
 800abca:	b662      	cpsie	i
 800abcc:	b661      	cpsie	f
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	df00      	svc	0
 800abd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abda:	bf00      	nop
 800abdc:	e000ed08 	.word	0xe000ed08

0800abe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abe6:	4b46      	ldr	r3, [pc, #280]	; (800ad00 <xPortStartScheduler+0x120>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a46      	ldr	r2, [pc, #280]	; (800ad04 <xPortStartScheduler+0x124>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d10a      	bne.n	800ac06 <xPortStartScheduler+0x26>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac06:	4b3e      	ldr	r3, [pc, #248]	; (800ad00 <xPortStartScheduler+0x120>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a3f      	ldr	r2, [pc, #252]	; (800ad08 <xPortStartScheduler+0x128>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d10a      	bne.n	800ac26 <xPortStartScheduler+0x46>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac26:	4b39      	ldr	r3, [pc, #228]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	22ff      	movs	r2, #255	; 0xff
 800ac36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <xPortStartScheduler+0x130>)
 800ac4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac4e:	4b31      	ldr	r3, [pc, #196]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac50:	2207      	movs	r2, #7
 800ac52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac54:	e009      	b.n	800ac6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac56:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	4a2d      	ldr	r2, [pc, #180]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac72:	2b80      	cmp	r3, #128	; 0x80
 800ac74:	d0ef      	beq.n	800ac56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac76:	4b27      	ldr	r3, [pc, #156]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f1c3 0307 	rsb	r3, r3, #7
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d00a      	beq.n	800ac98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	60bb      	str	r3, [r7, #8]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac98:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	021b      	lsls	r3, r3, #8
 800ac9e:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acaa:	4a1a      	ldr	r2, [pc, #104]	; (800ad14 <xPortStartScheduler+0x134>)
 800acac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acb6:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <xPortStartScheduler+0x138>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a17      	ldr	r2, [pc, #92]	; (800ad18 <xPortStartScheduler+0x138>)
 800acbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acc2:	4b15      	ldr	r3, [pc, #84]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a14      	ldr	r2, [pc, #80]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800accc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acce:	f000 f8dd 	bl	800ae8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acd2:	4b12      	ldr	r3, [pc, #72]	; (800ad1c <xPortStartScheduler+0x13c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acd8:	f000 f8fc 	bl	800aed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <xPortStartScheduler+0x140>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <xPortStartScheduler+0x140>)
 800ace2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ace6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ace8:	f7ff ff66 	bl	800abb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acec:	f7ff f848 	bl	8009d80 <vTaskSwitchContext>
	prvTaskExitError();
 800acf0:	f7ff ff1e 	bl	800ab30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	e000ed00 	.word	0xe000ed00
 800ad04:	410fc271 	.word	0x410fc271
 800ad08:	410fc270 	.word	0x410fc270
 800ad0c:	e000e400 	.word	0xe000e400
 800ad10:	20001294 	.word	0x20001294
 800ad14:	20001298 	.word	0x20001298
 800ad18:	e000ed20 	.word	0xe000ed20
 800ad1c:	2000011c 	.word	0x2000011c
 800ad20:	e000ef34 	.word	0xe000ef34

0800ad24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	607b      	str	r3, [r7, #4]
}
 800ad3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	4a0d      	ldr	r2, [pc, #52]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad48:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d10f      	bne.n	800ad70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <vPortEnterCritical+0x5c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	603b      	str	r3, [r7, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <vPortEnterCritical+0x4a>
	}
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	2000011c 	.word	0x2000011c
 800ad80:	e000ed04 	.word	0xe000ed04

0800ad84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad8a:	4b12      	ldr	r3, [pc, #72]	; (800add4 <vPortExitCritical+0x50>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <vPortExitCritical+0x24>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	607b      	str	r3, [r7, #4]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <vPortExitCritical+0x50>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3b01      	subs	r3, #1
 800adae:	4a09      	ldr	r2, [pc, #36]	; (800add4 <vPortExitCritical+0x50>)
 800adb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800adb2:	4b08      	ldr	r3, [pc, #32]	; (800add4 <vPortExitCritical+0x50>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <vPortExitCritical+0x42>
 800adba:	2300      	movs	r3, #0
 800adbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	f383 8811 	msr	BASEPRI, r3
}
 800adc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	2000011c 	.word	0x2000011c
	...

0800ade0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ade0:	f3ef 8009 	mrs	r0, PSP
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <pxCurrentTCBConst>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	f01e 0f10 	tst.w	lr, #16
 800adf0:	bf08      	it	eq
 800adf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfa:	6010      	str	r0, [r2, #0]
 800adfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae04:	f380 8811 	msr	BASEPRI, r0
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f7fe ffb6 	bl	8009d80 <vTaskSwitchContext>
 800ae14:	f04f 0000 	mov.w	r0, #0
 800ae18:	f380 8811 	msr	BASEPRI, r0
 800ae1c:	bc09      	pop	{r0, r3}
 800ae1e:	6819      	ldr	r1, [r3, #0]
 800ae20:	6808      	ldr	r0, [r1, #0]
 800ae22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae26:	f01e 0f10 	tst.w	lr, #16
 800ae2a:	bf08      	it	eq
 800ae2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae30:	f380 8809 	msr	PSP, r0
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	f3af 8000 	nop.w

0800ae40 <pxCurrentTCBConst>:
 800ae40:	20000c68 	.word	0x20000c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	607b      	str	r3, [r7, #4]
}
 800ae60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae62:	f7fe fed3 	bl	8009c0c <xTaskIncrementTick>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae6c:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <xPortSysTickHandler+0x40>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	2300      	movs	r3, #0
 800ae76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	f383 8811 	msr	BASEPRI, r3
}
 800ae7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	e000ed04 	.word	0xe000ed04

0800ae8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae96:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <vPortSetupTimerInterrupt+0x38>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae9c:	4b0a      	ldr	r3, [pc, #40]	; (800aec8 <vPortSetupTimerInterrupt+0x3c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <vPortSetupTimerInterrupt+0x40>)
 800aea2:	fba2 2303 	umull	r2, r3, r2, r3
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <vPortSetupTimerInterrupt+0x44>)
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aeae:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	601a      	str	r2, [r3, #0]
}
 800aeb4:	bf00      	nop
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	e000e010 	.word	0xe000e010
 800aec4:	e000e018 	.word	0xe000e018
 800aec8:	20000000 	.word	0x20000000
 800aecc:	10624dd3 	.word	0x10624dd3
 800aed0:	e000e014 	.word	0xe000e014

0800aed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aee4 <vPortEnableVFP+0x10>
 800aed8:	6801      	ldr	r1, [r0, #0]
 800aeda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aede:	6001      	str	r1, [r0, #0]
 800aee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aee2:	bf00      	nop
 800aee4:	e000ed88 	.word	0xe000ed88

0800aee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeee:	f3ef 8305 	mrs	r3, IPSR
 800aef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b0f      	cmp	r3, #15
 800aef8:	d914      	bls.n	800af24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aefa:	4a17      	ldr	r2, [pc, #92]	; (800af58 <vPortValidateInterruptPriority+0x70>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <vPortValidateInterruptPriority+0x74>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	7afa      	ldrb	r2, [r7, #11]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d20a      	bcs.n	800af24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af24:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <vPortValidateInterruptPriority+0x78>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <vPortValidateInterruptPriority+0x7c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d90a      	bls.n	800af4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	603b      	str	r3, [r7, #0]
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <vPortValidateInterruptPriority+0x60>
	}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	e000e3f0 	.word	0xe000e3f0
 800af5c:	20001294 	.word	0x20001294
 800af60:	e000ed0c 	.word	0xe000ed0c
 800af64:	20001298 	.word	0x20001298

0800af68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af70:	2300      	movs	r3, #0
 800af72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af74:	f7fe fd8e 	bl	8009a94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af78:	4b5b      	ldr	r3, [pc, #364]	; (800b0e8 <pvPortMalloc+0x180>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af80:	f000 f920 	bl	800b1c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af84:	4b59      	ldr	r3, [pc, #356]	; (800b0ec <pvPortMalloc+0x184>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4013      	ands	r3, r2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f040 8093 	bne.w	800b0b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d01d      	beq.n	800afd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af98:	2208      	movs	r2, #8
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4413      	add	r3, r2
 800af9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f003 0307 	and.w	r3, r3, #7
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d014      	beq.n	800afd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f023 0307 	bic.w	r3, r3, #7
 800afb0:	3308      	adds	r3, #8
 800afb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00a      	beq.n	800afd4 <pvPortMalloc+0x6c>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	617b      	str	r3, [r7, #20]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d06e      	beq.n	800b0b8 <pvPortMalloc+0x150>
 800afda:	4b45      	ldr	r3, [pc, #276]	; (800b0f0 <pvPortMalloc+0x188>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d869      	bhi.n	800b0b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afe4:	4b43      	ldr	r3, [pc, #268]	; (800b0f4 <pvPortMalloc+0x18c>)
 800afe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afe8:	4b42      	ldr	r3, [pc, #264]	; (800b0f4 <pvPortMalloc+0x18c>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afee:	e004      	b.n	800affa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	d903      	bls.n	800b00c <pvPortMalloc+0xa4>
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f1      	bne.n	800aff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b00c:	4b36      	ldr	r3, [pc, #216]	; (800b0e8 <pvPortMalloc+0x180>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b012:	429a      	cmp	r2, r3
 800b014:	d050      	beq.n	800b0b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2208      	movs	r2, #8
 800b01c:	4413      	add	r3, r2
 800b01e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	2308      	movs	r3, #8
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	429a      	cmp	r2, r3
 800b036:	d91f      	bls.n	800b078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4413      	add	r3, r2
 800b03e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <pvPortMalloc+0xf8>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	613b      	str	r3, [r7, #16]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b072:	69b8      	ldr	r0, [r7, #24]
 800b074:	f000 f908 	bl	800b288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b078:	4b1d      	ldr	r3, [pc, #116]	; (800b0f0 <pvPortMalloc+0x188>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	4a1b      	ldr	r2, [pc, #108]	; (800b0f0 <pvPortMalloc+0x188>)
 800b084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b086:	4b1a      	ldr	r3, [pc, #104]	; (800b0f0 <pvPortMalloc+0x188>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	4b1b      	ldr	r3, [pc, #108]	; (800b0f8 <pvPortMalloc+0x190>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d203      	bcs.n	800b09a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b092:	4b17      	ldr	r3, [pc, #92]	; (800b0f0 <pvPortMalloc+0x188>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <pvPortMalloc+0x190>)
 800b098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <pvPortMalloc+0x184>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b0ae:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <pvPortMalloc+0x194>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	4a11      	ldr	r2, [pc, #68]	; (800b0fc <pvPortMalloc+0x194>)
 800b0b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0b8:	f7fe fcfa 	bl	8009ab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	f003 0307 	and.w	r3, r3, #7
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <pvPortMalloc+0x174>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	60fb      	str	r3, [r7, #12]
}
 800b0d8:	bf00      	nop
 800b0da:	e7fe      	b.n	800b0da <pvPortMalloc+0x172>
	return pvReturn;
 800b0dc:	69fb      	ldr	r3, [r7, #28]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3728      	adds	r7, #40	; 0x28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200102a4 	.word	0x200102a4
 800b0ec:	200102b8 	.word	0x200102b8
 800b0f0:	200102a8 	.word	0x200102a8
 800b0f4:	2001029c 	.word	0x2001029c
 800b0f8:	200102ac 	.word	0x200102ac
 800b0fc:	200102b0 	.word	0x200102b0

0800b100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d04d      	beq.n	800b1ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b112:	2308      	movs	r3, #8
 800b114:	425b      	negs	r3, r3
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	4413      	add	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	4b24      	ldr	r3, [pc, #144]	; (800b1b8 <vPortFree+0xb8>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4013      	ands	r3, r2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10a      	bne.n	800b144 <vPortFree+0x44>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	60fb      	str	r3, [r7, #12]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00a      	beq.n	800b162 <vPortFree+0x62>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	60bb      	str	r3, [r7, #8]
}
 800b15e:	bf00      	nop
 800b160:	e7fe      	b.n	800b160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <vPortFree+0xb8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d01e      	beq.n	800b1ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d11a      	bne.n	800b1ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	4b0e      	ldr	r3, [pc, #56]	; (800b1b8 <vPortFree+0xb8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	43db      	mvns	r3, r3
 800b182:	401a      	ands	r2, r3
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b188:	f7fe fc84 	bl	8009a94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <vPortFree+0xbc>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4413      	add	r3, r2
 800b196:	4a09      	ldr	r2, [pc, #36]	; (800b1bc <vPortFree+0xbc>)
 800b198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b19a:	6938      	ldr	r0, [r7, #16]
 800b19c:	f000 f874 	bl	800b288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b1a0:	4b07      	ldr	r3, [pc, #28]	; (800b1c0 <vPortFree+0xc0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	4a06      	ldr	r2, [pc, #24]	; (800b1c0 <vPortFree+0xc0>)
 800b1a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b1aa:	f7fe fc81 	bl	8009ab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1ae:	bf00      	nop
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	200102b8 	.word	0x200102b8
 800b1bc:	200102a8 	.word	0x200102a8
 800b1c0:	200102b4 	.word	0x200102b4

0800b1c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b1ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1d0:	4b27      	ldr	r3, [pc, #156]	; (800b270 <prvHeapInit+0xac>)
 800b1d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00c      	beq.n	800b1f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3307      	adds	r3, #7
 800b1e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 0307 	bic.w	r3, r3, #7
 800b1ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <prvHeapInit+0xac>)
 800b1f4:	4413      	add	r3, r2
 800b1f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1fc:	4a1d      	ldr	r2, [pc, #116]	; (800b274 <prvHeapInit+0xb0>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b202:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <prvHeapInit+0xb0>)
 800b204:	2200      	movs	r2, #0
 800b206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	4413      	add	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b210:	2208      	movs	r2, #8
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a15      	ldr	r2, [pc, #84]	; (800b278 <prvHeapInit+0xb4>)
 800b224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b226:	4b14      	ldr	r3, [pc, #80]	; (800b278 <prvHeapInit+0xb4>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b22e:	4b12      	ldr	r3, [pc, #72]	; (800b278 <prvHeapInit+0xb4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b244:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <prvHeapInit+0xb4>)
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <prvHeapInit+0xb8>)
 800b252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4a09      	ldr	r2, [pc, #36]	; (800b280 <prvHeapInit+0xbc>)
 800b25a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b25c:	4b09      	ldr	r3, [pc, #36]	; (800b284 <prvHeapInit+0xc0>)
 800b25e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b262:	601a      	str	r2, [r3, #0]
}
 800b264:	bf00      	nop
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	2000129c 	.word	0x2000129c
 800b274:	2001029c 	.word	0x2001029c
 800b278:	200102a4 	.word	0x200102a4
 800b27c:	200102ac 	.word	0x200102ac
 800b280:	200102a8 	.word	0x200102a8
 800b284:	200102b8 	.word	0x200102b8

0800b288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b290:	4b28      	ldr	r3, [pc, #160]	; (800b334 <prvInsertBlockIntoFreeList+0xac>)
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e002      	b.n	800b29c <prvInsertBlockIntoFreeList+0x14>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d8f7      	bhi.n	800b296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d108      	bne.n	800b2ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	441a      	add	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d118      	bne.n	800b310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	4b15      	ldr	r3, [pc, #84]	; (800b338 <prvInsertBlockIntoFreeList+0xb0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d00d      	beq.n	800b306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	441a      	add	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	e008      	b.n	800b318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b306:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <prvInsertBlockIntoFreeList+0xb0>)
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	e003      	b.n	800b318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d002      	beq.n	800b326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b326:	bf00      	nop
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	2001029c 	.word	0x2001029c
 800b338:	200102a4 	.word	0x200102a4

0800b33c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b340:	2200      	movs	r2, #0
 800b342:	4912      	ldr	r1, [pc, #72]	; (800b38c <MX_USB_Device_Init+0x50>)
 800b344:	4812      	ldr	r0, [pc, #72]	; (800b390 <MX_USB_Device_Init+0x54>)
 800b346:	f7fc f929 	bl	800759c <USBD_Init>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b350:	f7f5 fb81 	bl	8000a56 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b354:	490f      	ldr	r1, [pc, #60]	; (800b394 <MX_USB_Device_Init+0x58>)
 800b356:	480e      	ldr	r0, [pc, #56]	; (800b390 <MX_USB_Device_Init+0x54>)
 800b358:	f7fc f950 	bl	80075fc <USBD_RegisterClass>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b362:	f7f5 fb78 	bl	8000a56 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b366:	490c      	ldr	r1, [pc, #48]	; (800b398 <MX_USB_Device_Init+0x5c>)
 800b368:	4809      	ldr	r0, [pc, #36]	; (800b390 <MX_USB_Device_Init+0x54>)
 800b36a:	f7fc f8a1 	bl	80074b0 <USBD_CDC_RegisterInterface>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b374:	f7f5 fb6f 	bl	8000a56 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b378:	4805      	ldr	r0, [pc, #20]	; (800b390 <MX_USB_Device_Init+0x54>)
 800b37a:	f7fc f966 	bl	800764a <USBD_Start>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b384:	f7f5 fb67 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b388:	bf00      	nop
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	20000134 	.word	0x20000134
 800b390:	200102bc 	.word	0x200102bc
 800b394:	20000018 	.word	0x20000018
 800b398:	20000120 	.word	0x20000120

0800b39c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	4905      	ldr	r1, [pc, #20]	; (800b3b8 <CDC_Init_FS+0x1c>)
 800b3a4:	4805      	ldr	r0, [pc, #20]	; (800b3bc <CDC_Init_FS+0x20>)
 800b3a6:	f7fc f898 	bl	80074da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3aa:	4905      	ldr	r1, [pc, #20]	; (800b3c0 <CDC_Init_FS+0x24>)
 800b3ac:	4803      	ldr	r0, [pc, #12]	; (800b3bc <CDC_Init_FS+0x20>)
 800b3ae:	f7fc f8b2 	bl	8007516 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b3b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	20010d8c 	.word	0x20010d8c
 800b3bc:	200102bc 	.word	0x200102bc
 800b3c0:	2001058c 	.word	0x2001058c

0800b3c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	6039      	str	r1, [r7, #0]
 800b3de:	71fb      	strb	r3, [r7, #7]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	2b23      	cmp	r3, #35	; 0x23
 800b3e8:	d84a      	bhi.n	800b480 <CDC_Control_FS+0xac>
 800b3ea:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <CDC_Control_FS+0x1c>)
 800b3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f0:	0800b481 	.word	0x0800b481
 800b3f4:	0800b481 	.word	0x0800b481
 800b3f8:	0800b481 	.word	0x0800b481
 800b3fc:	0800b481 	.word	0x0800b481
 800b400:	0800b481 	.word	0x0800b481
 800b404:	0800b481 	.word	0x0800b481
 800b408:	0800b481 	.word	0x0800b481
 800b40c:	0800b481 	.word	0x0800b481
 800b410:	0800b481 	.word	0x0800b481
 800b414:	0800b481 	.word	0x0800b481
 800b418:	0800b481 	.word	0x0800b481
 800b41c:	0800b481 	.word	0x0800b481
 800b420:	0800b481 	.word	0x0800b481
 800b424:	0800b481 	.word	0x0800b481
 800b428:	0800b481 	.word	0x0800b481
 800b42c:	0800b481 	.word	0x0800b481
 800b430:	0800b481 	.word	0x0800b481
 800b434:	0800b481 	.word	0x0800b481
 800b438:	0800b481 	.word	0x0800b481
 800b43c:	0800b481 	.word	0x0800b481
 800b440:	0800b481 	.word	0x0800b481
 800b444:	0800b481 	.word	0x0800b481
 800b448:	0800b481 	.word	0x0800b481
 800b44c:	0800b481 	.word	0x0800b481
 800b450:	0800b481 	.word	0x0800b481
 800b454:	0800b481 	.word	0x0800b481
 800b458:	0800b481 	.word	0x0800b481
 800b45c:	0800b481 	.word	0x0800b481
 800b460:	0800b481 	.word	0x0800b481
 800b464:	0800b481 	.word	0x0800b481
 800b468:	0800b481 	.word	0x0800b481
 800b46c:	0800b481 	.word	0x0800b481
 800b470:	0800b481 	.word	0x0800b481
 800b474:	0800b481 	.word	0x0800b481
 800b478:	0800b481 	.word	0x0800b481
 800b47c:	0800b481 	.word	0x0800b481
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b480:	bf00      	nop
  }

  return (USBD_OK);
 800b482:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <CDC_Receive_FS+0x24>)
 800b49e:	f7fc f83a 	bl	8007516 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4a2:	4804      	ldr	r0, [pc, #16]	; (800b4b4 <CDC_Receive_FS+0x24>)
 800b4a4:	f7fc f850 	bl	8007548 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	200102bc 	.word	0x200102bc

0800b4b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	371c      	adds	r7, #28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
	...

0800b4dc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2212      	movs	r2, #18
 800b4ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b4ee:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	20000154 	.word	0x20000154

0800b500 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	6039      	str	r1, [r7, #0]
 800b50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2204      	movs	r2, #4
 800b510:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b512:	4b03      	ldr	r3, [pc, #12]	; (800b520 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	20000168 	.word	0x20000168

0800b524 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	6039      	str	r1, [r7, #0]
 800b52e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b530:	79fb      	ldrb	r3, [r7, #7]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d105      	bne.n	800b542 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	4907      	ldr	r1, [pc, #28]	; (800b558 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b53a:	4808      	ldr	r0, [pc, #32]	; (800b55c <USBD_CDC_ProductStrDescriptor+0x38>)
 800b53c:	f7fd f86d 	bl	800861a <USBD_GetString>
 800b540:	e004      	b.n	800b54c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	4904      	ldr	r1, [pc, #16]	; (800b558 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b546:	4805      	ldr	r0, [pc, #20]	; (800b55c <USBD_CDC_ProductStrDescriptor+0x38>)
 800b548:	f7fd f867 	bl	800861a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b54c:	4b02      	ldr	r3, [pc, #8]	; (800b558 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	2001158c 	.word	0x2001158c
 800b55c:	0800bf14 	.word	0x0800bf14

0800b560 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	4904      	ldr	r1, [pc, #16]	; (800b580 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b570:	4804      	ldr	r0, [pc, #16]	; (800b584 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b572:	f7fd f852 	bl	800861a <USBD_GetString>
  return USBD_StrDesc;
 800b576:	4b02      	ldr	r3, [pc, #8]	; (800b580 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	2001158c 	.word	0x2001158c
 800b584:	0800bf2c 	.word	0x0800bf2c

0800b588 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	6039      	str	r1, [r7, #0]
 800b592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	221a      	movs	r2, #26
 800b598:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b59a:	f000 f843 	bl	800b624 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b59e:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2000016c 	.word	0x2000016c

0800b5ac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	6039      	str	r1, [r7, #0]
 800b5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4907      	ldr	r1, [pc, #28]	; (800b5e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b5c2:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b5c4:	f7fd f829 	bl	800861a <USBD_GetString>
 800b5c8:	e004      	b.n	800b5d4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	4904      	ldr	r1, [pc, #16]	; (800b5e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b5ce:	4805      	ldr	r0, [pc, #20]	; (800b5e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b5d0:	f7fd f823 	bl	800861a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	2001158c 	.word	0x2001158c
 800b5e4:	0800bf40 	.word	0x0800bf40

0800b5e8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d105      	bne.n	800b606 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4907      	ldr	r1, [pc, #28]	; (800b61c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b5fe:	4808      	ldr	r0, [pc, #32]	; (800b620 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b600:	f7fd f80b 	bl	800861a <USBD_GetString>
 800b604:	e004      	b.n	800b610 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	4904      	ldr	r1, [pc, #16]	; (800b61c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b60a:	4805      	ldr	r0, [pc, #20]	; (800b620 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b60c:	f7fd f805 	bl	800861a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b610:	4b02      	ldr	r3, [pc, #8]	; (800b61c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	2001158c 	.word	0x2001158c
 800b620:	0800bf4c 	.word	0x0800bf4c

0800b624 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b62a:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <Get_SerialNum+0x44>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b630:	4b0e      	ldr	r3, [pc, #56]	; (800b66c <Get_SerialNum+0x48>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b636:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <Get_SerialNum+0x4c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4413      	add	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d009      	beq.n	800b65e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b64a:	2208      	movs	r2, #8
 800b64c:	4909      	ldr	r1, [pc, #36]	; (800b674 <Get_SerialNum+0x50>)
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f000 f814 	bl	800b67c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b654:	2204      	movs	r2, #4
 800b656:	4908      	ldr	r1, [pc, #32]	; (800b678 <Get_SerialNum+0x54>)
 800b658:	68b8      	ldr	r0, [r7, #8]
 800b65a:	f000 f80f 	bl	800b67c <IntToUnicode>
  }
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	1fff7590 	.word	0x1fff7590
 800b66c:	1fff7594 	.word	0x1fff7594
 800b670:	1fff7598 	.word	0x1fff7598
 800b674:	2000016e 	.word	0x2000016e
 800b678:	2000017e 	.word	0x2000017e

0800b67c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b68e:	2300      	movs	r3, #0
 800b690:	75fb      	strb	r3, [r7, #23]
 800b692:	e027      	b.n	800b6e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	0f1b      	lsrs	r3, r3, #28
 800b698:	2b09      	cmp	r3, #9
 800b69a:	d80b      	bhi.n	800b6b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	0f1b      	lsrs	r3, r3, #28
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3230      	adds	r2, #48	; 0x30
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	e00a      	b.n	800b6ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	0f1b      	lsrs	r3, r3, #28
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3237      	adds	r2, #55	; 0x37
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	011b      	lsls	r3, r3, #4
 800b6ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	4413      	add	r3, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	75fb      	strb	r3, [r7, #23]
 800b6e4:	7dfa      	ldrb	r2, [r7, #23]
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d3d3      	bcc.n	800b694 <IntToUnicode+0x18>
  }
}
 800b6ec:	bf00      	nop
 800b6ee:	bf00      	nop
 800b6f0:	371c      	adds	r7, #28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
	...

0800b6fc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b098      	sub	sp, #96	; 0x60
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b704:	f107 030c 	add.w	r3, r7, #12
 800b708:	2254      	movs	r2, #84	; 0x54
 800b70a:	2100      	movs	r1, #0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 faf9 	bl	800bd04 <memset>
  if(pcdHandle->Instance==USB)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a15      	ldr	r2, [pc, #84]	; (800b76c <HAL_PCD_MspInit+0x70>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d123      	bne.n	800b764 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b71c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b720:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b726:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b728:	f107 030c 	add.w	r3, r7, #12
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f8 fdcb 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b738:	f7f5 f98d 	bl	8000a56 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b73c:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <HAL_PCD_MspInit+0x74>)
 800b73e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b740:	4a0b      	ldr	r2, [pc, #44]	; (800b770 <HAL_PCD_MspInit+0x74>)
 800b742:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b746:	6593      	str	r3, [r2, #88]	; 0x58
 800b748:	4b09      	ldr	r3, [pc, #36]	; (800b770 <HAL_PCD_MspInit+0x74>)
 800b74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b74c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b750:	60bb      	str	r3, [r7, #8]
 800b752:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800b754:	2200      	movs	r2, #0
 800b756:	2105      	movs	r1, #5
 800b758:	2014      	movs	r0, #20
 800b75a:	f7f5 fcde 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b75e:	2014      	movs	r0, #20
 800b760:	f7f5 fcf5 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b764:	bf00      	nop
 800b766:	3760      	adds	r7, #96	; 0x60
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	40005c00 	.word	0x40005c00
 800b770:	40021000 	.word	0x40021000

0800b774 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f7fb ffa8 	bl	80076e0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b7aa:	78fa      	ldrb	r2, [r7, #3]
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	440b      	add	r3, r1
 800b7b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	78fb      	ldrb	r3, [r7, #3]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f7fb ffe2 	bl	800778a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b7c6:	bf00      	nop
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b7e0:	78fa      	ldrb	r2, [r7, #3]
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	440b      	add	r3, r1
 800b7ee:	3324      	adds	r3, #36	; 0x24
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	78fb      	ldrb	r3, [r7, #3]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	f7fc f82b 	bl	8007850 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b810:	4618      	mov	r0, r3
 800b812:	f7fc f93f 	bl	8007a94 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b826:	2301      	movs	r3, #1
 800b828:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	795b      	ldrb	r3, [r3, #5]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d001      	beq.n	800b836 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b832:	f7f5 f910 	bl	8000a56 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b83c:	7bfa      	ldrb	r2, [r7, #15]
 800b83e:	4611      	mov	r1, r2
 800b840:	4618      	mov	r0, r3
 800b842:	f7fc f8e9 	bl	8007a18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fc f895 	bl	800797c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b852:	bf00      	nop
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
	...

0800b85c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fc f8e4 	bl	8007a38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7a5b      	ldrb	r3, [r3, #9]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d005      	beq.n	800b884 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b878:	4b04      	ldr	r3, [pc, #16]	; (800b88c <HAL_PCD_SuspendCallback+0x30>)
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	4a03      	ldr	r2, [pc, #12]	; (800b88c <HAL_PCD_SuspendCallback+0x30>)
 800b87e:	f043 0306 	orr.w	r3, r3, #6
 800b882:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	e000ed00 	.word	0xe000ed00

0800b890 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	7a5b      	ldrb	r3, [r3, #9]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d007      	beq.n	800b8b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8a0:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <HAL_PCD_ResumeCallback+0x34>)
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	4a07      	ldr	r2, [pc, #28]	; (800b8c4 <HAL_PCD_ResumeCallback+0x34>)
 800b8a6:	f023 0306 	bic.w	r3, r3, #6
 800b8aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b8ac:	f000 f9f8 	bl	800bca0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fc f8d4 	bl	8007a64 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	e000ed00 	.word	0xe000ed00

0800b8c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b8d0:	4a2b      	ldr	r2, [pc, #172]	; (800b980 <USBD_LL_Init+0xb8>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a29      	ldr	r2, [pc, #164]	; (800b980 <USBD_LL_Init+0xb8>)
 800b8dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b8e0:	4b27      	ldr	r3, [pc, #156]	; (800b980 <USBD_LL_Init+0xb8>)
 800b8e2:	4a28      	ldr	r2, [pc, #160]	; (800b984 <USBD_LL_Init+0xbc>)
 800b8e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8e6:	4b26      	ldr	r3, [pc, #152]	; (800b980 <USBD_LL_Init+0xb8>)
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8ec:	4b24      	ldr	r3, [pc, #144]	; (800b980 <USBD_LL_Init+0xb8>)
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8f2:	4b23      	ldr	r3, [pc, #140]	; (800b980 <USBD_LL_Init+0xb8>)
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b8f8:	4b21      	ldr	r3, [pc, #132]	; (800b980 <USBD_LL_Init+0xb8>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8fe:	4b20      	ldr	r3, [pc, #128]	; (800b980 <USBD_LL_Init+0xb8>)
 800b900:	2200      	movs	r2, #0
 800b902:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b904:	4b1e      	ldr	r3, [pc, #120]	; (800b980 <USBD_LL_Init+0xb8>)
 800b906:	2200      	movs	r2, #0
 800b908:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b90a:	4b1d      	ldr	r3, [pc, #116]	; (800b980 <USBD_LL_Init+0xb8>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b910:	481b      	ldr	r0, [pc, #108]	; (800b980 <USBD_LL_Init+0xb8>)
 800b912:	f7f6 fa0a 	bl	8001d2a <HAL_PCD_Init>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b91c:	f7f5 f89b 	bl	8000a56 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b926:	2318      	movs	r3, #24
 800b928:	2200      	movs	r2, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	f7f7 fec4 	bl	80036b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b936:	2358      	movs	r3, #88	; 0x58
 800b938:	2200      	movs	r2, #0
 800b93a:	2180      	movs	r1, #128	; 0x80
 800b93c:	f7f7 febc 	bl	80036b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b946:	23c0      	movs	r3, #192	; 0xc0
 800b948:	2200      	movs	r2, #0
 800b94a:	2181      	movs	r1, #129	; 0x81
 800b94c:	f7f7 feb4 	bl	80036b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b956:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b95a:	2200      	movs	r2, #0
 800b95c:	2101      	movs	r1, #1
 800b95e:	f7f7 feab 	bl	80036b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b96c:	2200      	movs	r2, #0
 800b96e:	2182      	movs	r1, #130	; 0x82
 800b970:	f7f7 fea2 	bl	80036b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	2001178c 	.word	0x2001178c
 800b984:	40005c00 	.word	0x40005c00

0800b988 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7f6 fa91 	bl	8001ec6 <HAL_PCD_Start>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 f97e 	bl	800bcac <USBD_Get_USB_Status>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	4608      	mov	r0, r1
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	70fb      	strb	r3, [r7, #3]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70bb      	strb	r3, [r7, #2]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9e6:	78bb      	ldrb	r3, [r7, #2]
 800b9e8:	883a      	ldrh	r2, [r7, #0]
 800b9ea:	78f9      	ldrb	r1, [r7, #3]
 800b9ec:	f7f6 fbd8 	bl	80021a0 <HAL_PCD_EP_Open>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 f958 	bl	800bcac <USBD_Get_USB_Status>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	460b      	mov	r3, r1
 800ba14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba24:	78fa      	ldrb	r2, [r7, #3]
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7f6 fc16 	bl	800225a <HAL_PCD_EP_Close>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f000 f939 	bl	800bcac <USBD_Get_USB_Status>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	460b      	mov	r3, r1
 800ba52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba62:	78fa      	ldrb	r2, [r7, #3]
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f6 fcbf 	bl	80023ea <HAL_PCD_EP_SetStall>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 f91a 	bl	800bcac <USBD_Get_USB_Status>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800baa0:	78fa      	ldrb	r2, [r7, #3]
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7f6 fcf2 	bl	800248e <HAL_PCD_EP_ClrStall>
 800baaa:	4603      	mov	r3, r0
 800baac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baae:	7bfb      	ldrb	r3, [r7, #15]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 f8fb 	bl	800bcac <USBD_Get_USB_Status>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baba:	7bbb      	ldrb	r3, [r7, #14]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bad6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800badc:	2b00      	cmp	r3, #0
 800bade:	da0b      	bge.n	800baf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bae6:	68f9      	ldr	r1, [r7, #12]
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	440b      	add	r3, r1
 800baf2:	3312      	adds	r3, #18
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	e00b      	b.n	800bb10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800baf8:	78fb      	ldrb	r3, [r7, #3]
 800bafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bafe:	68f9      	ldr	r1, [r7, #12]
 800bb00:	4613      	mov	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	440b      	add	r3, r1
 800bb0a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800bb0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb36:	78fa      	ldrb	r2, [r7, #3]
 800bb38:	4611      	mov	r1, r2
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f6 fb0c 	bl	8002158 <HAL_PCD_SetAddress>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f8b0 	bl	800bcac <USBD_Get_USB_Status>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b086      	sub	sp, #24
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
 800bb66:	460b      	mov	r3, r1
 800bb68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb78:	7af9      	ldrb	r1, [r7, #11]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	f7f6 fbfd 	bl	800237c <HAL_PCD_EP_Transmit>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 f88f 	bl	800bcac <USBD_Get_USB_Status>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb92:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	607a      	str	r2, [r7, #4]
 800bba6:	603b      	str	r3, [r7, #0]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbba:	7af9      	ldrb	r1, [r7, #11]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	f7f6 fb93 	bl	80022ea <HAL_PCD_EP_Receive>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 f86e 	bl	800bcac <USBD_Get_USB_Status>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbf0:	78fa      	ldrb	r2, [r7, #3]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f6 fba9 	bl	800234c <HAL_PCD_EP_GetRxCount>
 800bbfa:	4603      	mov	r3, r0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d002      	beq.n	800bc1c <HAL_PCDEx_LPM_Callback+0x18>
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d013      	beq.n	800bc42 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bc1a:	e023      	b.n	800bc64 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	7a5b      	ldrb	r3, [r3, #9]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d007      	beq.n	800bc34 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc24:	f000 f83c 	bl	800bca0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc28:	4b10      	ldr	r3, [pc, #64]	; (800bc6c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	4a0f      	ldr	r2, [pc, #60]	; (800bc6c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc2e:	f023 0306 	bic.w	r3, r3, #6
 800bc32:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fb ff12 	bl	8007a64 <USBD_LL_Resume>
    break;
 800bc40:	e010      	b.n	800bc64 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fb fef5 	bl	8007a38 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	7a5b      	ldrb	r3, [r3, #9]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d005      	beq.n	800bc62 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc56:	4b05      	ldr	r3, [pc, #20]	; (800bc6c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	4a04      	ldr	r2, [pc, #16]	; (800bc6c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc5c:	f043 0306 	orr.w	r3, r3, #6
 800bc60:	6113      	str	r3, [r2, #16]
    break;
 800bc62:	bf00      	nop
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	e000ed00 	.word	0xe000ed00

0800bc70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc78:	4b03      	ldr	r3, [pc, #12]	; (800bc88 <USBD_static_malloc+0x18>)
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	20011a68 	.word	0x20011a68

0800bc8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]

}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bca4:	f7f4 fe8b 	bl	80009be <SystemClock_Config>
}
 800bca8:	bf00      	nop
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d817      	bhi.n	800bcf0 <USBD_Get_USB_Status+0x44>
 800bcc0:	a201      	add	r2, pc, #4	; (adr r2, 800bcc8 <USBD_Get_USB_Status+0x1c>)
 800bcc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc6:	bf00      	nop
 800bcc8:	0800bcd9 	.word	0x0800bcd9
 800bccc:	0800bcdf 	.word	0x0800bcdf
 800bcd0:	0800bce5 	.word	0x0800bce5
 800bcd4:	0800bceb 	.word	0x0800bceb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73fb      	strb	r3, [r7, #15]
    break;
 800bcdc:	e00b      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcde:	2303      	movs	r3, #3
 800bce0:	73fb      	strb	r3, [r7, #15]
    break;
 800bce2:	e008      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bce4:	2301      	movs	r3, #1
 800bce6:	73fb      	strb	r3, [r7, #15]
    break;
 800bce8:	e005      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcea:	2303      	movs	r3, #3
 800bcec:	73fb      	strb	r3, [r7, #15]
    break;
 800bcee:	e002      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf4:	bf00      	nop
  }
  return usb_status;
 800bcf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <memset>:
 800bd04:	4402      	add	r2, r0
 800bd06:	4603      	mov	r3, r0
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d100      	bne.n	800bd0e <memset+0xa>
 800bd0c:	4770      	bx	lr
 800bd0e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd12:	e7f9      	b.n	800bd08 <memset+0x4>

0800bd14 <_reclaim_reent>:
 800bd14:	4b29      	ldr	r3, [pc, #164]	; (800bdbc <_reclaim_reent+0xa8>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4283      	cmp	r3, r0
 800bd1a:	b570      	push	{r4, r5, r6, lr}
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	d04b      	beq.n	800bdb8 <_reclaim_reent+0xa4>
 800bd20:	69c3      	ldr	r3, [r0, #28]
 800bd22:	b143      	cbz	r3, 800bd36 <_reclaim_reent+0x22>
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d144      	bne.n	800bdb4 <_reclaim_reent+0xa0>
 800bd2a:	69e3      	ldr	r3, [r4, #28]
 800bd2c:	6819      	ldr	r1, [r3, #0]
 800bd2e:	b111      	cbz	r1, 800bd36 <_reclaim_reent+0x22>
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 f879 	bl	800be28 <_free_r>
 800bd36:	6961      	ldr	r1, [r4, #20]
 800bd38:	b111      	cbz	r1, 800bd40 <_reclaim_reent+0x2c>
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 f874 	bl	800be28 <_free_r>
 800bd40:	69e1      	ldr	r1, [r4, #28]
 800bd42:	b111      	cbz	r1, 800bd4a <_reclaim_reent+0x36>
 800bd44:	4620      	mov	r0, r4
 800bd46:	f000 f86f 	bl	800be28 <_free_r>
 800bd4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bd4c:	b111      	cbz	r1, 800bd54 <_reclaim_reent+0x40>
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f000 f86a 	bl	800be28 <_free_r>
 800bd54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd56:	b111      	cbz	r1, 800bd5e <_reclaim_reent+0x4a>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 f865 	bl	800be28 <_free_r>
 800bd5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bd60:	b111      	cbz	r1, 800bd68 <_reclaim_reent+0x54>
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 f860 	bl	800be28 <_free_r>
 800bd68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd6a:	b111      	cbz	r1, 800bd72 <_reclaim_reent+0x5e>
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 f85b 	bl	800be28 <_free_r>
 800bd72:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bd74:	b111      	cbz	r1, 800bd7c <_reclaim_reent+0x68>
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 f856 	bl	800be28 <_free_r>
 800bd7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bd7e:	b111      	cbz	r1, 800bd86 <_reclaim_reent+0x72>
 800bd80:	4620      	mov	r0, r4
 800bd82:	f000 f851 	bl	800be28 <_free_r>
 800bd86:	6a23      	ldr	r3, [r4, #32]
 800bd88:	b1b3      	cbz	r3, 800bdb8 <_reclaim_reent+0xa4>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd90:	4718      	bx	r3
 800bd92:	5949      	ldr	r1, [r1, r5]
 800bd94:	b941      	cbnz	r1, 800bda8 <_reclaim_reent+0x94>
 800bd96:	3504      	adds	r5, #4
 800bd98:	69e3      	ldr	r3, [r4, #28]
 800bd9a:	2d80      	cmp	r5, #128	; 0x80
 800bd9c:	68d9      	ldr	r1, [r3, #12]
 800bd9e:	d1f8      	bne.n	800bd92 <_reclaim_reent+0x7e>
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 f841 	bl	800be28 <_free_r>
 800bda6:	e7c0      	b.n	800bd2a <_reclaim_reent+0x16>
 800bda8:	680e      	ldr	r6, [r1, #0]
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 f83c 	bl	800be28 <_free_r>
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	e7ef      	b.n	800bd94 <_reclaim_reent+0x80>
 800bdb4:	2500      	movs	r5, #0
 800bdb6:	e7ef      	b.n	800bd98 <_reclaim_reent+0x84>
 800bdb8:	bd70      	pop	{r4, r5, r6, pc}
 800bdba:	bf00      	nop
 800bdbc:	200001d4 	.word	0x200001d4

0800bdc0 <__libc_init_array>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	4d0d      	ldr	r5, [pc, #52]	; (800bdf8 <__libc_init_array+0x38>)
 800bdc4:	4c0d      	ldr	r4, [pc, #52]	; (800bdfc <__libc_init_array+0x3c>)
 800bdc6:	1b64      	subs	r4, r4, r5
 800bdc8:	10a4      	asrs	r4, r4, #2
 800bdca:	2600      	movs	r6, #0
 800bdcc:	42a6      	cmp	r6, r4
 800bdce:	d109      	bne.n	800bde4 <__libc_init_array+0x24>
 800bdd0:	4d0b      	ldr	r5, [pc, #44]	; (800be00 <__libc_init_array+0x40>)
 800bdd2:	4c0c      	ldr	r4, [pc, #48]	; (800be04 <__libc_init_array+0x44>)
 800bdd4:	f000 f880 	bl	800bed8 <_init>
 800bdd8:	1b64      	subs	r4, r4, r5
 800bdda:	10a4      	asrs	r4, r4, #2
 800bddc:	2600      	movs	r6, #0
 800bdde:	42a6      	cmp	r6, r4
 800bde0:	d105      	bne.n	800bdee <__libc_init_array+0x2e>
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bde8:	4798      	blx	r3
 800bdea:	3601      	adds	r6, #1
 800bdec:	e7ee      	b.n	800bdcc <__libc_init_array+0xc>
 800bdee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf2:	4798      	blx	r3
 800bdf4:	3601      	adds	r6, #1
 800bdf6:	e7f2      	b.n	800bdde <__libc_init_array+0x1e>
 800bdf8:	0800bf90 	.word	0x0800bf90
 800bdfc:	0800bf90 	.word	0x0800bf90
 800be00:	0800bf90 	.word	0x0800bf90
 800be04:	0800bf94 	.word	0x0800bf94

0800be08 <__retarget_lock_acquire_recursive>:
 800be08:	4770      	bx	lr

0800be0a <__retarget_lock_release_recursive>:
 800be0a:	4770      	bx	lr

0800be0c <memcpy>:
 800be0c:	440a      	add	r2, r1
 800be0e:	4291      	cmp	r1, r2
 800be10:	f100 33ff 	add.w	r3, r0, #4294967295
 800be14:	d100      	bne.n	800be18 <memcpy+0xc>
 800be16:	4770      	bx	lr
 800be18:	b510      	push	{r4, lr}
 800be1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be22:	4291      	cmp	r1, r2
 800be24:	d1f9      	bne.n	800be1a <memcpy+0xe>
 800be26:	bd10      	pop	{r4, pc}

0800be28 <_free_r>:
 800be28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be2a:	2900      	cmp	r1, #0
 800be2c:	d044      	beq.n	800beb8 <_free_r+0x90>
 800be2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be32:	9001      	str	r0, [sp, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f1a1 0404 	sub.w	r4, r1, #4
 800be3a:	bfb8      	it	lt
 800be3c:	18e4      	addlt	r4, r4, r3
 800be3e:	f000 f83f 	bl	800bec0 <__malloc_lock>
 800be42:	4a1e      	ldr	r2, [pc, #120]	; (800bebc <_free_r+0x94>)
 800be44:	9801      	ldr	r0, [sp, #4]
 800be46:	6813      	ldr	r3, [r2, #0]
 800be48:	b933      	cbnz	r3, 800be58 <_free_r+0x30>
 800be4a:	6063      	str	r3, [r4, #4]
 800be4c:	6014      	str	r4, [r2, #0]
 800be4e:	b003      	add	sp, #12
 800be50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be54:	f000 b83a 	b.w	800becc <__malloc_unlock>
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d908      	bls.n	800be6e <_free_r+0x46>
 800be5c:	6825      	ldr	r5, [r4, #0]
 800be5e:	1961      	adds	r1, r4, r5
 800be60:	428b      	cmp	r3, r1
 800be62:	bf01      	itttt	eq
 800be64:	6819      	ldreq	r1, [r3, #0]
 800be66:	685b      	ldreq	r3, [r3, #4]
 800be68:	1949      	addeq	r1, r1, r5
 800be6a:	6021      	streq	r1, [r4, #0]
 800be6c:	e7ed      	b.n	800be4a <_free_r+0x22>
 800be6e:	461a      	mov	r2, r3
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	b10b      	cbz	r3, 800be78 <_free_r+0x50>
 800be74:	42a3      	cmp	r3, r4
 800be76:	d9fa      	bls.n	800be6e <_free_r+0x46>
 800be78:	6811      	ldr	r1, [r2, #0]
 800be7a:	1855      	adds	r5, r2, r1
 800be7c:	42a5      	cmp	r5, r4
 800be7e:	d10b      	bne.n	800be98 <_free_r+0x70>
 800be80:	6824      	ldr	r4, [r4, #0]
 800be82:	4421      	add	r1, r4
 800be84:	1854      	adds	r4, r2, r1
 800be86:	42a3      	cmp	r3, r4
 800be88:	6011      	str	r1, [r2, #0]
 800be8a:	d1e0      	bne.n	800be4e <_free_r+0x26>
 800be8c:	681c      	ldr	r4, [r3, #0]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	6053      	str	r3, [r2, #4]
 800be92:	440c      	add	r4, r1
 800be94:	6014      	str	r4, [r2, #0]
 800be96:	e7da      	b.n	800be4e <_free_r+0x26>
 800be98:	d902      	bls.n	800bea0 <_free_r+0x78>
 800be9a:	230c      	movs	r3, #12
 800be9c:	6003      	str	r3, [r0, #0]
 800be9e:	e7d6      	b.n	800be4e <_free_r+0x26>
 800bea0:	6825      	ldr	r5, [r4, #0]
 800bea2:	1961      	adds	r1, r4, r5
 800bea4:	428b      	cmp	r3, r1
 800bea6:	bf04      	itt	eq
 800bea8:	6819      	ldreq	r1, [r3, #0]
 800beaa:	685b      	ldreq	r3, [r3, #4]
 800beac:	6063      	str	r3, [r4, #4]
 800beae:	bf04      	itt	eq
 800beb0:	1949      	addeq	r1, r1, r5
 800beb2:	6021      	streq	r1, [r4, #0]
 800beb4:	6054      	str	r4, [r2, #4]
 800beb6:	e7ca      	b.n	800be4e <_free_r+0x26>
 800beb8:	b003      	add	sp, #12
 800beba:	bd30      	pop	{r4, r5, pc}
 800bebc:	20011dc4 	.word	0x20011dc4

0800bec0 <__malloc_lock>:
 800bec0:	4801      	ldr	r0, [pc, #4]	; (800bec8 <__malloc_lock+0x8>)
 800bec2:	f7ff bfa1 	b.w	800be08 <__retarget_lock_acquire_recursive>
 800bec6:	bf00      	nop
 800bec8:	20011dc0 	.word	0x20011dc0

0800becc <__malloc_unlock>:
 800becc:	4801      	ldr	r0, [pc, #4]	; (800bed4 <__malloc_unlock+0x8>)
 800bece:	f7ff bf9c 	b.w	800be0a <__retarget_lock_release_recursive>
 800bed2:	bf00      	nop
 800bed4:	20011dc0 	.word	0x20011dc0

0800bed8 <_init>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	bf00      	nop
 800bedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bede:	bc08      	pop	{r3}
 800bee0:	469e      	mov	lr, r3
 800bee2:	4770      	bx	lr

0800bee4 <_fini>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	bf00      	nop
 800bee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beea:	bc08      	pop	{r3}
 800beec:	469e      	mov	lr, r3
 800beee:	4770      	bx	lr
